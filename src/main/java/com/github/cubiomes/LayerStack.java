// Generated by jextract

package com.github.cubiomes;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SequenceLayout;
import java.lang.invoke.MethodHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct LayerStack {
 *     Layer layers[61];
 *     Layer *entry_1;
 *     Layer *entry_4;
 *     Layer *entry_16;
 *     Layer *entry_64;
 *     Layer *entry_256;
 *     PerlinNoise oceanRnd;
 * }
 * }
 */
public class LayerStack {

    LayerStack() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(61, Layer.layout()).withName("layers"),
        CubiomesHeaders.C_POINTER.withName("entry_1"),
        CubiomesHeaders.C_POINTER.withName("entry_4"),
        CubiomesHeaders.C_POINTER.withName("entry_16"),
        CubiomesHeaders.C_POINTER.withName("entry_64"),
        CubiomesHeaders.C_POINTER.withName("entry_256"),
        PerlinNoise.layout().withName("oceanRnd")
    ).withName("LayerStack");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout layers$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("layers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Layer layers[61]
     * }
     */
    public static final SequenceLayout layers$layout() {
        return layers$LAYOUT;
    }

    private static final long layers$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Layer layers[61]
     * }
     */
    public static final long layers$offset() {
        return layers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Layer layers[61]
     * }
     */
    public static MemorySegment layers(MemorySegment struct) {
        return struct.asSlice(layers$OFFSET, layers$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Layer layers[61]
     * }
     */
    public static void layers(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, layers$OFFSET, layers$LAYOUT.byteSize());
    }

    private static long[] layers$DIMS = { 61 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * Layer layers[61]
     * }
     */
    public static long[] layers$dimensions() {
        return layers$DIMS;
    }
    private static final MethodHandle layers$ELEM_HANDLE = layers$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * Layer layers[61]
     * }
     */
    public static MemorySegment layers(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)layers$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * Layer layers[61]
     * }
     */
    public static void layers(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, layers(struct, index0), 0L, Layer.layout().byteSize());
    }

    private static final AddressLayout entry_1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("entry_1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Layer *entry_1
     * }
     */
    public static final AddressLayout entry_1$layout() {
        return entry_1$LAYOUT;
    }

    private static final long entry_1$OFFSET = 4392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Layer *entry_1
     * }
     */
    public static final long entry_1$offset() {
        return entry_1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Layer *entry_1
     * }
     */
    public static MemorySegment entry_1(MemorySegment struct) {
        return struct.get(entry_1$LAYOUT, entry_1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Layer *entry_1
     * }
     */
    public static void entry_1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(entry_1$LAYOUT, entry_1$OFFSET, fieldValue);
    }

    private static final AddressLayout entry_4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("entry_4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Layer *entry_4
     * }
     */
    public static final AddressLayout entry_4$layout() {
        return entry_4$LAYOUT;
    }

    private static final long entry_4$OFFSET = 4400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Layer *entry_4
     * }
     */
    public static final long entry_4$offset() {
        return entry_4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Layer *entry_4
     * }
     */
    public static MemorySegment entry_4(MemorySegment struct) {
        return struct.get(entry_4$LAYOUT, entry_4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Layer *entry_4
     * }
     */
    public static void entry_4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(entry_4$LAYOUT, entry_4$OFFSET, fieldValue);
    }

    private static final AddressLayout entry_16$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("entry_16"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Layer *entry_16
     * }
     */
    public static final AddressLayout entry_16$layout() {
        return entry_16$LAYOUT;
    }

    private static final long entry_16$OFFSET = 4408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Layer *entry_16
     * }
     */
    public static final long entry_16$offset() {
        return entry_16$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Layer *entry_16
     * }
     */
    public static MemorySegment entry_16(MemorySegment struct) {
        return struct.get(entry_16$LAYOUT, entry_16$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Layer *entry_16
     * }
     */
    public static void entry_16(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(entry_16$LAYOUT, entry_16$OFFSET, fieldValue);
    }

    private static final AddressLayout entry_64$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("entry_64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Layer *entry_64
     * }
     */
    public static final AddressLayout entry_64$layout() {
        return entry_64$LAYOUT;
    }

    private static final long entry_64$OFFSET = 4416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Layer *entry_64
     * }
     */
    public static final long entry_64$offset() {
        return entry_64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Layer *entry_64
     * }
     */
    public static MemorySegment entry_64(MemorySegment struct) {
        return struct.get(entry_64$LAYOUT, entry_64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Layer *entry_64
     * }
     */
    public static void entry_64(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(entry_64$LAYOUT, entry_64$OFFSET, fieldValue);
    }

    private static final AddressLayout entry_256$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("entry_256"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Layer *entry_256
     * }
     */
    public static final AddressLayout entry_256$layout() {
        return entry_256$LAYOUT;
    }

    private static final long entry_256$OFFSET = 4424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Layer *entry_256
     * }
     */
    public static final long entry_256$offset() {
        return entry_256$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Layer *entry_256
     * }
     */
    public static MemorySegment entry_256(MemorySegment struct) {
        return struct.get(entry_256$LAYOUT, entry_256$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Layer *entry_256
     * }
     */
    public static void entry_256(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(entry_256$LAYOUT, entry_256$OFFSET, fieldValue);
    }

    private static final GroupLayout oceanRnd$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("oceanRnd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PerlinNoise oceanRnd
     * }
     */
    public static final GroupLayout oceanRnd$layout() {
        return oceanRnd$LAYOUT;
    }

    private static final long oceanRnd$OFFSET = 4432;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PerlinNoise oceanRnd
     * }
     */
    public static final long oceanRnd$offset() {
        return oceanRnd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PerlinNoise oceanRnd
     * }
     */
    public static MemorySegment oceanRnd(MemorySegment struct) {
        return struct.asSlice(oceanRnd$OFFSET, oceanRnd$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PerlinNoise oceanRnd
     * }
     */
    public static void oceanRnd(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, oceanRnd$OFFSET, oceanRnd$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

