// Generated by jextract

package com.github.cubiomes;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet lang=c :
 * struct StructureVariant {
 *     uint8_t abandoned;
 *     uint8_t giant;
 *     uint8_t underground;
 *     uint8_t airpocket;
 *     uint8_t basement;
 *     uint8_t cracked;
 *     uint8_t size;
 *     uint8_t start;
 *     short biome;
 *     uint8_t rotation;
 *     uint8_t mirror;
 *     int16_t x;
 *     int16_t y;
 *     int16_t z;
 *     int16_t sx;
 *     int16_t sy;
 *     int16_t sz;
 * }
 * }
 */
public class StructureVariant {

    StructureVariant() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Cubiomes.C_CHAR.withName("abandoned"),
        Cubiomes.C_CHAR.withName("giant"),
        Cubiomes.C_CHAR.withName("underground"),
        Cubiomes.C_CHAR.withName("airpocket"),
        Cubiomes.C_CHAR.withName("basement"),
        Cubiomes.C_CHAR.withName("cracked"),
        Cubiomes.C_CHAR.withName("size"),
        Cubiomes.C_CHAR.withName("start"),
        Cubiomes.C_SHORT.withName("biome"),
        Cubiomes.C_CHAR.withName("rotation"),
        Cubiomes.C_CHAR.withName("mirror"),
        Cubiomes.C_SHORT.withName("x"),
        Cubiomes.C_SHORT.withName("y"),
        Cubiomes.C_SHORT.withName("z"),
        Cubiomes.C_SHORT.withName("sx"),
        Cubiomes.C_SHORT.withName("sy"),
        Cubiomes.C_SHORT.withName("sz")
    ).withName("StructureVariant");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte abandoned$LAYOUT = (OfByte)$LAYOUT.select(groupElement("abandoned"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t abandoned
     * }
     */
    public static final OfByte abandoned$layout() {
        return abandoned$LAYOUT;
    }

    private static final long abandoned$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t abandoned
     * }
     */
    public static final long abandoned$offset() {
        return abandoned$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t abandoned
     * }
     */
    public static byte abandoned(MemorySegment struct) {
        return struct.get(abandoned$LAYOUT, abandoned$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t abandoned
     * }
     */
    public static void abandoned(MemorySegment struct, byte fieldValue) {
        struct.set(abandoned$LAYOUT, abandoned$OFFSET, fieldValue);
    }

    private static final OfByte giant$LAYOUT = (OfByte)$LAYOUT.select(groupElement("giant"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t giant
     * }
     */
    public static final OfByte giant$layout() {
        return giant$LAYOUT;
    }

    private static final long giant$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t giant
     * }
     */
    public static final long giant$offset() {
        return giant$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t giant
     * }
     */
    public static byte giant(MemorySegment struct) {
        return struct.get(giant$LAYOUT, giant$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t giant
     * }
     */
    public static void giant(MemorySegment struct, byte fieldValue) {
        struct.set(giant$LAYOUT, giant$OFFSET, fieldValue);
    }

    private static final OfByte underground$LAYOUT = (OfByte)$LAYOUT.select(groupElement("underground"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t underground
     * }
     */
    public static final OfByte underground$layout() {
        return underground$LAYOUT;
    }

    private static final long underground$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t underground
     * }
     */
    public static final long underground$offset() {
        return underground$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t underground
     * }
     */
    public static byte underground(MemorySegment struct) {
        return struct.get(underground$LAYOUT, underground$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t underground
     * }
     */
    public static void underground(MemorySegment struct, byte fieldValue) {
        struct.set(underground$LAYOUT, underground$OFFSET, fieldValue);
    }

    private static final OfByte airpocket$LAYOUT = (OfByte)$LAYOUT.select(groupElement("airpocket"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t airpocket
     * }
     */
    public static final OfByte airpocket$layout() {
        return airpocket$LAYOUT;
    }

    private static final long airpocket$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t airpocket
     * }
     */
    public static final long airpocket$offset() {
        return airpocket$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t airpocket
     * }
     */
    public static byte airpocket(MemorySegment struct) {
        return struct.get(airpocket$LAYOUT, airpocket$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t airpocket
     * }
     */
    public static void airpocket(MemorySegment struct, byte fieldValue) {
        struct.set(airpocket$LAYOUT, airpocket$OFFSET, fieldValue);
    }

    private static final OfByte basement$LAYOUT = (OfByte)$LAYOUT.select(groupElement("basement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t basement
     * }
     */
    public static final OfByte basement$layout() {
        return basement$LAYOUT;
    }

    private static final long basement$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t basement
     * }
     */
    public static final long basement$offset() {
        return basement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t basement
     * }
     */
    public static byte basement(MemorySegment struct) {
        return struct.get(basement$LAYOUT, basement$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t basement
     * }
     */
    public static void basement(MemorySegment struct, byte fieldValue) {
        struct.set(basement$LAYOUT, basement$OFFSET, fieldValue);
    }

    private static final OfByte cracked$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cracked"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t cracked
     * }
     */
    public static final OfByte cracked$layout() {
        return cracked$LAYOUT;
    }

    private static final long cracked$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t cracked
     * }
     */
    public static final long cracked$offset() {
        return cracked$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t cracked
     * }
     */
    public static byte cracked(MemorySegment struct) {
        return struct.get(cracked$LAYOUT, cracked$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t cracked
     * }
     */
    public static void cracked(MemorySegment struct, byte fieldValue) {
        struct.set(cracked$LAYOUT, cracked$OFFSET, fieldValue);
    }

    private static final OfByte size$LAYOUT = (OfByte)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t size
     * }
     */
    public static final OfByte size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t size
     * }
     */
    public static byte size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t size
     * }
     */
    public static void size(MemorySegment struct, byte fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfByte start$LAYOUT = (OfByte)$LAYOUT.select(groupElement("start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t start
     * }
     */
    public static final OfByte start$layout() {
        return start$LAYOUT;
    }

    private static final long start$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t start
     * }
     */
    public static final long start$offset() {
        return start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t start
     * }
     */
    public static byte start(MemorySegment struct) {
        return struct.get(start$LAYOUT, start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t start
     * }
     */
    public static void start(MemorySegment struct, byte fieldValue) {
        struct.set(start$LAYOUT, start$OFFSET, fieldValue);
    }

    private static final OfShort biome$LAYOUT = (OfShort)$LAYOUT.select(groupElement("biome"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short biome
     * }
     */
    public static final OfShort biome$layout() {
        return biome$LAYOUT;
    }

    private static final long biome$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short biome
     * }
     */
    public static final long biome$offset() {
        return biome$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short biome
     * }
     */
    public static short biome(MemorySegment struct) {
        return struct.get(biome$LAYOUT, biome$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short biome
     * }
     */
    public static void biome(MemorySegment struct, short fieldValue) {
        struct.set(biome$LAYOUT, biome$OFFSET, fieldValue);
    }

    private static final OfByte rotation$LAYOUT = (OfByte)$LAYOUT.select(groupElement("rotation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t rotation
     * }
     */
    public static final OfByte rotation$layout() {
        return rotation$LAYOUT;
    }

    private static final long rotation$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t rotation
     * }
     */
    public static final long rotation$offset() {
        return rotation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t rotation
     * }
     */
    public static byte rotation(MemorySegment struct) {
        return struct.get(rotation$LAYOUT, rotation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t rotation
     * }
     */
    public static void rotation(MemorySegment struct, byte fieldValue) {
        struct.set(rotation$LAYOUT, rotation$OFFSET, fieldValue);
    }

    private static final OfByte mirror$LAYOUT = (OfByte)$LAYOUT.select(groupElement("mirror"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t mirror
     * }
     */
    public static final OfByte mirror$layout() {
        return mirror$LAYOUT;
    }

    private static final long mirror$OFFSET = 11;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t mirror
     * }
     */
    public static final long mirror$offset() {
        return mirror$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t mirror
     * }
     */
    public static byte mirror(MemorySegment struct) {
        return struct.get(mirror$LAYOUT, mirror$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t mirror
     * }
     */
    public static void mirror(MemorySegment struct, byte fieldValue) {
        struct.set(mirror$LAYOUT, mirror$OFFSET, fieldValue);
    }

    private static final OfShort x$LAYOUT = (OfShort)$LAYOUT.select(groupElement("x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t x
     * }
     */
    public static final OfShort x$layout() {
        return x$LAYOUT;
    }

    private static final long x$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t x
     * }
     */
    public static final long x$offset() {
        return x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t x
     * }
     */
    public static short x(MemorySegment struct) {
        return struct.get(x$LAYOUT, x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t x
     * }
     */
    public static void x(MemorySegment struct, short fieldValue) {
        struct.set(x$LAYOUT, x$OFFSET, fieldValue);
    }

    private static final OfShort y$LAYOUT = (OfShort)$LAYOUT.select(groupElement("y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t y
     * }
     */
    public static final OfShort y$layout() {
        return y$LAYOUT;
    }

    private static final long y$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t y
     * }
     */
    public static final long y$offset() {
        return y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t y
     * }
     */
    public static short y(MemorySegment struct) {
        return struct.get(y$LAYOUT, y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t y
     * }
     */
    public static void y(MemorySegment struct, short fieldValue) {
        struct.set(y$LAYOUT, y$OFFSET, fieldValue);
    }

    private static final OfShort z$LAYOUT = (OfShort)$LAYOUT.select(groupElement("z"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t z
     * }
     */
    public static final OfShort z$layout() {
        return z$LAYOUT;
    }

    private static final long z$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t z
     * }
     */
    public static final long z$offset() {
        return z$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t z
     * }
     */
    public static short z(MemorySegment struct) {
        return struct.get(z$LAYOUT, z$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t z
     * }
     */
    public static void z(MemorySegment struct, short fieldValue) {
        struct.set(z$LAYOUT, z$OFFSET, fieldValue);
    }

    private static final OfShort sx$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t sx
     * }
     */
    public static final OfShort sx$layout() {
        return sx$LAYOUT;
    }

    private static final long sx$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t sx
     * }
     */
    public static final long sx$offset() {
        return sx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t sx
     * }
     */
    public static short sx(MemorySegment struct) {
        return struct.get(sx$LAYOUT, sx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t sx
     * }
     */
    public static void sx(MemorySegment struct, short fieldValue) {
        struct.set(sx$LAYOUT, sx$OFFSET, fieldValue);
    }

    private static final OfShort sy$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t sy
     * }
     */
    public static final OfShort sy$layout() {
        return sy$LAYOUT;
    }

    private static final long sy$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t sy
     * }
     */
    public static final long sy$offset() {
        return sy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t sy
     * }
     */
    public static short sy(MemorySegment struct) {
        return struct.get(sy$LAYOUT, sy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t sy
     * }
     */
    public static void sy(MemorySegment struct, short fieldValue) {
        struct.set(sy$LAYOUT, sy$OFFSET, fieldValue);
    }

    private static final OfShort sz$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t sz
     * }
     */
    public static final OfShort sz$layout() {
        return sz$LAYOUT;
    }

    private static final long sz$OFFSET = 22;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t sz
     * }
     */
    public static final long sz$offset() {
        return sz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t sz
     * }
     */
    public static short sz(MemorySegment struct) {
        return struct.get(sz$LAYOUT, sz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t sz
     * }
     */
    public static void sz(MemorySegment struct, short fieldValue) {
        struct.set(sz$LAYOUT, sz$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

