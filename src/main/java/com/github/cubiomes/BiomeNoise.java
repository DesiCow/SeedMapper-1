// Generated by jextract

package com.github.cubiomes;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SequenceLayout;
import java.lang.invoke.MethodHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet lang=c :
 * struct BiomeNoise {
 *     DoublePerlinNoise climate[6];
 *     PerlinNoise oct[46];
 *     Spline *sp;
 *     SplineStack ss;
 *     int nptype;
 *     int mc;
 * }
 * }
 */
public class BiomeNoise {

    BiomeNoise() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(6, DoublePerlinNoise.layout()).withName("climate"),
        MemoryLayout.sequenceLayout(46, PerlinNoise.layout()).withName("oct"),
        Cubiomes.C_POINTER.withName("sp"),
        SplineStack.layout().withName("ss"),
        Cubiomes.C_INT.withName("nptype"),
        Cubiomes.C_INT.withName("mc")
    ).withName("BiomeNoise");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout climate$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("climate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DoublePerlinNoise climate[6]
     * }
     */
    public static final SequenceLayout climate$layout() {
        return climate$LAYOUT;
    }

    private static final long climate$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DoublePerlinNoise climate[6]
     * }
     */
    public static final long climate$offset() {
        return climate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DoublePerlinNoise climate[6]
     * }
     */
    public static MemorySegment climate(MemorySegment struct) {
        return struct.asSlice(climate$OFFSET, climate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DoublePerlinNoise climate[6]
     * }
     */
    public static void climate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, climate$OFFSET, climate$LAYOUT.byteSize());
    }

    private static long[] climate$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DoublePerlinNoise climate[6]
     * }
     */
    public static long[] climate$dimensions() {
        return climate$DIMS;
    }
    private static final MethodHandle climate$ELEM_HANDLE = climate$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DoublePerlinNoise climate[6]
     * }
     */
    public static MemorySegment climate(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)climate$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DoublePerlinNoise climate[6]
     * }
     */
    public static void climate(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, climate(struct, index0), 0L, DoublePerlinNoise.layout().byteSize());
    }

    private static final SequenceLayout oct$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("oct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PerlinNoise oct[46]
     * }
     */
    public static final SequenceLayout oct$layout() {
        return oct$LAYOUT;
    }

    private static final long oct$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PerlinNoise oct[46]
     * }
     */
    public static final long oct$offset() {
        return oct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PerlinNoise oct[46]
     * }
     */
    public static MemorySegment oct(MemorySegment struct) {
        return struct.asSlice(oct$OFFSET, oct$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PerlinNoise oct[46]
     * }
     */
    public static void oct(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, oct$OFFSET, oct$LAYOUT.byteSize());
    }

    private static long[] oct$DIMS = { 46 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * PerlinNoise oct[46]
     * }
     */
    public static long[] oct$dimensions() {
        return oct$DIMS;
    }
    private static final MethodHandle oct$ELEM_HANDLE = oct$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * PerlinNoise oct[46]
     * }
     */
    public static MemorySegment oct(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)oct$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * PerlinNoise oct[46]
     * }
     */
    public static void oct(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, oct(struct, index0), 0L, PerlinNoise.layout().byteSize());
    }

    private static final AddressLayout sp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Spline *sp
     * }
     */
    public static final AddressLayout sp$layout() {
        return sp$LAYOUT;
    }

    private static final long sp$OFFSET = 14960;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Spline *sp
     * }
     */
    public static final long sp$offset() {
        return sp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Spline *sp
     * }
     */
    public static MemorySegment sp(MemorySegment struct) {
        return struct.get(sp$LAYOUT, sp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Spline *sp
     * }
     */
    public static void sp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sp$LAYOUT, sp$OFFSET, fieldValue);
    }

    private static final GroupLayout ss$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ss"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SplineStack ss
     * }
     */
    public static final GroupLayout ss$layout() {
        return ss$LAYOUT;
    }

    private static final long ss$OFFSET = 14968;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SplineStack ss
     * }
     */
    public static final long ss$offset() {
        return ss$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SplineStack ss
     * }
     */
    public static MemorySegment ss(MemorySegment struct) {
        return struct.asSlice(ss$OFFSET, ss$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SplineStack ss
     * }
     */
    public static void ss(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ss$OFFSET, ss$LAYOUT.byteSize());
    }

    private static final OfInt nptype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nptype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int nptype
     * }
     */
    public static final OfInt nptype$layout() {
        return nptype$LAYOUT;
    }

    private static final long nptype$OFFSET = 24584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int nptype
     * }
     */
    public static final long nptype$offset() {
        return nptype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int nptype
     * }
     */
    public static int nptype(MemorySegment struct) {
        return struct.get(nptype$LAYOUT, nptype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int nptype
     * }
     */
    public static void nptype(MemorySegment struct, int fieldValue) {
        struct.set(nptype$LAYOUT, nptype$OFFSET, fieldValue);
    }

    private static final OfInt mc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int mc
     * }
     */
    public static final OfInt mc$layout() {
        return mc$LAYOUT;
    }

    private static final long mc$OFFSET = 24588;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int mc
     * }
     */
    public static final long mc$offset() {
        return mc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int mc
     * }
     */
    public static int mc(MemorySegment struct) {
        return struct.get(mc$LAYOUT, mc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int mc
     * }
     */
    public static void mc(MemorySegment struct, int fieldValue) {
        struct.set(mc$LAYOUT, mc$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

