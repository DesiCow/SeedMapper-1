// Generated by jextract

package com.github.cubiomes;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet lang=c :
 * struct Piece {
 *     const char *name;
 *     Pos3 pos;
 *     Pos3 bb0;
 *     Pos3 bb1;
 *     uint8_t rot;
 *     int8_t depth;
 *     int8_t type;
 *     Piece *next;
 * }
 * }
 */
public class Piece {

    Piece() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        CubiomesHeaders.C_POINTER.withName("name"),
        Pos3.layout().withName("pos"),
        Pos3.layout().withName("bb0"),
        Pos3.layout().withName("bb1"),
        CubiomesHeaders.C_CHAR.withName("rot"),
        CubiomesHeaders.C_CHAR.withName("depth"),
        CubiomesHeaders.C_CHAR.withName("type"),
        MemoryLayout.paddingLayout(1),
        CubiomesHeaders.C_POINTER.withName("next")
    ).withName("Piece");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final GroupLayout pos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Pos3 pos
     * }
     */
    public static final GroupLayout pos$layout() {
        return pos$LAYOUT;
    }

    private static final long pos$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Pos3 pos
     * }
     */
    public static final long pos$offset() {
        return pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Pos3 pos
     * }
     */
    public static MemorySegment pos(MemorySegment struct) {
        return struct.asSlice(pos$OFFSET, pos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Pos3 pos
     * }
     */
    public static void pos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pos$OFFSET, pos$LAYOUT.byteSize());
    }

    private static final GroupLayout bb0$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bb0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Pos3 bb0
     * }
     */
    public static final GroupLayout bb0$layout() {
        return bb0$LAYOUT;
    }

    private static final long bb0$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Pos3 bb0
     * }
     */
    public static final long bb0$offset() {
        return bb0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Pos3 bb0
     * }
     */
    public static MemorySegment bb0(MemorySegment struct) {
        return struct.asSlice(bb0$OFFSET, bb0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Pos3 bb0
     * }
     */
    public static void bb0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bb0$OFFSET, bb0$LAYOUT.byteSize());
    }

    private static final GroupLayout bb1$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bb1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Pos3 bb1
     * }
     */
    public static final GroupLayout bb1$layout() {
        return bb1$LAYOUT;
    }

    private static final long bb1$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Pos3 bb1
     * }
     */
    public static final long bb1$offset() {
        return bb1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Pos3 bb1
     * }
     */
    public static MemorySegment bb1(MemorySegment struct) {
        return struct.asSlice(bb1$OFFSET, bb1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Pos3 bb1
     * }
     */
    public static void bb1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bb1$OFFSET, bb1$LAYOUT.byteSize());
    }

    private static final OfByte rot$LAYOUT = (OfByte)$LAYOUT.select(groupElement("rot"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t rot
     * }
     */
    public static final OfByte rot$layout() {
        return rot$LAYOUT;
    }

    private static final long rot$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t rot
     * }
     */
    public static final long rot$offset() {
        return rot$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t rot
     * }
     */
    public static byte rot(MemorySegment struct) {
        return struct.get(rot$LAYOUT, rot$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t rot
     * }
     */
    public static void rot(MemorySegment struct, byte fieldValue) {
        struct.set(rot$LAYOUT, rot$OFFSET, fieldValue);
    }

    private static final OfByte depth$LAYOUT = (OfByte)$LAYOUT.select(groupElement("depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t depth
     * }
     */
    public static final OfByte depth$layout() {
        return depth$LAYOUT;
    }

    private static final long depth$OFFSET = 45;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t depth
     * }
     */
    public static final long depth$offset() {
        return depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t depth
     * }
     */
    public static byte depth(MemorySegment struct) {
        return struct.get(depth$LAYOUT, depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t depth
     * }
     */
    public static void depth(MemorySegment struct, byte fieldValue) {
        struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
    }

    private static final OfByte type$LAYOUT = (OfByte)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t type
     * }
     */
    public static final OfByte type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 46;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t type
     * }
     */
    public static byte type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t type
     * }
     */
    public static void type(MemorySegment struct, byte fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Piece *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Piece *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Piece *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Piece *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

