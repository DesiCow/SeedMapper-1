// Generated by jextract

package com.github.cubiomes;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SequenceLayout;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet lang=c :
 * struct SeaLevelColumnNoiseBeta {
 *     double contASample;
 *     double contBSample;
 *     double minSample[2];
 *     double maxSample[2];
 *     double mainSample[2];
 * }
 * }
 */
public class SeaLevelColumnNoiseBeta {

    SeaLevelColumnNoiseBeta() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Cubiomes.C_DOUBLE.withName("contASample"),
        Cubiomes.C_DOUBLE.withName("contBSample"),
        MemoryLayout.sequenceLayout(2, Cubiomes.C_DOUBLE).withName("minSample"),
        MemoryLayout.sequenceLayout(2, Cubiomes.C_DOUBLE).withName("maxSample"),
        MemoryLayout.sequenceLayout(2, Cubiomes.C_DOUBLE).withName("mainSample")
    ).withName("SeaLevelColumnNoiseBeta");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfDouble contASample$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("contASample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double contASample
     * }
     */
    public static final OfDouble contASample$layout() {
        return contASample$LAYOUT;
    }

    private static final long contASample$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double contASample
     * }
     */
    public static final long contASample$offset() {
        return contASample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double contASample
     * }
     */
    public static double contASample(MemorySegment struct) {
        return struct.get(contASample$LAYOUT, contASample$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double contASample
     * }
     */
    public static void contASample(MemorySegment struct, double fieldValue) {
        struct.set(contASample$LAYOUT, contASample$OFFSET, fieldValue);
    }

    private static final OfDouble contBSample$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("contBSample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double contBSample
     * }
     */
    public static final OfDouble contBSample$layout() {
        return contBSample$LAYOUT;
    }

    private static final long contBSample$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double contBSample
     * }
     */
    public static final long contBSample$offset() {
        return contBSample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double contBSample
     * }
     */
    public static double contBSample(MemorySegment struct) {
        return struct.get(contBSample$LAYOUT, contBSample$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double contBSample
     * }
     */
    public static void contBSample(MemorySegment struct, double fieldValue) {
        struct.set(contBSample$LAYOUT, contBSample$OFFSET, fieldValue);
    }

    private static final SequenceLayout minSample$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("minSample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double minSample[2]
     * }
     */
    public static final SequenceLayout minSample$layout() {
        return minSample$LAYOUT;
    }

    private static final long minSample$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double minSample[2]
     * }
     */
    public static final long minSample$offset() {
        return minSample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double minSample[2]
     * }
     */
    public static MemorySegment minSample(MemorySegment struct) {
        return struct.asSlice(minSample$OFFSET, minSample$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double minSample[2]
     * }
     */
    public static void minSample(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, minSample$OFFSET, minSample$LAYOUT.byteSize());
    }

    private static long[] minSample$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double minSample[2]
     * }
     */
    public static long[] minSample$dimensions() {
        return minSample$DIMS;
    }
    private static final VarHandle minSample$ELEM_HANDLE = minSample$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double minSample[2]
     * }
     */
    public static double minSample(MemorySegment struct, long index0) {
        return (double)minSample$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double minSample[2]
     * }
     */
    public static void minSample(MemorySegment struct, long index0, double fieldValue) {
        minSample$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxSample$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxSample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double maxSample[2]
     * }
     */
    public static final SequenceLayout maxSample$layout() {
        return maxSample$LAYOUT;
    }

    private static final long maxSample$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double maxSample[2]
     * }
     */
    public static final long maxSample$offset() {
        return maxSample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double maxSample[2]
     * }
     */
    public static MemorySegment maxSample(MemorySegment struct) {
        return struct.asSlice(maxSample$OFFSET, maxSample$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double maxSample[2]
     * }
     */
    public static void maxSample(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxSample$OFFSET, maxSample$LAYOUT.byteSize());
    }

    private static long[] maxSample$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double maxSample[2]
     * }
     */
    public static long[] maxSample$dimensions() {
        return maxSample$DIMS;
    }
    private static final VarHandle maxSample$ELEM_HANDLE = maxSample$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double maxSample[2]
     * }
     */
    public static double maxSample(MemorySegment struct, long index0) {
        return (double)maxSample$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double maxSample[2]
     * }
     */
    public static void maxSample(MemorySegment struct, long index0, double fieldValue) {
        maxSample$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout mainSample$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("mainSample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double mainSample[2]
     * }
     */
    public static final SequenceLayout mainSample$layout() {
        return mainSample$LAYOUT;
    }

    private static final long mainSample$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double mainSample[2]
     * }
     */
    public static final long mainSample$offset() {
        return mainSample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double mainSample[2]
     * }
     */
    public static MemorySegment mainSample(MemorySegment struct) {
        return struct.asSlice(mainSample$OFFSET, mainSample$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double mainSample[2]
     * }
     */
    public static void mainSample(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mainSample$OFFSET, mainSample$LAYOUT.byteSize());
    }

    private static long[] mainSample$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double mainSample[2]
     * }
     */
    public static long[] mainSample$dimensions() {
        return mainSample$DIMS;
    }
    private static final VarHandle mainSample$ELEM_HANDLE = mainSample$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double mainSample[2]
     * }
     */
    public static double mainSample(MemorySegment struct, long index0) {
        return (double)mainSample$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double mainSample[2]
     * }
     */
    public static void mainSample(MemorySegment struct, long index0, double fieldValue) {
        mainSample$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

