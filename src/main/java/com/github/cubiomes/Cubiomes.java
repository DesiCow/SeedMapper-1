// Generated by jextract

package com.github.cubiomes;

import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SequenceLayout;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

public class Cubiomes extends Cubiomes_1 {

    Cubiomes() {
        // Should not be called directly
    }

    private static class voronoiAccess3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("voronoiAccess3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void voronoiAccess3D(uint64_t sha, int x, int y, int z, int *x4, int *y4, int *z4)
     * }
     */
    public static FunctionDescriptor voronoiAccess3D$descriptor() {
        return voronoiAccess3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void voronoiAccess3D(uint64_t sha, int x, int y, int z, int *x4, int *y4, int *z4)
     * }
     */
    public static MethodHandle voronoiAccess3D$handle() {
        return voronoiAccess3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void voronoiAccess3D(uint64_t sha, int x, int y, int z, int *x4, int *y4, int *z4)
     * }
     */
    public static MemorySegment voronoiAccess3D$address() {
        return voronoiAccess3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void voronoiAccess3D(uint64_t sha, int x, int y, int z, int *x4, int *y4, int *z4)
     * }
     */
    public static void voronoiAccess3D(long sha, int x, int y, int z, MemorySegment x4, MemorySegment y4, MemorySegment z4) {
        var mh$ = voronoiAccess3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("voronoiAccess3D", sha, x, y, z, x4, y4, z4);
            }
            mh$.invokeExact(sha, x, y, z, x4, y4, z4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mapVoronoiPlane {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("mapVoronoiPlane");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void mapVoronoiPlane(uint64_t sha, int *out, int *src, int x, int z, int w, int h, int y, int px, int pz, int pw, int ph)
     * }
     */
    public static FunctionDescriptor mapVoronoiPlane$descriptor() {
        return mapVoronoiPlane.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void mapVoronoiPlane(uint64_t sha, int *out, int *src, int x, int z, int w, int h, int y, int px, int pz, int pw, int ph)
     * }
     */
    public static MethodHandle mapVoronoiPlane$handle() {
        return mapVoronoiPlane.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void mapVoronoiPlane(uint64_t sha, int *out, int *src, int x, int z, int w, int h, int y, int px, int pz, int pw, int ph)
     * }
     */
    public static MemorySegment mapVoronoiPlane$address() {
        return mapVoronoiPlane.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void mapVoronoiPlane(uint64_t sha, int *out, int *src, int x, int z, int w, int h, int y, int px, int pz, int pw, int ph)
     * }
     */
    public static void mapVoronoiPlane(long sha, MemorySegment out, MemorySegment src, int x, int z, int w, int h, int y, int px, int pz, int pw, int ph) {
        var mh$ = mapVoronoiPlane.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mapVoronoiPlane", sha, out, src, x, z, w, h, y, px, pz, pw, ph);
            }
            mh$.invokeExact(sha, out, src, x, z, w, h, y, px, pz, pw, ph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int NP_TEMPERATURE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.NP_TEMPERATURE = 0
     * }
     */
    public static int NP_TEMPERATURE() {
        return NP_TEMPERATURE;
    }
    private static final int NP_HUMIDITY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.NP_HUMIDITY = 1
     * }
     */
    public static int NP_HUMIDITY() {
        return NP_HUMIDITY;
    }
    private static final int NP_CONTINENTALNESS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.NP_CONTINENTALNESS = 2
     * }
     */
    public static int NP_CONTINENTALNESS() {
        return NP_CONTINENTALNESS;
    }
    private static final int NP_EROSION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.NP_EROSION = 3
     * }
     */
    public static int NP_EROSION() {
        return NP_EROSION;
    }
    private static final int NP_SHIFT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.NP_SHIFT = 4
     * }
     */
    public static int NP_SHIFT() {
        return NP_SHIFT;
    }
    private static final int NP_DEPTH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.NP_DEPTH = 4
     * }
     */
    public static int NP_DEPTH() {
        return NP_DEPTH;
    }
    private static final int NP_WEIRDNESS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.NP_WEIRDNESS = 5
     * }
     */
    public static int NP_WEIRDNESS() {
        return NP_WEIRDNESS;
    }
    private static final int NP_MAX = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.NP_MAX = 6
     * }
     */
    public static int NP_MAX() {
        return NP_MAX;
    }

    private static class g_btree$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(6, BiomeTree.layout());
        public static final MemorySegment SEGMENT = Cubiomes.findOrThrow("g_btree").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 6 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern BiomeTree g_btree[6]
     * }
     */
    public static SequenceLayout g_btree$layout() {
        return g_btree$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern BiomeTree g_btree[6]
     * }
     */
    public static long[] g_btree$dimensions() {
        return g_btree$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern BiomeTree g_btree[6]
     * }
     */
    public static MemorySegment g_btree() {
        return g_btree$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern BiomeTree g_btree[6]
     * }
     */
    public static void g_btree(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_btree$constants.SEGMENT, 0L, g_btree$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern BiomeTree g_btree[6]
     * }
     */
    public static MemorySegment g_btree(long index0) {
        try {
            return (MemorySegment)g_btree$constants.HANDLE.invokeExact(g_btree$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern BiomeTree g_btree[6]
     * }
     */
    public static void g_btree(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_btree(index0), 0L, BiomeTree.layout().byteSize());
    }

    private static class initSurfaceNoise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("initSurfaceNoise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void initSurfaceNoise(SurfaceNoise *sn, int dim, uint64_t seed)
     * }
     */
    public static FunctionDescriptor initSurfaceNoise$descriptor() {
        return initSurfaceNoise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void initSurfaceNoise(SurfaceNoise *sn, int dim, uint64_t seed)
     * }
     */
    public static MethodHandle initSurfaceNoise$handle() {
        return initSurfaceNoise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void initSurfaceNoise(SurfaceNoise *sn, int dim, uint64_t seed)
     * }
     */
    public static MemorySegment initSurfaceNoise$address() {
        return initSurfaceNoise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void initSurfaceNoise(SurfaceNoise *sn, int dim, uint64_t seed)
     * }
     */
    public static void initSurfaceNoise(MemorySegment sn, int dim, long seed) {
        var mh$ = initSurfaceNoise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("initSurfaceNoise", sn, dim, seed);
            }
            mh$.invokeExact(sn, dim, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class initSurfaceNoiseBeta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("initSurfaceNoiseBeta");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void initSurfaceNoiseBeta(SurfaceNoiseBeta *snb, uint64_t seed)
     * }
     */
    public static FunctionDescriptor initSurfaceNoiseBeta$descriptor() {
        return initSurfaceNoiseBeta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void initSurfaceNoiseBeta(SurfaceNoiseBeta *snb, uint64_t seed)
     * }
     */
    public static MethodHandle initSurfaceNoiseBeta$handle() {
        return initSurfaceNoiseBeta.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void initSurfaceNoiseBeta(SurfaceNoiseBeta *snb, uint64_t seed)
     * }
     */
    public static MemorySegment initSurfaceNoiseBeta$address() {
        return initSurfaceNoiseBeta.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void initSurfaceNoiseBeta(SurfaceNoiseBeta *snb, uint64_t seed)
     * }
     */
    public static void initSurfaceNoiseBeta(MemorySegment snb, long seed) {
        var mh$ = initSurfaceNoiseBeta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("initSurfaceNoiseBeta", snb, seed);
            }
            mh$.invokeExact(snb, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sampleSurfaceNoise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_DOUBLE,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("sampleSurfaceNoise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double sampleSurfaceNoise(const SurfaceNoise *sn, int x, int y, int z)
     * }
     */
    public static FunctionDescriptor sampleSurfaceNoise$descriptor() {
        return sampleSurfaceNoise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double sampleSurfaceNoise(const SurfaceNoise *sn, int x, int y, int z)
     * }
     */
    public static MethodHandle sampleSurfaceNoise$handle() {
        return sampleSurfaceNoise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double sampleSurfaceNoise(const SurfaceNoise *sn, int x, int y, int z)
     * }
     */
    public static MemorySegment sampleSurfaceNoise$address() {
        return sampleSurfaceNoise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double sampleSurfaceNoise(const SurfaceNoise *sn, int x, int y, int z)
     * }
     */
    public static double sampleSurfaceNoise(MemorySegment sn, int x, int y, int z) {
        var mh$ = sampleSurfaceNoise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sampleSurfaceNoise", sn, x, y, z);
            }
            return (double)mh$.invokeExact(sn, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sampleSurfaceNoiseBetween {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_DOUBLE,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_DOUBLE,
            Cubiomes.C_DOUBLE
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("sampleSurfaceNoiseBetween");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double sampleSurfaceNoiseBetween(const SurfaceNoise *sn, int x, int y, int z, double noiseMin, double noiseMax)
     * }
     */
    public static FunctionDescriptor sampleSurfaceNoiseBetween$descriptor() {
        return sampleSurfaceNoiseBetween.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double sampleSurfaceNoiseBetween(const SurfaceNoise *sn, int x, int y, int z, double noiseMin, double noiseMax)
     * }
     */
    public static MethodHandle sampleSurfaceNoiseBetween$handle() {
        return sampleSurfaceNoiseBetween.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double sampleSurfaceNoiseBetween(const SurfaceNoise *sn, int x, int y, int z, double noiseMin, double noiseMax)
     * }
     */
    public static MemorySegment sampleSurfaceNoiseBetween$address() {
        return sampleSurfaceNoiseBetween.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double sampleSurfaceNoiseBetween(const SurfaceNoise *sn, int x, int y, int z, double noiseMin, double noiseMax)
     * }
     */
    public static double sampleSurfaceNoiseBetween(MemorySegment sn, int x, int y, int z, double noiseMin, double noiseMax) {
        var mh$ = sampleSurfaceNoiseBetween.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sampleSurfaceNoiseBetween", sn, x, y, z, noiseMin, noiseMax);
            }
            return (double)mh$.invokeExact(sn, x, y, z, noiseMin, noiseMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setNetherSeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("setNetherSeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setNetherSeed(NetherNoise *nn, uint64_t seed)
     * }
     */
    public static FunctionDescriptor setNetherSeed$descriptor() {
        return setNetherSeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setNetherSeed(NetherNoise *nn, uint64_t seed)
     * }
     */
    public static MethodHandle setNetherSeed$handle() {
        return setNetherSeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setNetherSeed(NetherNoise *nn, uint64_t seed)
     * }
     */
    public static MemorySegment setNetherSeed$address() {
        return setNetherSeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setNetherSeed(NetherNoise *nn, uint64_t seed)
     * }
     */
    public static void setNetherSeed(MemorySegment nn, long seed) {
        var mh$ = setNetherSeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setNetherSeed", nn, seed);
            }
            mh$.invokeExact(nn, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getNetherBiome {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getNetherBiome");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getNetherBiome(const NetherNoise *nn, int x, int y, int z, float *ndel)
     * }
     */
    public static FunctionDescriptor getNetherBiome$descriptor() {
        return getNetherBiome.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getNetherBiome(const NetherNoise *nn, int x, int y, int z, float *ndel)
     * }
     */
    public static MethodHandle getNetherBiome$handle() {
        return getNetherBiome.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getNetherBiome(const NetherNoise *nn, int x, int y, int z, float *ndel)
     * }
     */
    public static MemorySegment getNetherBiome$address() {
        return getNetherBiome.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getNetherBiome(const NetherNoise *nn, int x, int y, int z, float *ndel)
     * }
     */
    public static int getNetherBiome(MemorySegment nn, int x, int y, int z, MemorySegment ndel) {
        var mh$ = getNetherBiome.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getNetherBiome", nn, x, y, z, ndel);
            }
            return (int)mh$.invokeExact(nn, x, y, z, ndel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mapNether2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("mapNether2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mapNether2D(const NetherNoise *nn, int *out, int x, int z, int w, int h)
     * }
     */
    public static FunctionDescriptor mapNether2D$descriptor() {
        return mapNether2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mapNether2D(const NetherNoise *nn, int *out, int x, int z, int w, int h)
     * }
     */
    public static MethodHandle mapNether2D$handle() {
        return mapNether2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mapNether2D(const NetherNoise *nn, int *out, int x, int z, int w, int h)
     * }
     */
    public static MemorySegment mapNether2D$address() {
        return mapNether2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mapNether2D(const NetherNoise *nn, int *out, int x, int z, int w, int h)
     * }
     */
    public static int mapNether2D(MemorySegment nn, MemorySegment out, int x, int z, int w, int h) {
        var mh$ = mapNether2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mapNether2D", nn, out, x, z, w, h);
            }
            return (int)mh$.invokeExact(nn, out, x, z, w, h);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mapNether3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Range.layout(),
            Cubiomes.C_FLOAT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("mapNether3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mapNether3D(const NetherNoise *nn, int *out, Range r, float confidence)
     * }
     */
    public static FunctionDescriptor mapNether3D$descriptor() {
        return mapNether3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mapNether3D(const NetherNoise *nn, int *out, Range r, float confidence)
     * }
     */
    public static MethodHandle mapNether3D$handle() {
        return mapNether3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mapNether3D(const NetherNoise *nn, int *out, Range r, float confidence)
     * }
     */
    public static MemorySegment mapNether3D$address() {
        return mapNether3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mapNether3D(const NetherNoise *nn, int *out, Range r, float confidence)
     * }
     */
    public static int mapNether3D(MemorySegment nn, MemorySegment out, MemorySegment r, float confidence) {
        var mh$ = mapNether3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mapNether3D", nn, out, r, confidence);
            }
            return (int)mh$.invokeExact(nn, out, r, confidence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class genNetherScaled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Range.layout(),
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("genNetherScaled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int genNetherScaled(const NetherNoise *nn, int *out, Range r, int mc, uint64_t sha)
     * }
     */
    public static FunctionDescriptor genNetherScaled$descriptor() {
        return genNetherScaled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int genNetherScaled(const NetherNoise *nn, int *out, Range r, int mc, uint64_t sha)
     * }
     */
    public static MethodHandle genNetherScaled$handle() {
        return genNetherScaled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int genNetherScaled(const NetherNoise *nn, int *out, Range r, int mc, uint64_t sha)
     * }
     */
    public static MemorySegment genNetherScaled$address() {
        return genNetherScaled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int genNetherScaled(const NetherNoise *nn, int *out, Range r, int mc, uint64_t sha)
     * }
     */
    public static int genNetherScaled(MemorySegment nn, MemorySegment out, MemorySegment r, int mc, long sha) {
        var mh$ = genNetherScaled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("genNetherScaled", nn, out, r, mc, sha);
            }
            return (int)mh$.invokeExact(nn, out, r, mc, sha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setEndSeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("setEndSeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setEndSeed(EndNoise *en, int mc, uint64_t seed)
     * }
     */
    public static FunctionDescriptor setEndSeed$descriptor() {
        return setEndSeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setEndSeed(EndNoise *en, int mc, uint64_t seed)
     * }
     */
    public static MethodHandle setEndSeed$handle() {
        return setEndSeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setEndSeed(EndNoise *en, int mc, uint64_t seed)
     * }
     */
    public static MemorySegment setEndSeed$address() {
        return setEndSeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setEndSeed(EndNoise *en, int mc, uint64_t seed)
     * }
     */
    public static void setEndSeed(MemorySegment en, int mc, long seed) {
        var mh$ = setEndSeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setEndSeed", en, mc, seed);
            }
            mh$.invokeExact(en, mc, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mapEndBiome {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("mapEndBiome");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mapEndBiome(const EndNoise *en, int *out, int x, int z, int w, int h)
     * }
     */
    public static FunctionDescriptor mapEndBiome$descriptor() {
        return mapEndBiome.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mapEndBiome(const EndNoise *en, int *out, int x, int z, int w, int h)
     * }
     */
    public static MethodHandle mapEndBiome$handle() {
        return mapEndBiome.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mapEndBiome(const EndNoise *en, int *out, int x, int z, int w, int h)
     * }
     */
    public static MemorySegment mapEndBiome$address() {
        return mapEndBiome.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mapEndBiome(const EndNoise *en, int *out, int x, int z, int w, int h)
     * }
     */
    public static int mapEndBiome(MemorySegment en, MemorySegment out, int x, int z, int w, int h) {
        var mh$ = mapEndBiome.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mapEndBiome", en, out, x, z, w, h);
            }
            return (int)mh$.invokeExact(en, out, x, z, w, h);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mapEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("mapEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mapEnd(const EndNoise *en, int *out, int x, int z, int w, int h)
     * }
     */
    public static FunctionDescriptor mapEnd$descriptor() {
        return mapEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mapEnd(const EndNoise *en, int *out, int x, int z, int w, int h)
     * }
     */
    public static MethodHandle mapEnd$handle() {
        return mapEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mapEnd(const EndNoise *en, int *out, int x, int z, int w, int h)
     * }
     */
    public static MemorySegment mapEnd$address() {
        return mapEnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mapEnd(const EndNoise *en, int *out, int x, int z, int w, int h)
     * }
     */
    public static int mapEnd(MemorySegment en, MemorySegment out, int x, int z, int w, int h) {
        var mh$ = mapEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mapEnd", en, out, x, z, w, h);
            }
            return (int)mh$.invokeExact(en, out, x, z, w, h);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getEndSurfaceHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getEndSurfaceHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getEndSurfaceHeight(int mc, uint64_t seed, int x, int z)
     * }
     */
    public static FunctionDescriptor getEndSurfaceHeight$descriptor() {
        return getEndSurfaceHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getEndSurfaceHeight(int mc, uint64_t seed, int x, int z)
     * }
     */
    public static MethodHandle getEndSurfaceHeight$handle() {
        return getEndSurfaceHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getEndSurfaceHeight(int mc, uint64_t seed, int x, int z)
     * }
     */
    public static MemorySegment getEndSurfaceHeight$address() {
        return getEndSurfaceHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getEndSurfaceHeight(int mc, uint64_t seed, int x, int z)
     * }
     */
    public static int getEndSurfaceHeight(int mc, long seed, int x, int z) {
        var mh$ = getEndSurfaceHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getEndSurfaceHeight", mc, seed, x, z);
            }
            return (int)mh$.invokeExact(mc, seed, x, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mapEndSurfaceHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("mapEndSurfaceHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mapEndSurfaceHeight(float *y, const EndNoise *en, const SurfaceNoise *sn, int x, int z, int w, int h, int scale, int ymin)
     * }
     */
    public static FunctionDescriptor mapEndSurfaceHeight$descriptor() {
        return mapEndSurfaceHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mapEndSurfaceHeight(float *y, const EndNoise *en, const SurfaceNoise *sn, int x, int z, int w, int h, int scale, int ymin)
     * }
     */
    public static MethodHandle mapEndSurfaceHeight$handle() {
        return mapEndSurfaceHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mapEndSurfaceHeight(float *y, const EndNoise *en, const SurfaceNoise *sn, int x, int z, int w, int h, int scale, int ymin)
     * }
     */
    public static MemorySegment mapEndSurfaceHeight$address() {
        return mapEndSurfaceHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mapEndSurfaceHeight(float *y, const EndNoise *en, const SurfaceNoise *sn, int x, int z, int w, int h, int scale, int ymin)
     * }
     */
    public static int mapEndSurfaceHeight(MemorySegment y, MemorySegment en, MemorySegment sn, int x, int z, int w, int h, int scale, int ymin) {
        var mh$ = mapEndSurfaceHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mapEndSurfaceHeight", y, en, sn, x, z, w, h, scale, ymin);
            }
            return (int)mh$.invokeExact(y, en, sn, x, z, w, h, scale, ymin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class genEndScaled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Range.layout(),
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("genEndScaled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int genEndScaled(const EndNoise *en, int *out, Range r, int mc, uint64_t sha)
     * }
     */
    public static FunctionDescriptor genEndScaled$descriptor() {
        return genEndScaled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int genEndScaled(const EndNoise *en, int *out, Range r, int mc, uint64_t sha)
     * }
     */
    public static MethodHandle genEndScaled$handle() {
        return genEndScaled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int genEndScaled(const EndNoise *en, int *out, Range r, int mc, uint64_t sha)
     * }
     */
    public static MemorySegment genEndScaled$address() {
        return genEndScaled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int genEndScaled(const EndNoise *en, int *out, Range r, int mc, uint64_t sha)
     * }
     */
    public static int genEndScaled(MemorySegment en, MemorySegment out, MemorySegment r, int mc, long sha) {
        var mh$ = genEndScaled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("genEndScaled", en, out, r, mc, sha);
            }
            return (int)mh$.invokeExact(en, out, r, mc, sha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SAMPLE_NO_SHIFT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SAMPLE_NO_SHIFT = 1
     * }
     */
    public static int SAMPLE_NO_SHIFT() {
        return SAMPLE_NO_SHIFT;
    }
    private static final int SAMPLE_NO_DEPTH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SAMPLE_NO_DEPTH = 2
     * }
     */
    public static int SAMPLE_NO_DEPTH() {
        return SAMPLE_NO_DEPTH;
    }
    private static final int SAMPLE_NO_BIOME = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SAMPLE_NO_BIOME = 4
     * }
     */
    public static int SAMPLE_NO_BIOME() {
        return SAMPLE_NO_BIOME;
    }

    private static class initBiomeNoise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("initBiomeNoise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void initBiomeNoise(BiomeNoise *bn, int mc)
     * }
     */
    public static FunctionDescriptor initBiomeNoise$descriptor() {
        return initBiomeNoise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void initBiomeNoise(BiomeNoise *bn, int mc)
     * }
     */
    public static MethodHandle initBiomeNoise$handle() {
        return initBiomeNoise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void initBiomeNoise(BiomeNoise *bn, int mc)
     * }
     */
    public static MemorySegment initBiomeNoise$address() {
        return initBiomeNoise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void initBiomeNoise(BiomeNoise *bn, int mc)
     * }
     */
    public static void initBiomeNoise(MemorySegment bn, int mc) {
        var mh$ = initBiomeNoise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("initBiomeNoise", bn, mc);
            }
            mh$.invokeExact(bn, mc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setBiomeSeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("setBiomeSeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setBiomeSeed(BiomeNoise *bn, uint64_t seed, int large)
     * }
     */
    public static FunctionDescriptor setBiomeSeed$descriptor() {
        return setBiomeSeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setBiomeSeed(BiomeNoise *bn, uint64_t seed, int large)
     * }
     */
    public static MethodHandle setBiomeSeed$handle() {
        return setBiomeSeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setBiomeSeed(BiomeNoise *bn, uint64_t seed, int large)
     * }
     */
    public static MemorySegment setBiomeSeed$address() {
        return setBiomeSeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setBiomeSeed(BiomeNoise *bn, uint64_t seed, int large)
     * }
     */
    public static void setBiomeSeed(MemorySegment bn, long seed, int large) {
        var mh$ = setBiomeSeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setBiomeSeed", bn, seed, large);
            }
            mh$.invokeExact(bn, seed, large);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setBetaBiomeSeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("setBetaBiomeSeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setBetaBiomeSeed(BiomeNoiseBeta *bnb, uint64_t seed)
     * }
     */
    public static FunctionDescriptor setBetaBiomeSeed$descriptor() {
        return setBetaBiomeSeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setBetaBiomeSeed(BiomeNoiseBeta *bnb, uint64_t seed)
     * }
     */
    public static MethodHandle setBetaBiomeSeed$handle() {
        return setBetaBiomeSeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setBetaBiomeSeed(BiomeNoiseBeta *bnb, uint64_t seed)
     * }
     */
    public static MemorySegment setBetaBiomeSeed$address() {
        return setBetaBiomeSeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setBetaBiomeSeed(BiomeNoiseBeta *bnb, uint64_t seed)
     * }
     */
    public static void setBetaBiomeSeed(MemorySegment bnb, long seed) {
        var mh$ = setBetaBiomeSeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setBetaBiomeSeed", bnb, seed);
            }
            mh$.invokeExact(bnb, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sampleBiomeNoise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("sampleBiomeNoise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sampleBiomeNoise(const BiomeNoise *bn, int64_t *np, int x, int y, int z, uint64_t *dat, uint32_t sample_flags)
     * }
     */
    public static FunctionDescriptor sampleBiomeNoise$descriptor() {
        return sampleBiomeNoise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sampleBiomeNoise(const BiomeNoise *bn, int64_t *np, int x, int y, int z, uint64_t *dat, uint32_t sample_flags)
     * }
     */
    public static MethodHandle sampleBiomeNoise$handle() {
        return sampleBiomeNoise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sampleBiomeNoise(const BiomeNoise *bn, int64_t *np, int x, int y, int z, uint64_t *dat, uint32_t sample_flags)
     * }
     */
    public static MemorySegment sampleBiomeNoise$address() {
        return sampleBiomeNoise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sampleBiomeNoise(const BiomeNoise *bn, int64_t *np, int x, int y, int z, uint64_t *dat, uint32_t sample_flags)
     * }
     */
    public static int sampleBiomeNoise(MemorySegment bn, MemorySegment np, int x, int y, int z, MemorySegment dat, int sample_flags) {
        var mh$ = sampleBiomeNoise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sampleBiomeNoise", bn, np, x, y, z, dat, sample_flags);
            }
            return (int)mh$.invokeExact(bn, np, x, y, z, dat, sample_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sampleBiomeNoiseBeta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("sampleBiomeNoiseBeta");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sampleBiomeNoiseBeta(const BiomeNoiseBeta *bnb, int64_t *np, double *nv, int x, int z)
     * }
     */
    public static FunctionDescriptor sampleBiomeNoiseBeta$descriptor() {
        return sampleBiomeNoiseBeta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sampleBiomeNoiseBeta(const BiomeNoiseBeta *bnb, int64_t *np, double *nv, int x, int z)
     * }
     */
    public static MethodHandle sampleBiomeNoiseBeta$handle() {
        return sampleBiomeNoiseBeta.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sampleBiomeNoiseBeta(const BiomeNoiseBeta *bnb, int64_t *np, double *nv, int x, int z)
     * }
     */
    public static MemorySegment sampleBiomeNoiseBeta$address() {
        return sampleBiomeNoiseBeta.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sampleBiomeNoiseBeta(const BiomeNoiseBeta *bnb, int64_t *np, double *nv, int x, int z)
     * }
     */
    public static int sampleBiomeNoiseBeta(MemorySegment bnb, MemorySegment np, MemorySegment nv, int x, int z) {
        var mh$ = sampleBiomeNoiseBeta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sampleBiomeNoiseBeta", bnb, np, nv, x, z);
            }
            return (int)mh$.invokeExact(bnb, np, nv, x, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class approxSurfaceBeta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_DOUBLE,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("approxSurfaceBeta");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double approxSurfaceBeta(const BiomeNoiseBeta *bnb, const SurfaceNoiseBeta *snb, int x, int z)
     * }
     */
    public static FunctionDescriptor approxSurfaceBeta$descriptor() {
        return approxSurfaceBeta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double approxSurfaceBeta(const BiomeNoiseBeta *bnb, const SurfaceNoiseBeta *snb, int x, int z)
     * }
     */
    public static MethodHandle approxSurfaceBeta$handle() {
        return approxSurfaceBeta.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double approxSurfaceBeta(const BiomeNoiseBeta *bnb, const SurfaceNoiseBeta *snb, int x, int z)
     * }
     */
    public static MemorySegment approxSurfaceBeta$address() {
        return approxSurfaceBeta.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double approxSurfaceBeta(const BiomeNoiseBeta *bnb, const SurfaceNoiseBeta *snb, int x, int z)
     * }
     */
    public static double approxSurfaceBeta(MemorySegment bnb, MemorySegment snb, int x, int z) {
        var mh$ = approxSurfaceBeta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("approxSurfaceBeta", bnb, snb, x, z);
            }
            return (double)mh$.invokeExact(bnb, snb, x, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getOldBetaBiome {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_FLOAT,
            Cubiomes.C_FLOAT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getOldBetaBiome");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getOldBetaBiome(float t, float h)
     * }
     */
    public static FunctionDescriptor getOldBetaBiome$descriptor() {
        return getOldBetaBiome.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getOldBetaBiome(float t, float h)
     * }
     */
    public static MethodHandle getOldBetaBiome$handle() {
        return getOldBetaBiome.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getOldBetaBiome(float t, float h)
     * }
     */
    public static MemorySegment getOldBetaBiome$address() {
        return getOldBetaBiome.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getOldBetaBiome(float t, float h)
     * }
     */
    public static int getOldBetaBiome(float t, float h) {
        var mh$ = getOldBetaBiome.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getOldBetaBiome", t, h);
            }
            return (int)mh$.invokeExact(t, h);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class climateToBiome {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("climateToBiome");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int climateToBiome(int mc, const uint64_t np[6], uint64_t *dat)
     * }
     */
    public static FunctionDescriptor climateToBiome$descriptor() {
        return climateToBiome.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int climateToBiome(int mc, const uint64_t np[6], uint64_t *dat)
     * }
     */
    public static MethodHandle climateToBiome$handle() {
        return climateToBiome.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int climateToBiome(int mc, const uint64_t np[6], uint64_t *dat)
     * }
     */
    public static MemorySegment climateToBiome$address() {
        return climateToBiome.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int climateToBiome(int mc, const uint64_t np[6], uint64_t *dat)
     * }
     */
    public static int climateToBiome(int mc, MemorySegment np, MemorySegment dat) {
        var mh$ = climateToBiome.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("climateToBiome", mc, np, dat);
            }
            return (int)mh$.invokeExact(mc, np, dat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setClimateParaSeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("setClimateParaSeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setClimateParaSeed(BiomeNoise *bn, uint64_t seed, int large, int nptype, int nmax)
     * }
     */
    public static FunctionDescriptor setClimateParaSeed$descriptor() {
        return setClimateParaSeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setClimateParaSeed(BiomeNoise *bn, uint64_t seed, int large, int nptype, int nmax)
     * }
     */
    public static MethodHandle setClimateParaSeed$handle() {
        return setClimateParaSeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setClimateParaSeed(BiomeNoise *bn, uint64_t seed, int large, int nptype, int nmax)
     * }
     */
    public static MemorySegment setClimateParaSeed$address() {
        return setClimateParaSeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setClimateParaSeed(BiomeNoise *bn, uint64_t seed, int large, int nptype, int nmax)
     * }
     */
    public static void setClimateParaSeed(MemorySegment bn, long seed, int large, int nptype, int nmax) {
        var mh$ = setClimateParaSeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setClimateParaSeed", bn, seed, large, nptype, nmax);
            }
            mh$.invokeExact(bn, seed, large, nptype, nmax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sampleClimatePara {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_DOUBLE,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_DOUBLE,
            Cubiomes.C_DOUBLE
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("sampleClimatePara");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double sampleClimatePara(const BiomeNoise *bn, int64_t *np, double x, double z)
     * }
     */
    public static FunctionDescriptor sampleClimatePara$descriptor() {
        return sampleClimatePara.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double sampleClimatePara(const BiomeNoise *bn, int64_t *np, double x, double z)
     * }
     */
    public static MethodHandle sampleClimatePara$handle() {
        return sampleClimatePara.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double sampleClimatePara(const BiomeNoise *bn, int64_t *np, double x, double z)
     * }
     */
    public static MemorySegment sampleClimatePara$address() {
        return sampleClimatePara.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double sampleClimatePara(const BiomeNoise *bn, int64_t *np, double x, double z)
     * }
     */
    public static double sampleClimatePara(MemorySegment bn, MemorySegment np, double x, double z) {
        var mh$ = sampleClimatePara.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sampleClimatePara", bn, np, x, z);
            }
            return (double)mh$.invokeExact(bn, np, x, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class genBiomeNoiseChunkSection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("genBiomeNoiseChunkSection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void genBiomeNoiseChunkSection(const BiomeNoise *bn, int out[4][4][4], int cx, int cy, int cz, uint64_t *dat)
     * }
     */
    public static FunctionDescriptor genBiomeNoiseChunkSection$descriptor() {
        return genBiomeNoiseChunkSection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void genBiomeNoiseChunkSection(const BiomeNoise *bn, int out[4][4][4], int cx, int cy, int cz, uint64_t *dat)
     * }
     */
    public static MethodHandle genBiomeNoiseChunkSection$handle() {
        return genBiomeNoiseChunkSection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void genBiomeNoiseChunkSection(const BiomeNoise *bn, int out[4][4][4], int cx, int cy, int cz, uint64_t *dat)
     * }
     */
    public static MemorySegment genBiomeNoiseChunkSection$address() {
        return genBiomeNoiseChunkSection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void genBiomeNoiseChunkSection(const BiomeNoise *bn, int out[4][4][4], int cx, int cy, int cz, uint64_t *dat)
     * }
     */
    public static void genBiomeNoiseChunkSection(MemorySegment bn, MemorySegment out, int cx, int cy, int cz, MemorySegment dat) {
        var mh$ = genBiomeNoiseChunkSection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("genBiomeNoiseChunkSection", bn, out, cx, cy, cz, dat);
            }
            mh$.invokeExact(bn, out, cx, cy, cz, dat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class genBiomeNoiseScaled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Range.layout(),
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("genBiomeNoiseScaled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int genBiomeNoiseScaled(const BiomeNoise *bn, int *out, Range r, uint64_t sha)
     * }
     */
    public static FunctionDescriptor genBiomeNoiseScaled$descriptor() {
        return genBiomeNoiseScaled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int genBiomeNoiseScaled(const BiomeNoise *bn, int *out, Range r, uint64_t sha)
     * }
     */
    public static MethodHandle genBiomeNoiseScaled$handle() {
        return genBiomeNoiseScaled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int genBiomeNoiseScaled(const BiomeNoise *bn, int *out, Range r, uint64_t sha)
     * }
     */
    public static MemorySegment genBiomeNoiseScaled$address() {
        return genBiomeNoiseScaled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int genBiomeNoiseScaled(const BiomeNoise *bn, int *out, Range r, uint64_t sha)
     * }
     */
    public static int genBiomeNoiseScaled(MemorySegment bn, MemorySegment out, MemorySegment r, long sha) {
        var mh$ = genBiomeNoiseScaled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("genBiomeNoiseScaled", bn, out, r, sha);
            }
            return (int)mh$.invokeExact(bn, out, r, sha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class genBiomeNoiseBetaScaled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Range.layout()
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("genBiomeNoiseBetaScaled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int genBiomeNoiseBetaScaled(const BiomeNoiseBeta *bnb, const SurfaceNoiseBeta *snb, int *out, Range r)
     * }
     */
    public static FunctionDescriptor genBiomeNoiseBetaScaled$descriptor() {
        return genBiomeNoiseBetaScaled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int genBiomeNoiseBetaScaled(const BiomeNoiseBeta *bnb, const SurfaceNoiseBeta *snb, int *out, Range r)
     * }
     */
    public static MethodHandle genBiomeNoiseBetaScaled$handle() {
        return genBiomeNoiseBetaScaled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int genBiomeNoiseBetaScaled(const BiomeNoiseBeta *bnb, const SurfaceNoiseBeta *snb, int *out, Range r)
     * }
     */
    public static MemorySegment genBiomeNoiseBetaScaled$address() {
        return genBiomeNoiseBetaScaled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int genBiomeNoiseBetaScaled(const BiomeNoiseBeta *bnb, const SurfaceNoiseBeta *snb, int *out, Range r)
     * }
     */
    public static int genBiomeNoiseBetaScaled(MemorySegment bnb, MemorySegment snb, MemorySegment out, MemorySegment r) {
        var mh$ = genBiomeNoiseBetaScaled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("genBiomeNoiseBetaScaled", bnb, snb, out, r);
            }
            return (int)mh$.invokeExact(bnb, snb, out, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getBiomeDepthAndScale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getBiomeDepthAndScale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getBiomeDepthAndScale(int id, double *depth, double *scale, int *grass)
     * }
     */
    public static FunctionDescriptor getBiomeDepthAndScale$descriptor() {
        return getBiomeDepthAndScale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getBiomeDepthAndScale(int id, double *depth, double *scale, int *grass)
     * }
     */
    public static MethodHandle getBiomeDepthAndScale$handle() {
        return getBiomeDepthAndScale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getBiomeDepthAndScale(int id, double *depth, double *scale, int *grass)
     * }
     */
    public static MemorySegment getBiomeDepthAndScale$address() {
        return getBiomeDepthAndScale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getBiomeDepthAndScale(int id, double *depth, double *scale, int *grass)
     * }
     */
    public static int getBiomeDepthAndScale(int id, MemorySegment depth, MemorySegment scale, MemorySegment grass) {
        var mh$ = getBiomeDepthAndScale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getBiomeDepthAndScale", id, depth, scale, grass);
            }
            return (int)mh$.invokeExact(id, depth, scale, grass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getVoronoiSrcRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Range.layout(),
            Range.layout()
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getVoronoiSrcRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Range getVoronoiSrcRange(Range r)
     * }
     */
    public static FunctionDescriptor getVoronoiSrcRange$descriptor() {
        return getVoronoiSrcRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Range getVoronoiSrcRange(Range r)
     * }
     */
    public static MethodHandle getVoronoiSrcRange$handle() {
        return getVoronoiSrcRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Range getVoronoiSrcRange(Range r)
     * }
     */
    public static MemorySegment getVoronoiSrcRange$address() {
        return getVoronoiSrcRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Range getVoronoiSrcRange(Range r)
     * }
     */
    public static MemorySegment getVoronoiSrcRange(SegmentAllocator allocator, MemorySegment r) {
        var mh$ = getVoronoiSrcRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getVoronoiSrcRange", allocator, r);
            }
            return (MemorySegment)mh$.invokeExact(allocator, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int LARGE_BIOMES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.LARGE_BIOMES = 1
     * }
     */
    public static int LARGE_BIOMES() {
        return LARGE_BIOMES;
    }
    private static final int NO_BETA_OCEAN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.NO_BETA_OCEAN = 2
     * }
     */
    public static int NO_BETA_OCEAN() {
        return NO_BETA_OCEAN;
    }
    private static final int FORCE_OCEAN_VARIANTS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FORCE_OCEAN_VARIANTS = 4
     * }
     */
    public static int FORCE_OCEAN_VARIANTS() {
        return FORCE_OCEAN_VARIANTS;
    }

    private static class setupGenerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("setupGenerator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setupGenerator(Generator *g, int mc, uint32_t flags)
     * }
     */
    public static FunctionDescriptor setupGenerator$descriptor() {
        return setupGenerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setupGenerator(Generator *g, int mc, uint32_t flags)
     * }
     */
    public static MethodHandle setupGenerator$handle() {
        return setupGenerator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setupGenerator(Generator *g, int mc, uint32_t flags)
     * }
     */
    public static MemorySegment setupGenerator$address() {
        return setupGenerator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setupGenerator(Generator *g, int mc, uint32_t flags)
     * }
     */
    public static void setupGenerator(MemorySegment g, int mc, int flags) {
        var mh$ = setupGenerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setupGenerator", g, mc, flags);
            }
            mh$.invokeExact(g, mc, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class applySeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("applySeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void applySeed(Generator *g, int dim, uint64_t seed)
     * }
     */
    public static FunctionDescriptor applySeed$descriptor() {
        return applySeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void applySeed(Generator *g, int dim, uint64_t seed)
     * }
     */
    public static MethodHandle applySeed$handle() {
        return applySeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void applySeed(Generator *g, int dim, uint64_t seed)
     * }
     */
    public static MemorySegment applySeed$address() {
        return applySeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void applySeed(Generator *g, int dim, uint64_t seed)
     * }
     */
    public static void applySeed(MemorySegment g, int dim, long seed) {
        var mh$ = applySeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("applySeed", g, dim, seed);
            }
            mh$.invokeExact(g, dim, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getMinCacheSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getMinCacheSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t getMinCacheSize(const Generator *g, int scale, int sx, int sy, int sz)
     * }
     */
    public static FunctionDescriptor getMinCacheSize$descriptor() {
        return getMinCacheSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t getMinCacheSize(const Generator *g, int scale, int sx, int sy, int sz)
     * }
     */
    public static MethodHandle getMinCacheSize$handle() {
        return getMinCacheSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t getMinCacheSize(const Generator *g, int scale, int sx, int sy, int sz)
     * }
     */
    public static MemorySegment getMinCacheSize$address() {
        return getMinCacheSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t getMinCacheSize(const Generator *g, int scale, int sx, int sy, int sz)
     * }
     */
    public static long getMinCacheSize(MemorySegment g, int scale, int sx, int sy, int sz) {
        var mh$ = getMinCacheSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getMinCacheSize", g, scale, sx, sy, sz);
            }
            return (long)mh$.invokeExact(g, scale, sx, sy, sz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class allocCache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Range.layout()
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("allocCache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *allocCache(const Generator *g, Range r)
     * }
     */
    public static FunctionDescriptor allocCache$descriptor() {
        return allocCache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *allocCache(const Generator *g, Range r)
     * }
     */
    public static MethodHandle allocCache$handle() {
        return allocCache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *allocCache(const Generator *g, Range r)
     * }
     */
    public static MemorySegment allocCache$address() {
        return allocCache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *allocCache(const Generator *g, Range r)
     * }
     */
    public static MemorySegment allocCache(MemorySegment g, MemorySegment r) {
        var mh$ = allocCache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("allocCache", g, r);
            }
            return (MemorySegment)mh$.invokeExact(g, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class genBiomes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Range.layout()
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("genBiomes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int genBiomes(const Generator *g, int *cache, Range r)
     * }
     */
    public static FunctionDescriptor genBiomes$descriptor() {
        return genBiomes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int genBiomes(const Generator *g, int *cache, Range r)
     * }
     */
    public static MethodHandle genBiomes$handle() {
        return genBiomes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int genBiomes(const Generator *g, int *cache, Range r)
     * }
     */
    public static MemorySegment genBiomes$address() {
        return genBiomes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int genBiomes(const Generator *g, int *cache, Range r)
     * }
     */
    public static int genBiomes(MemorySegment g, MemorySegment cache, MemorySegment r) {
        var mh$ = genBiomes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("genBiomes", g, cache, r);
            }
            return (int)mh$.invokeExact(g, cache, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getBiomeAt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getBiomeAt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getBiomeAt(const Generator *g, int scale, int x, int y, int z)
     * }
     */
    public static FunctionDescriptor getBiomeAt$descriptor() {
        return getBiomeAt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getBiomeAt(const Generator *g, int scale, int x, int y, int z)
     * }
     */
    public static MethodHandle getBiomeAt$handle() {
        return getBiomeAt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getBiomeAt(const Generator *g, int scale, int x, int y, int z)
     * }
     */
    public static MemorySegment getBiomeAt$address() {
        return getBiomeAt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getBiomeAt(const Generator *g, int scale, int x, int y, int z)
     * }
     */
    public static int getBiomeAt(MemorySegment g, int scale, int x, int y, int z) {
        var mh$ = getBiomeAt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getBiomeAt", g, scale, x, y, z);
            }
            return (int)mh$.invokeExact(g, scale, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getLayerForScale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getLayerForScale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const Layer *getLayerForScale(const Generator *g, int scale)
     * }
     */
    public static FunctionDescriptor getLayerForScale$descriptor() {
        return getLayerForScale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const Layer *getLayerForScale(const Generator *g, int scale)
     * }
     */
    public static MethodHandle getLayerForScale$handle() {
        return getLayerForScale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const Layer *getLayerForScale(const Generator *g, int scale)
     * }
     */
    public static MemorySegment getLayerForScale$address() {
        return getLayerForScale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const Layer *getLayerForScale(const Generator *g, int scale)
     * }
     */
    public static MemorySegment getLayerForScale(MemorySegment g, int scale) {
        var mh$ = getLayerForScale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getLayerForScale", g, scale);
            }
            return (MemorySegment)mh$.invokeExact(g, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setupLayerStack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("setupLayerStack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setupLayerStack(LayerStack *g, int mc, int largeBiomes)
     * }
     */
    public static FunctionDescriptor setupLayerStack$descriptor() {
        return setupLayerStack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setupLayerStack(LayerStack *g, int mc, int largeBiomes)
     * }
     */
    public static MethodHandle setupLayerStack$handle() {
        return setupLayerStack.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setupLayerStack(LayerStack *g, int mc, int largeBiomes)
     * }
     */
    public static MemorySegment setupLayerStack$address() {
        return setupLayerStack.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setupLayerStack(LayerStack *g, int mc, int largeBiomes)
     * }
     */
    public static void setupLayerStack(MemorySegment g, int mc, int largeBiomes) {
        var mh$ = setupLayerStack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setupLayerStack", g, mc, largeBiomes);
            }
            mh$.invokeExact(g, mc, largeBiomes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getMinLayerCacheSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getMinLayerCacheSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t getMinLayerCacheSize(const Layer *layer, int sizeX, int sizeZ)
     * }
     */
    public static FunctionDescriptor getMinLayerCacheSize$descriptor() {
        return getMinLayerCacheSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t getMinLayerCacheSize(const Layer *layer, int sizeX, int sizeZ)
     * }
     */
    public static MethodHandle getMinLayerCacheSize$handle() {
        return getMinLayerCacheSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t getMinLayerCacheSize(const Layer *layer, int sizeX, int sizeZ)
     * }
     */
    public static MemorySegment getMinLayerCacheSize$address() {
        return getMinLayerCacheSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t getMinLayerCacheSize(const Layer *layer, int sizeX, int sizeZ)
     * }
     */
    public static long getMinLayerCacheSize(MemorySegment layer, int sizeX, int sizeZ) {
        var mh$ = getMinLayerCacheSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getMinLayerCacheSize", layer, sizeX, sizeZ);
            }
            return (long)mh$.invokeExact(layer, sizeX, sizeZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setupLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_CHAR,
            Cubiomes.C_CHAR,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("setupLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Layer *setupLayer(Layer *l, mapfunc_t *map, int mc, int8_t zoom, int8_t edge, uint64_t saltbase, Layer *p, Layer *p2)
     * }
     */
    public static FunctionDescriptor setupLayer$descriptor() {
        return setupLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Layer *setupLayer(Layer *l, mapfunc_t *map, int mc, int8_t zoom, int8_t edge, uint64_t saltbase, Layer *p, Layer *p2)
     * }
     */
    public static MethodHandle setupLayer$handle() {
        return setupLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Layer *setupLayer(Layer *l, mapfunc_t *map, int mc, int8_t zoom, int8_t edge, uint64_t saltbase, Layer *p, Layer *p2)
     * }
     */
    public static MemorySegment setupLayer$address() {
        return setupLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Layer *setupLayer(Layer *l, mapfunc_t *map, int mc, int8_t zoom, int8_t edge, uint64_t saltbase, Layer *p, Layer *p2)
     * }
     */
    public static MemorySegment setupLayer(MemorySegment l, MemorySegment map, int mc, byte zoom, byte edge, long saltbase, MemorySegment p, MemorySegment p2) {
        var mh$ = setupLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setupLayer", l, map, mc, zoom, edge, saltbase, p, p2);
            }
            return (MemorySegment)mh$.invokeExact(l, map, mc, zoom, edge, saltbase, p, p2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class genArea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("genArea");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int genArea(const Layer *layer, int *out, int areaX, int areaZ, int areaWidth, int areaHeight)
     * }
     */
    public static FunctionDescriptor genArea$descriptor() {
        return genArea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int genArea(const Layer *layer, int *out, int areaX, int areaZ, int areaWidth, int areaHeight)
     * }
     */
    public static MethodHandle genArea$handle() {
        return genArea.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int genArea(const Layer *layer, int *out, int areaX, int areaZ, int areaWidth, int areaHeight)
     * }
     */
    public static MemorySegment genArea$address() {
        return genArea.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int genArea(const Layer *layer, int *out, int areaX, int areaZ, int areaWidth, int areaHeight)
     * }
     */
    public static int genArea(MemorySegment layer, MemorySegment out, int areaX, int areaZ, int areaWidth, int areaHeight) {
        var mh$ = genArea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("genArea", layer, out, areaX, areaZ, areaWidth, areaHeight);
            }
            return (int)mh$.invokeExact(layer, out, areaX, areaZ, areaWidth, areaHeight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mapApproxHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("mapApproxHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mapApproxHeight(float *y, int *ids, const Generator *g, const SurfaceNoise *sn, int x, int z, int w, int h)
     * }
     */
    public static FunctionDescriptor mapApproxHeight$descriptor() {
        return mapApproxHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mapApproxHeight(float *y, int *ids, const Generator *g, const SurfaceNoise *sn, int x, int z, int w, int h)
     * }
     */
    public static MethodHandle mapApproxHeight$handle() {
        return mapApproxHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mapApproxHeight(float *y, int *ids, const Generator *g, const SurfaceNoise *sn, int x, int z, int w, int h)
     * }
     */
    public static MemorySegment mapApproxHeight$address() {
        return mapApproxHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mapApproxHeight(float *y, int *ids, const Generator *g, const SurfaceNoise *sn, int x, int z, int w, int h)
     * }
     */
    public static int mapApproxHeight(MemorySegment y, MemorySegment ids, MemorySegment g, MemorySegment sn, int x, int z, int w, int h) {
        var mh$ = mapApproxHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mapApproxHeight", y, ids, g, sn, x, z, w, h);
            }
            return (int)mh$.invokeExact(y, ids, g, sn, x, z, w, h);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int Feature = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Feature = 0
     * }
     */
    public static int Feature() {
        return Feature;
    }
    private static final int Desert_Pyramid = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Desert_Pyramid = 1
     * }
     */
    public static int Desert_Pyramid() {
        return Desert_Pyramid;
    }
    private static final int Jungle_Temple = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Jungle_Temple = 2
     * }
     */
    public static int Jungle_Temple() {
        return Jungle_Temple;
    }
    private static final int Jungle_Pyramid = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Jungle_Pyramid = 2
     * }
     */
    public static int Jungle_Pyramid() {
        return Jungle_Pyramid;
    }
    private static final int Swamp_Hut = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Swamp_Hut = 3
     * }
     */
    public static int Swamp_Hut() {
        return Swamp_Hut;
    }
    private static final int Igloo = (int)4L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Igloo = 4
     * }
     */
    public static int Igloo() {
        return Igloo;
    }
    private static final int Village = (int)5L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Village = 5
     * }
     */
    public static int Village() {
        return Village;
    }
    private static final int Ocean_Ruin = (int)6L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Ocean_Ruin = 6
     * }
     */
    public static int Ocean_Ruin() {
        return Ocean_Ruin;
    }
    private static final int Shipwreck = (int)7L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Shipwreck = 7
     * }
     */
    public static int Shipwreck() {
        return Shipwreck;
    }
    private static final int Monument = (int)8L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Monument = 8
     * }
     */
    public static int Monument() {
        return Monument;
    }
    private static final int Mansion = (int)9L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Mansion = 9
     * }
     */
    public static int Mansion() {
        return Mansion;
    }
    private static final int Outpost = (int)10L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Outpost = 10
     * }
     */
    public static int Outpost() {
        return Outpost;
    }
    private static final int Ruined_Portal = (int)11L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Ruined_Portal = 11
     * }
     */
    public static int Ruined_Portal() {
        return Ruined_Portal;
    }
    private static final int Ruined_Portal_N = (int)12L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Ruined_Portal_N = 12
     * }
     */
    public static int Ruined_Portal_N() {
        return Ruined_Portal_N;
    }
    private static final int Ancient_City = (int)13L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Ancient_City = 13
     * }
     */
    public static int Ancient_City() {
        return Ancient_City;
    }
    private static final int Treasure = (int)14L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Treasure = 14
     * }
     */
    public static int Treasure() {
        return Treasure;
    }
    private static final int Mineshaft = (int)15L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Mineshaft = 15
     * }
     */
    public static int Mineshaft() {
        return Mineshaft;
    }
    private static final int Desert_Well = (int)16L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Desert_Well = 16
     * }
     */
    public static int Desert_Well() {
        return Desert_Well;
    }
    private static final int Geode = (int)17L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Geode = 17
     * }
     */
    public static int Geode() {
        return Geode;
    }
    private static final int Fortress = (int)18L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Fortress = 18
     * }
     */
    public static int Fortress() {
        return Fortress;
    }
    private static final int Bastion = (int)19L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Bastion = 19
     * }
     */
    public static int Bastion() {
        return Bastion;
    }
    private static final int End_City = (int)20L;
    /**
     * {@snippet lang=c :
     * enum StructureType.End_City = 20
     * }
     */
    public static int End_City() {
        return End_City;
    }
    private static final int End_Gateway = (int)21L;
    /**
     * {@snippet lang=c :
     * enum StructureType.End_Gateway = 21
     * }
     */
    public static int End_Gateway() {
        return End_Gateway;
    }
    private static final int End_Island = (int)22L;
    /**
     * {@snippet lang=c :
     * enum StructureType.End_Island = 22
     * }
     */
    public static int End_Island() {
        return End_Island;
    }
    private static final int Trail_Ruins = (int)23L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Trail_Ruins = 23
     * }
     */
    public static int Trail_Ruins() {
        return Trail_Ruins;
    }
    private static final int Trial_Chambers = (int)24L;
    /**
     * {@snippet lang=c :
     * enum StructureType.Trial_Chambers = 24
     * }
     */
    public static int Trial_Chambers() {
        return Trial_Chambers;
    }
    private static final int FEATURE_NUM = (int)25L;
    /**
     * {@snippet lang=c :
     * enum StructureType.FEATURE_NUM = 25
     * }
     */
    public static int FEATURE_NUM() {
        return FEATURE_NUM;
    }
    private static final int STRUCT_TRIANGULAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.STRUCT_TRIANGULAR = 1
     * }
     */
    public static int STRUCT_TRIANGULAR() {
        return STRUCT_TRIANGULAR;
    }
    private static final int STRUCT_CHUNK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.STRUCT_CHUNK = 2
     * }
     */
    public static int STRUCT_CHUNK() {
        return STRUCT_CHUNK;
    }
    private static final int STRUCT_NETHER = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.STRUCT_NETHER = 16
     * }
     */
    public static int STRUCT_NETHER() {
        return STRUCT_NETHER;
    }
    private static final int STRUCT_END = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.STRUCT_END = 32
     * }
     */
    public static int STRUCT_END() {
        return STRUCT_END;
    }
    private static final int BF_APPROX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BF_APPROX = 1
     * }
     */
    public static int BF_APPROX() {
        return BF_APPROX;
    }
    private static final int BF_FORCED_OCEAN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BF_FORCED_OCEAN = 4
     * }
     */
    public static int BF_FORCED_OCEAN() {
        return BF_FORCED_OCEAN;
    }

    private static class getStructureDimension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getStructureDimension");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getStructureDimension(int id)
     * }
     */
    public static FunctionDescriptor getStructureDimension$descriptor() {
        return getStructureDimension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getStructureDimension(int id)
     * }
     */
    public static MethodHandle getStructureDimension$handle() {
        return getStructureDimension.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getStructureDimension(int id)
     * }
     */
    public static MemorySegment getStructureDimension$address() {
        return getStructureDimension.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getStructureDimension(int id)
     * }
     */
    public static int getStructureDimension(int id) {
        var mh$ = getStructureDimension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getStructureDimension", id);
            }
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getStructureConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getStructureConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getStructureConfig(int structureType, int mc, StructureConfig *sconf)
     * }
     */
    public static FunctionDescriptor getStructureConfig$descriptor() {
        return getStructureConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getStructureConfig(int structureType, int mc, StructureConfig *sconf)
     * }
     */
    public static MethodHandle getStructureConfig$handle() {
        return getStructureConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getStructureConfig(int structureType, int mc, StructureConfig *sconf)
     * }
     */
    public static MemorySegment getStructureConfig$address() {
        return getStructureConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getStructureConfig(int structureType, int mc, StructureConfig *sconf)
     * }
     */
    public static int getStructureConfig(int structureType, int mc, MemorySegment sconf) {
        var mh$ = getStructureConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getStructureConfig", structureType, mc, sconf);
            }
            return (int)mh$.invokeExact(structureType, mc, sconf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getStructurePos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getStructurePos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getStructurePos(int structureType, int mc, uint64_t seed, int regX, int regZ, Pos *pos)
     * }
     */
    public static FunctionDescriptor getStructurePos$descriptor() {
        return getStructurePos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getStructurePos(int structureType, int mc, uint64_t seed, int regX, int regZ, Pos *pos)
     * }
     */
    public static MethodHandle getStructurePos$handle() {
        return getStructurePos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getStructurePos(int structureType, int mc, uint64_t seed, int regX, int regZ, Pos *pos)
     * }
     */
    public static MemorySegment getStructurePos$address() {
        return getStructurePos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getStructurePos(int structureType, int mc, uint64_t seed, int regX, int regZ, Pos *pos)
     * }
     */
    public static int getStructurePos(int structureType, int mc, long seed, int regX, int regZ, MemorySegment pos) {
        var mh$ = getStructurePos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getStructurePos", structureType, mc, seed, regX, regZ, pos);
            }
            return (int)mh$.invokeExact(structureType, mc, seed, regX, regZ, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getMineshafts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getMineshafts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getMineshafts(int mc, uint64_t seed, int chunkX, int chunkZ, int chunkW, int chunkH, Pos *out, int nout)
     * }
     */
    public static FunctionDescriptor getMineshafts$descriptor() {
        return getMineshafts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getMineshafts(int mc, uint64_t seed, int chunkX, int chunkZ, int chunkW, int chunkH, Pos *out, int nout)
     * }
     */
    public static MethodHandle getMineshafts$handle() {
        return getMineshafts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getMineshafts(int mc, uint64_t seed, int chunkX, int chunkZ, int chunkW, int chunkH, Pos *out, int nout)
     * }
     */
    public static MemorySegment getMineshafts$address() {
        return getMineshafts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getMineshafts(int mc, uint64_t seed, int chunkX, int chunkZ, int chunkW, int chunkH, Pos *out, int nout)
     * }
     */
    public static int getMineshafts(int mc, long seed, int chunkX, int chunkZ, int chunkW, int chunkH, MemorySegment out, int nout) {
        var mh$ = getMineshafts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getMineshafts", mc, seed, chunkX, chunkZ, chunkW, chunkH, out, nout);
            }
            return (int)mh$.invokeExact(mc, seed, chunkX, chunkZ, chunkW, chunkH, out, nout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getEndIslands {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getEndIslands");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getEndIslands(EndIsland islands[2], int mc, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static FunctionDescriptor getEndIslands$descriptor() {
        return getEndIslands.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getEndIslands(EndIsland islands[2], int mc, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static MethodHandle getEndIslands$handle() {
        return getEndIslands.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getEndIslands(EndIsland islands[2], int mc, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static MemorySegment getEndIslands$address() {
        return getEndIslands.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getEndIslands(EndIsland islands[2], int mc, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static int getEndIslands(MemorySegment islands, int mc, long seed, int chunkX, int chunkZ) {
        var mh$ = getEndIslands.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getEndIslands", islands, mc, seed, chunkX, chunkZ);
            }
            return (int)mh$.invokeExact(islands, mc, seed, chunkX, chunkZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mapEndIslandHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("mapEndIslandHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mapEndIslandHeight(float *y, const EndNoise *en, uint64_t seed, int x, int z, int w, int h, int scale)
     * }
     */
    public static FunctionDescriptor mapEndIslandHeight$descriptor() {
        return mapEndIslandHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mapEndIslandHeight(float *y, const EndNoise *en, uint64_t seed, int x, int z, int w, int h, int scale)
     * }
     */
    public static MethodHandle mapEndIslandHeight$handle() {
        return mapEndIslandHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mapEndIslandHeight(float *y, const EndNoise *en, uint64_t seed, int x, int z, int w, int h, int scale)
     * }
     */
    public static MemorySegment mapEndIslandHeight$address() {
        return mapEndIslandHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mapEndIslandHeight(float *y, const EndNoise *en, uint64_t seed, int x, int z, int w, int h, int scale)
     * }
     */
    public static int mapEndIslandHeight(MemorySegment y, MemorySegment en, long seed, int x, int z, int w, int h, int scale) {
        var mh$ = mapEndIslandHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mapEndIslandHeight", y, en, seed, x, z, w, h, scale);
            }
            return (int)mh$.invokeExact(y, en, seed, x, z, w, h, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class isEndChunkEmpty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("isEndChunkEmpty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int isEndChunkEmpty(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static FunctionDescriptor isEndChunkEmpty$descriptor() {
        return isEndChunkEmpty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int isEndChunkEmpty(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static MethodHandle isEndChunkEmpty$handle() {
        return isEndChunkEmpty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int isEndChunkEmpty(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static MemorySegment isEndChunkEmpty$address() {
        return isEndChunkEmpty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int isEndChunkEmpty(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static int isEndChunkEmpty(MemorySegment en, MemorySegment sn, long seed, int chunkX, int chunkZ) {
        var mh$ = isEndChunkEmpty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isEndChunkEmpty", en, sn, seed, chunkX, chunkZ);
            }
            return (int)mh$.invokeExact(en, sn, seed, chunkX, chunkZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class initFirstStronghold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Pos.layout(),
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("initFirstStronghold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Pos initFirstStronghold(StrongholdIter *sh, int mc, uint64_t s48)
     * }
     */
    public static FunctionDescriptor initFirstStronghold$descriptor() {
        return initFirstStronghold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Pos initFirstStronghold(StrongholdIter *sh, int mc, uint64_t s48)
     * }
     */
    public static MethodHandle initFirstStronghold$handle() {
        return initFirstStronghold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Pos initFirstStronghold(StrongholdIter *sh, int mc, uint64_t s48)
     * }
     */
    public static MemorySegment initFirstStronghold$address() {
        return initFirstStronghold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Pos initFirstStronghold(StrongholdIter *sh, int mc, uint64_t s48)
     * }
     */
    public static MemorySegment initFirstStronghold(SegmentAllocator allocator, MemorySegment sh, int mc, long s48) {
        var mh$ = initFirstStronghold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("initFirstStronghold", allocator, sh, mc, s48);
            }
            return (MemorySegment)mh$.invokeExact(allocator, sh, mc, s48);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nextStronghold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("nextStronghold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int nextStronghold(StrongholdIter *sh, const Generator *g)
     * }
     */
    public static FunctionDescriptor nextStronghold$descriptor() {
        return nextStronghold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int nextStronghold(StrongholdIter *sh, const Generator *g)
     * }
     */
    public static MethodHandle nextStronghold$handle() {
        return nextStronghold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int nextStronghold(StrongholdIter *sh, const Generator *g)
     * }
     */
    public static MemorySegment nextStronghold$address() {
        return nextStronghold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int nextStronghold(StrongholdIter *sh, const Generator *g)
     * }
     */
    public static int nextStronghold(MemorySegment sh, MemorySegment g) {
        var mh$ = nextStronghold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nextStronghold", sh, g);
            }
            return (int)mh$.invokeExact(sh, g);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class estimateSpawn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Pos.layout(),
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("estimateSpawn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Pos estimateSpawn(const Generator *g, uint64_t *rng)
     * }
     */
    public static FunctionDescriptor estimateSpawn$descriptor() {
        return estimateSpawn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Pos estimateSpawn(const Generator *g, uint64_t *rng)
     * }
     */
    public static MethodHandle estimateSpawn$handle() {
        return estimateSpawn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Pos estimateSpawn(const Generator *g, uint64_t *rng)
     * }
     */
    public static MemorySegment estimateSpawn$address() {
        return estimateSpawn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Pos estimateSpawn(const Generator *g, uint64_t *rng)
     * }
     */
    public static MemorySegment estimateSpawn(SegmentAllocator allocator, MemorySegment g, MemorySegment rng) {
        var mh$ = estimateSpawn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("estimateSpawn", allocator, g, rng);
            }
            return (MemorySegment)mh$.invokeExact(allocator, g, rng);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getSpawn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Pos.layout(),
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getSpawn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Pos getSpawn(const Generator *g)
     * }
     */
    public static FunctionDescriptor getSpawn$descriptor() {
        return getSpawn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Pos getSpawn(const Generator *g)
     * }
     */
    public static MethodHandle getSpawn$handle() {
        return getSpawn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Pos getSpawn(const Generator *g)
     * }
     */
    public static MemorySegment getSpawn$address() {
        return getSpawn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Pos getSpawn(const Generator *g)
     * }
     */
    public static MemorySegment getSpawn(SegmentAllocator allocator, MemorySegment g) {
        var mh$ = getSpawn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getSpawn", allocator, g);
            }
            return (MemorySegment)mh$.invokeExact(allocator, g);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class locateBiome {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Pos.layout(),
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("locateBiome");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Pos locateBiome(const Generator *g, int x, int y, int z, int radius, uint64_t validB, uint64_t validM, uint64_t *rng, int *passes)
     * }
     */
    public static FunctionDescriptor locateBiome$descriptor() {
        return locateBiome.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Pos locateBiome(const Generator *g, int x, int y, int z, int radius, uint64_t validB, uint64_t validM, uint64_t *rng, int *passes)
     * }
     */
    public static MethodHandle locateBiome$handle() {
        return locateBiome.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Pos locateBiome(const Generator *g, int x, int y, int z, int radius, uint64_t validB, uint64_t validM, uint64_t *rng, int *passes)
     * }
     */
    public static MemorySegment locateBiome$address() {
        return locateBiome.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Pos locateBiome(const Generator *g, int x, int y, int z, int radius, uint64_t validB, uint64_t validM, uint64_t *rng, int *passes)
     * }
     */
    public static MemorySegment locateBiome(SegmentAllocator allocator, MemorySegment g, int x, int y, int z, int radius, long validB, long validM, MemorySegment rng, MemorySegment passes) {
        var mh$ = locateBiome.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("locateBiome", allocator, g, x, y, z, radius, validB, validM, rng, passes);
            }
            return (MemorySegment)mh$.invokeExact(allocator, g, x, y, z, radius, validB, validM, rng, passes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class isViableStructurePos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("isViableStructurePos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int isViableStructurePos(int structType, Generator *g, int blockX, int blockZ, uint32_t flags)
     * }
     */
    public static FunctionDescriptor isViableStructurePos$descriptor() {
        return isViableStructurePos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int isViableStructurePos(int structType, Generator *g, int blockX, int blockZ, uint32_t flags)
     * }
     */
    public static MethodHandle isViableStructurePos$handle() {
        return isViableStructurePos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int isViableStructurePos(int structType, Generator *g, int blockX, int blockZ, uint32_t flags)
     * }
     */
    public static MemorySegment isViableStructurePos$address() {
        return isViableStructurePos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int isViableStructurePos(int structType, Generator *g, int blockX, int blockZ, uint32_t flags)
     * }
     */
    public static int isViableStructurePos(int structType, MemorySegment g, int blockX, int blockZ, int flags) {
        var mh$ = isViableStructurePos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isViableStructurePos", structType, g, blockX, blockZ, flags);
            }
            return (int)mh$.invokeExact(structType, g, blockX, blockZ, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class isViableFeatureBiome {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("isViableFeatureBiome");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int isViableFeatureBiome(int mc, int structureType, int biomeID)
     * }
     */
    public static FunctionDescriptor isViableFeatureBiome$descriptor() {
        return isViableFeatureBiome.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int isViableFeatureBiome(int mc, int structureType, int biomeID)
     * }
     */
    public static MethodHandle isViableFeatureBiome$handle() {
        return isViableFeatureBiome.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int isViableFeatureBiome(int mc, int structureType, int biomeID)
     * }
     */
    public static MemorySegment isViableFeatureBiome$address() {
        return isViableFeatureBiome.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int isViableFeatureBiome(int mc, int structureType, int biomeID)
     * }
     */
    public static int isViableFeatureBiome(int mc, int structureType, int biomeID) {
        var mh$ = isViableFeatureBiome.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isViableFeatureBiome", mc, structureType, biomeID);
            }
            return (int)mh$.invokeExact(mc, structureType, biomeID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class isViableStructureTerrain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("isViableStructureTerrain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int isViableStructureTerrain(int structType, Generator *g, int blockX, int blockZ)
     * }
     */
    public static FunctionDescriptor isViableStructureTerrain$descriptor() {
        return isViableStructureTerrain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int isViableStructureTerrain(int structType, Generator *g, int blockX, int blockZ)
     * }
     */
    public static MethodHandle isViableStructureTerrain$handle() {
        return isViableStructureTerrain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int isViableStructureTerrain(int structType, Generator *g, int blockX, int blockZ)
     * }
     */
    public static MemorySegment isViableStructureTerrain$address() {
        return isViableStructureTerrain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int isViableStructureTerrain(int structType, Generator *g, int blockX, int blockZ)
     * }
     */
    public static int isViableStructureTerrain(int structType, MemorySegment g, int blockX, int blockZ) {
        var mh$ = isViableStructureTerrain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isViableStructureTerrain", structType, g, blockX, blockZ);
            }
            return (int)mh$.invokeExact(structType, g, blockX, blockZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class isViableEndCityTerrain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("isViableEndCityTerrain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int isViableEndCityTerrain(const Generator *g, const SurfaceNoise *sn, int blockX, int blockZ)
     * }
     */
    public static FunctionDescriptor isViableEndCityTerrain$descriptor() {
        return isViableEndCityTerrain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int isViableEndCityTerrain(const Generator *g, const SurfaceNoise *sn, int blockX, int blockZ)
     * }
     */
    public static MethodHandle isViableEndCityTerrain$handle() {
        return isViableEndCityTerrain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int isViableEndCityTerrain(const Generator *g, const SurfaceNoise *sn, int blockX, int blockZ)
     * }
     */
    public static MemorySegment isViableEndCityTerrain$address() {
        return isViableEndCityTerrain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int isViableEndCityTerrain(const Generator *g, const SurfaceNoise *sn, int blockX, int blockZ)
     * }
     */
    public static int isViableEndCityTerrain(MemorySegment g, MemorySegment sn, int blockX, int blockZ) {
        var mh$ = isViableEndCityTerrain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isViableEndCityTerrain", g, sn, blockX, blockZ);
            }
            return (int)mh$.invokeExact(g, sn, blockX, blockZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getVariant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getVariant");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getVariant(StructureVariant *sv, int structType, int mc, uint64_t seed, int blockX, int blockZ, int biomeID)
     * }
     */
    public static FunctionDescriptor getVariant$descriptor() {
        return getVariant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getVariant(StructureVariant *sv, int structType, int mc, uint64_t seed, int blockX, int blockZ, int biomeID)
     * }
     */
    public static MethodHandle getVariant$handle() {
        return getVariant.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getVariant(StructureVariant *sv, int structType, int mc, uint64_t seed, int blockX, int blockZ, int biomeID)
     * }
     */
    public static MemorySegment getVariant$address() {
        return getVariant.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getVariant(StructureVariant *sv, int structType, int mc, uint64_t seed, int blockX, int blockZ, int biomeID)
     * }
     */
    public static int getVariant(MemorySegment sv, int structType, int mc, long seed, int blockX, int blockZ, int biomeID) {
        var mh$ = getVariant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getVariant", sv, structType, mc, seed, blockX, blockZ, biomeID);
            }
            return (int)mh$.invokeExact(sv, structType, mc, seed, blockX, blockZ, biomeID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getEndCityPieces {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getEndCityPieces");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getEndCityPieces(Piece *pieces, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static FunctionDescriptor getEndCityPieces$descriptor() {
        return getEndCityPieces.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getEndCityPieces(Piece *pieces, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static MethodHandle getEndCityPieces$handle() {
        return getEndCityPieces.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getEndCityPieces(Piece *pieces, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static MemorySegment getEndCityPieces$address() {
        return getEndCityPieces.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getEndCityPieces(Piece *pieces, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static int getEndCityPieces(MemorySegment pieces, long seed, int chunkX, int chunkZ) {
        var mh$ = getEndCityPieces.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getEndCityPieces", pieces, seed, chunkX, chunkZ);
            }
            return (int)mh$.invokeExact(pieces, seed, chunkX, chunkZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int BASE_FLOOR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BASE_FLOOR = 0
     * }
     */
    public static int BASE_FLOOR() {
        return BASE_FLOOR;
    }
    private static final int BASE_ROOF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BASE_ROOF = 1
     * }
     */
    public static int BASE_ROOF() {
        return BASE_ROOF;
    }
    private static final int BRIDGE_END = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BRIDGE_END = 2
     * }
     */
    public static int BRIDGE_END() {
        return BRIDGE_END;
    }
    private static final int BRIDGE_GENTLE_STAIRS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BRIDGE_GENTLE_STAIRS = 3
     * }
     */
    public static int BRIDGE_GENTLE_STAIRS() {
        return BRIDGE_GENTLE_STAIRS;
    }
    private static final int BRIDGE_PIECE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BRIDGE_PIECE = 4
     * }
     */
    public static int BRIDGE_PIECE() {
        return BRIDGE_PIECE;
    }
    private static final int BRIDGE_STEEP_STAIRS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BRIDGE_STEEP_STAIRS = 5
     * }
     */
    public static int BRIDGE_STEEP_STAIRS() {
        return BRIDGE_STEEP_STAIRS;
    }
    private static final int FAT_TOWER_BASE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FAT_TOWER_BASE = 6
     * }
     */
    public static int FAT_TOWER_BASE() {
        return FAT_TOWER_BASE;
    }
    private static final int FAT_TOWER_MIDDLE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FAT_TOWER_MIDDLE = 7
     * }
     */
    public static int FAT_TOWER_MIDDLE() {
        return FAT_TOWER_MIDDLE;
    }
    private static final int FAT_TOWER_TOP = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FAT_TOWER_TOP = 8
     * }
     */
    public static int FAT_TOWER_TOP() {
        return FAT_TOWER_TOP;
    }
    private static final int SECOND_FLOOR_1 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SECOND_FLOOR_1 = 9
     * }
     */
    public static int SECOND_FLOOR_1() {
        return SECOND_FLOOR_1;
    }
    private static final int SECOND_FLOOR_2 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SECOND_FLOOR_2 = 10
     * }
     */
    public static int SECOND_FLOOR_2() {
        return SECOND_FLOOR_2;
    }
    private static final int SECOND_ROOF = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SECOND_ROOF = 11
     * }
     */
    public static int SECOND_ROOF() {
        return SECOND_ROOF;
    }
    private static final int END_SHIP = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.END_SHIP = 12
     * }
     */
    public static int END_SHIP() {
        return END_SHIP;
    }
    private static final int THIRD_FLOOR_1 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.THIRD_FLOOR_1 = 13
     * }
     */
    public static int THIRD_FLOOR_1() {
        return THIRD_FLOOR_1;
    }
    private static final int THIRD_FLOOR_2 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.THIRD_FLOOR_2 = 14
     * }
     */
    public static int THIRD_FLOOR_2() {
        return THIRD_FLOOR_2;
    }
    private static final int THIRD_ROOF = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.THIRD_ROOF = 15
     * }
     */
    public static int THIRD_ROOF() {
        return THIRD_ROOF;
    }
    private static final int TOWER_BASE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TOWER_BASE = 16
     * }
     */
    public static int TOWER_BASE() {
        return TOWER_BASE;
    }
    private static final int TOWER_FLOOR = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TOWER_FLOOR = 17
     * }
     */
    public static int TOWER_FLOOR() {
        return TOWER_FLOOR;
    }
    private static final int TOWER_PIECE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TOWER_PIECE = 18
     * }
     */
    public static int TOWER_PIECE() {
        return TOWER_PIECE;
    }
    private static final int TOWER_TOP = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TOWER_TOP = 19
     * }
     */
    public static int TOWER_TOP() {
        return TOWER_TOP;
    }
    private static final int END_CITY_PIECES_MAX = (int)421L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.END_CITY_PIECES_MAX = 421
     * }
     */
    public static int END_CITY_PIECES_MAX() {
        return END_CITY_PIECES_MAX;
    }

    private static class getFortressPieces {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getFortressPieces");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getFortressPieces(Piece *list, int n, int mc, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static FunctionDescriptor getFortressPieces$descriptor() {
        return getFortressPieces.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getFortressPieces(Piece *list, int n, int mc, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static MethodHandle getFortressPieces$handle() {
        return getFortressPieces.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getFortressPieces(Piece *list, int n, int mc, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static MemorySegment getFortressPieces$address() {
        return getFortressPieces.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getFortressPieces(Piece *list, int n, int mc, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static int getFortressPieces(MemorySegment list, int n, int mc, long seed, int chunkX, int chunkZ) {
        var mh$ = getFortressPieces.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getFortressPieces", list, n, mc, seed, chunkX, chunkZ);
            }
            return (int)mh$.invokeExact(list, n, mc, seed, chunkX, chunkZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FORTRESS_START = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FORTRESS_START = 0
     * }
     */
    public static int FORTRESS_START() {
        return FORTRESS_START;
    }
    private static final int BRIDGE_STRAIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BRIDGE_STRAIGHT = 1
     * }
     */
    public static int BRIDGE_STRAIGHT() {
        return BRIDGE_STRAIGHT;
    }
    private static final int BRIDGE_CROSSING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BRIDGE_CROSSING = 2
     * }
     */
    public static int BRIDGE_CROSSING() {
        return BRIDGE_CROSSING;
    }
    private static final int BRIDGE_FORTIFIED_CROSSING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BRIDGE_FORTIFIED_CROSSING = 3
     * }
     */
    public static int BRIDGE_FORTIFIED_CROSSING() {
        return BRIDGE_FORTIFIED_CROSSING;
    }
    private static final int BRIDGE_STAIRS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BRIDGE_STAIRS = 4
     * }
     */
    public static int BRIDGE_STAIRS() {
        return BRIDGE_STAIRS;
    }
    private static final int BRIDGE_SPAWNER = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BRIDGE_SPAWNER = 5
     * }
     */
    public static int BRIDGE_SPAWNER() {
        return BRIDGE_SPAWNER;
    }
    private static final int BRIDGE_CORRIDOR_ENTRANCE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BRIDGE_CORRIDOR_ENTRANCE = 6
     * }
     */
    public static int BRIDGE_CORRIDOR_ENTRANCE() {
        return BRIDGE_CORRIDOR_ENTRANCE;
    }
    private static final int CORRIDOR_STRAIGHT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CORRIDOR_STRAIGHT = 7
     * }
     */
    public static int CORRIDOR_STRAIGHT() {
        return CORRIDOR_STRAIGHT;
    }
    private static final int CORRIDOR_CROSSING = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CORRIDOR_CROSSING = 8
     * }
     */
    public static int CORRIDOR_CROSSING() {
        return CORRIDOR_CROSSING;
    }
    private static final int CORRIDOR_TURN_RIGHT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CORRIDOR_TURN_RIGHT = 9
     * }
     */
    public static int CORRIDOR_TURN_RIGHT() {
        return CORRIDOR_TURN_RIGHT;
    }
    private static final int CORRIDOR_TURN_LEFT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CORRIDOR_TURN_LEFT = 10
     * }
     */
    public static int CORRIDOR_TURN_LEFT() {
        return CORRIDOR_TURN_LEFT;
    }
    private static final int CORRIDOR_STAIRS = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CORRIDOR_STAIRS = 11
     * }
     */
    public static int CORRIDOR_STAIRS() {
        return CORRIDOR_STAIRS;
    }
    private static final int CORRIDOR_T_CROSSING = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CORRIDOR_T_CROSSING = 12
     * }
     */
    public static int CORRIDOR_T_CROSSING() {
        return CORRIDOR_T_CROSSING;
    }
    private static final int CORRIDOR_NETHER_WART = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CORRIDOR_NETHER_WART = 13
     * }
     */
    public static int CORRIDOR_NETHER_WART() {
        return CORRIDOR_NETHER_WART;
    }
    private static final int FORTRESS_END = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FORTRESS_END = 14
     * }
     */
    public static int FORTRESS_END() {
        return FORTRESS_END;
    }
    private static final int PIECE_COUNT = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PIECE_COUNT = 15
     * }
     */
    public static int PIECE_COUNT() {
        return PIECE_COUNT;
    }

    private static class getFixedEndGateways {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getFixedEndGateways");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void getFixedEndGateways(int mc, uint64_t seed, Pos src[20])
     * }
     */
    public static FunctionDescriptor getFixedEndGateways$descriptor() {
        return getFixedEndGateways.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void getFixedEndGateways(int mc, uint64_t seed, Pos src[20])
     * }
     */
    public static MethodHandle getFixedEndGateways$handle() {
        return getFixedEndGateways.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void getFixedEndGateways(int mc, uint64_t seed, Pos src[20])
     * }
     */
    public static MemorySegment getFixedEndGateways$address() {
        return getFixedEndGateways.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void getFixedEndGateways(int mc, uint64_t seed, Pos src[20])
     * }
     */
    public static void getFixedEndGateways(int mc, long seed, MemorySegment src) {
        var mh$ = getFixedEndGateways.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getFixedEndGateways", mc, seed, src);
            }
            mh$.invokeExact(mc, seed, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getLinkedGatewayChunk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Pos.layout(),
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Pos.layout(),
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getLinkedGatewayChunk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Pos getLinkedGatewayChunk(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, Pos src, Pos *dst)
     * }
     */
    public static FunctionDescriptor getLinkedGatewayChunk$descriptor() {
        return getLinkedGatewayChunk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Pos getLinkedGatewayChunk(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, Pos src, Pos *dst)
     * }
     */
    public static MethodHandle getLinkedGatewayChunk$handle() {
        return getLinkedGatewayChunk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Pos getLinkedGatewayChunk(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, Pos src, Pos *dst)
     * }
     */
    public static MemorySegment getLinkedGatewayChunk$address() {
        return getLinkedGatewayChunk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Pos getLinkedGatewayChunk(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, Pos src, Pos *dst)
     * }
     */
    public static MemorySegment getLinkedGatewayChunk(SegmentAllocator allocator, MemorySegment en, MemorySegment sn, long seed, MemorySegment src, MemorySegment dst) {
        var mh$ = getLinkedGatewayChunk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getLinkedGatewayChunk", allocator, en, sn, seed, src, dst);
            }
            return (MemorySegment)mh$.invokeExact(allocator, en, sn, seed, src, dst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getLinkedGatewayPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Pos.layout(),
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Pos.layout()
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getLinkedGatewayPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Pos getLinkedGatewayPos(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, Pos src)
     * }
     */
    public static FunctionDescriptor getLinkedGatewayPos$descriptor() {
        return getLinkedGatewayPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Pos getLinkedGatewayPos(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, Pos src)
     * }
     */
    public static MethodHandle getLinkedGatewayPos$handle() {
        return getLinkedGatewayPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Pos getLinkedGatewayPos(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, Pos src)
     * }
     */
    public static MemorySegment getLinkedGatewayPos$address() {
        return getLinkedGatewayPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Pos getLinkedGatewayPos(const EndNoise *en, const SurfaceNoise *sn, uint64_t seed, Pos src)
     * }
     */
    public static MemorySegment getLinkedGatewayPos(SegmentAllocator allocator, MemorySegment en, MemorySegment sn, long seed, MemorySegment src) {
        var mh$ = getLinkedGatewayPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getLinkedGatewayPos", allocator, en, sn, seed, src);
            }
            return (MemorySegment)mh$.invokeExact(allocator, en, sn, seed, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HouseSmall = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HouseSmall = 0
     * }
     */
    public static int HouseSmall() {
        return HouseSmall;
    }
    private static final int Church = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Church = 1
     * }
     */
    public static int Church() {
        return Church;
    }
    private static final int Library = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Library = 2
     * }
     */
    public static int Library() {
        return Library;
    }
    private static final int WoodHut = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.WoodHut = 3
     * }
     */
    public static int WoodHut() {
        return WoodHut;
    }
    private static final int Butcher = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Butcher = 4
     * }
     */
    public static int Butcher() {
        return Butcher;
    }
    private static final int FarmLarge = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FarmLarge = 5
     * }
     */
    public static int FarmLarge() {
        return FarmLarge;
    }
    private static final int FarmSmall = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FarmSmall = 6
     * }
     */
    public static int FarmSmall() {
        return FarmSmall;
    }
    private static final int Blacksmith = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Blacksmith = 7
     * }
     */
    public static int Blacksmith() {
        return Blacksmith;
    }
    private static final int HouseLarge = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HouseLarge = 8
     * }
     */
    public static int HouseLarge() {
        return HouseLarge;
    }
    private static final int HOUSE_NUM = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HOUSE_NUM = 9
     * }
     */
    public static int HOUSE_NUM() {
        return HOUSE_NUM;
    }

    private static class getHouseList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getHouseList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t getHouseList(int *houses, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static FunctionDescriptor getHouseList$descriptor() {
        return getHouseList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t getHouseList(int *houses, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static MethodHandle getHouseList$handle() {
        return getHouseList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint64_t getHouseList(int *houses, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static MemorySegment getHouseList$address() {
        return getHouseList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint64_t getHouseList(int *houses, uint64_t seed, int chunkX, int chunkZ)
     * }
     */
    public static long getHouseList(MemorySegment houses, long seed, int chunkX, int chunkZ) {
        var mh$ = getHouseList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getHouseList", houses, seed, chunkX, chunkZ);
            }
            return (long)mh$.invokeExact(houses, seed, chunkX, chunkZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class monteCarloBiomes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Range.layout(),
            Cubiomes.C_POINTER,
            Cubiomes.C_DOUBLE,
            Cubiomes.C_DOUBLE,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("monteCarloBiomes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int monteCarloBiomes(Generator *g, Range r, uint64_t *rng, double coverage, double confidence, int (*eval)(Generator *, int, int, int, int, void *), void *data)
     * }
     */
    public static FunctionDescriptor monteCarloBiomes$descriptor() {
        return monteCarloBiomes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int monteCarloBiomes(Generator *g, Range r, uint64_t *rng, double coverage, double confidence, int (*eval)(Generator *, int, int, int, int, void *), void *data)
     * }
     */
    public static MethodHandle monteCarloBiomes$handle() {
        return monteCarloBiomes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int monteCarloBiomes(Generator *g, Range r, uint64_t *rng, double coverage, double confidence, int (*eval)(Generator *, int, int, int, int, void *), void *data)
     * }
     */
    public static MemorySegment monteCarloBiomes$address() {
        return monteCarloBiomes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int monteCarloBiomes(Generator *g, Range r, uint64_t *rng, double coverage, double confidence, int (*eval)(Generator *, int, int, int, int, void *), void *data)
     * }
     */
    public static int monteCarloBiomes(MemorySegment g, MemorySegment r, MemorySegment rng, double coverage, double confidence, MemorySegment eval, MemorySegment data) {
        var mh$ = monteCarloBiomes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("monteCarloBiomes", g, r, rng, coverage, confidence, eval, data);
            }
            return (int)mh$.invokeExact(g, r, rng, coverage, confidence, eval, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setupBiomeFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("setupBiomeFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setupBiomeFilter(BiomeFilter *bf, int mc, uint32_t flags, const int *required, int requiredLen, const int *excluded, int excludedLen, const int *matchany, int matchanyLen)
     * }
     */
    public static FunctionDescriptor setupBiomeFilter$descriptor() {
        return setupBiomeFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setupBiomeFilter(BiomeFilter *bf, int mc, uint32_t flags, const int *required, int requiredLen, const int *excluded, int excludedLen, const int *matchany, int matchanyLen)
     * }
     */
    public static MethodHandle setupBiomeFilter$handle() {
        return setupBiomeFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setupBiomeFilter(BiomeFilter *bf, int mc, uint32_t flags, const int *required, int requiredLen, const int *excluded, int excludedLen, const int *matchany, int matchanyLen)
     * }
     */
    public static MemorySegment setupBiomeFilter$address() {
        return setupBiomeFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setupBiomeFilter(BiomeFilter *bf, int mc, uint32_t flags, const int *required, int requiredLen, const int *excluded, int excludedLen, const int *matchany, int matchanyLen)
     * }
     */
    public static void setupBiomeFilter(MemorySegment bf, int mc, int flags, MemorySegment required, int requiredLen, MemorySegment excluded, int excludedLen, MemorySegment matchany, int matchanyLen) {
        var mh$ = setupBiomeFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setupBiomeFilter", bf, mc, flags, required, requiredLen, excluded, excludedLen, matchany, matchanyLen);
            }
            mh$.invokeExact(bf, mc, flags, required, requiredLen, excluded, excludedLen, matchany, matchanyLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class checkForBiomes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Range.layout(),
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("checkForBiomes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int checkForBiomes(Generator *g, int *cache, Range r, int dim, uint64_t seed, const BiomeFilter *filter, volatile char *stop)
     * }
     */
    public static FunctionDescriptor checkForBiomes$descriptor() {
        return checkForBiomes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int checkForBiomes(Generator *g, int *cache, Range r, int dim, uint64_t seed, const BiomeFilter *filter, volatile char *stop)
     * }
     */
    public static MethodHandle checkForBiomes$handle() {
        return checkForBiomes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int checkForBiomes(Generator *g, int *cache, Range r, int dim, uint64_t seed, const BiomeFilter *filter, volatile char *stop)
     * }
     */
    public static MemorySegment checkForBiomes$address() {
        return checkForBiomes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int checkForBiomes(Generator *g, int *cache, Range r, int dim, uint64_t seed, const BiomeFilter *filter, volatile char *stop)
     * }
     */
    public static int checkForBiomes(MemorySegment g, MemorySegment cache, MemorySegment r, int dim, long seed, MemorySegment filter, MemorySegment stop) {
        var mh$ = checkForBiomes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("checkForBiomes", g, cache, r, dim, seed, filter, stop);
            }
            return (int)mh$.invokeExact(g, cache, r, dim, seed, filter, stop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class checkForBiomesAtLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("checkForBiomesAtLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int checkForBiomesAtLayer(LayerStack *ls, Layer *entry, int *cache, uint64_t seed, int x, int z, unsigned int w, unsigned int h, const BiomeFilter *filter)
     * }
     */
    public static FunctionDescriptor checkForBiomesAtLayer$descriptor() {
        return checkForBiomesAtLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int checkForBiomesAtLayer(LayerStack *ls, Layer *entry, int *cache, uint64_t seed, int x, int z, unsigned int w, unsigned int h, const BiomeFilter *filter)
     * }
     */
    public static MethodHandle checkForBiomesAtLayer$handle() {
        return checkForBiomesAtLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int checkForBiomesAtLayer(LayerStack *ls, Layer *entry, int *cache, uint64_t seed, int x, int z, unsigned int w, unsigned int h, const BiomeFilter *filter)
     * }
     */
    public static MemorySegment checkForBiomesAtLayer$address() {
        return checkForBiomesAtLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int checkForBiomesAtLayer(LayerStack *ls, Layer *entry, int *cache, uint64_t seed, int x, int z, unsigned int w, unsigned int h, const BiomeFilter *filter)
     * }
     */
    public static int checkForBiomesAtLayer(MemorySegment ls, MemorySegment entry, MemorySegment cache, long seed, int x, int z, int w, int h, MemorySegment filter) {
        var mh$ = checkForBiomesAtLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("checkForBiomesAtLayer", ls, entry, cache, seed, x, z, w, h, filter);
            }
            return (int)mh$.invokeExact(ls, entry, cache, seed, x, z, w, h, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class checkForTemps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("checkForTemps");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int checkForTemps(LayerStack *g, uint64_t seed, int x, int z, int w, int h, const int tc[9])
     * }
     */
    public static FunctionDescriptor checkForTemps$descriptor() {
        return checkForTemps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int checkForTemps(LayerStack *g, uint64_t seed, int x, int z, int w, int h, const int tc[9])
     * }
     */
    public static MethodHandle checkForTemps$handle() {
        return checkForTemps.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int checkForTemps(LayerStack *g, uint64_t seed, int x, int z, int w, int h, const int tc[9])
     * }
     */
    public static MemorySegment checkForTemps$address() {
        return checkForTemps.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int checkForTemps(LayerStack *g, uint64_t seed, int x, int z, int w, int h, const int tc[9])
     * }
     */
    public static int checkForTemps(MemorySegment g, long seed, int x, int z, int w, int h, MemorySegment tc) {
        var mh$ = checkForTemps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("checkForTemps", g, seed, x, z, w, h, tc);
            }
            return (int)mh$.invokeExact(g, seed, x, z, w, h, tc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getBiomeCenters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Range.layout(),
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getBiomeCenters");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getBiomeCenters(Pos *pos, int *siz, int nmax, Generator *g, Range r, int match, int minsiz, int tol, volatile char *stop)
     * }
     */
    public static FunctionDescriptor getBiomeCenters$descriptor() {
        return getBiomeCenters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getBiomeCenters(Pos *pos, int *siz, int nmax, Generator *g, Range r, int match, int minsiz, int tol, volatile char *stop)
     * }
     */
    public static MethodHandle getBiomeCenters$handle() {
        return getBiomeCenters.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getBiomeCenters(Pos *pos, int *siz, int nmax, Generator *g, Range r, int match, int minsiz, int tol, volatile char *stop)
     * }
     */
    public static MemorySegment getBiomeCenters$address() {
        return getBiomeCenters.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getBiomeCenters(Pos *pos, int *siz, int nmax, Generator *g, Range r, int match, int minsiz, int tol, volatile char *stop)
     * }
     */
    public static int getBiomeCenters(MemorySegment pos, MemorySegment siz, int nmax, MemorySegment g, MemorySegment r, int match, int minsiz, int tol, MemorySegment stop) {
        var mh$ = getBiomeCenters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getBiomeCenters", pos, siz, nmax, g, r, match, minsiz, tol, stop);
            }
            return (int)mh$.invokeExact(pos, siz, nmax, g, r, match, minsiz, tol, stop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class canBiomeGenerate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("canBiomeGenerate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int canBiomeGenerate(int layerId, int mc, uint32_t flags, int biomeID)
     * }
     */
    public static FunctionDescriptor canBiomeGenerate$descriptor() {
        return canBiomeGenerate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int canBiomeGenerate(int layerId, int mc, uint32_t flags, int biomeID)
     * }
     */
    public static MethodHandle canBiomeGenerate$handle() {
        return canBiomeGenerate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int canBiomeGenerate(int layerId, int mc, uint32_t flags, int biomeID)
     * }
     */
    public static MemorySegment canBiomeGenerate$address() {
        return canBiomeGenerate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int canBiomeGenerate(int layerId, int mc, uint32_t flags, int biomeID)
     * }
     */
    public static int canBiomeGenerate(int layerId, int mc, int flags, int biomeID) {
        var mh$ = canBiomeGenerate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("canBiomeGenerate", layerId, mc, flags, biomeID);
            }
            return (int)mh$.invokeExact(layerId, mc, flags, biomeID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class genPotential {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("genPotential");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void genPotential(uint64_t *mL, uint64_t *mM, int layerId, int mc, uint32_t flags, int biomeID)
     * }
     */
    public static FunctionDescriptor genPotential$descriptor() {
        return genPotential.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void genPotential(uint64_t *mL, uint64_t *mM, int layerId, int mc, uint32_t flags, int biomeID)
     * }
     */
    public static MethodHandle genPotential$handle() {
        return genPotential.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void genPotential(uint64_t *mL, uint64_t *mM, int layerId, int mc, uint32_t flags, int biomeID)
     * }
     */
    public static MemorySegment genPotential$address() {
        return genPotential.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void genPotential(uint64_t *mL, uint64_t *mM, int layerId, int mc, uint32_t flags, int biomeID)
     * }
     */
    public static void genPotential(MemorySegment mL, MemorySegment mM, int layerId, int mc, int flags, int biomeID) {
        var mh$ = genPotential.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("genPotential", mL, mM, layerId, mc, flags, biomeID);
            }
            mh$.invokeExact(mL, mM, layerId, mc, flags, biomeID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getAvailableBiomes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getAvailableBiomes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void getAvailableBiomes(uint64_t *mL, uint64_t *mM, int layerId, int mc, uint32_t flags)
     * }
     */
    public static FunctionDescriptor getAvailableBiomes$descriptor() {
        return getAvailableBiomes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void getAvailableBiomes(uint64_t *mL, uint64_t *mM, int layerId, int mc, uint32_t flags)
     * }
     */
    public static MethodHandle getAvailableBiomes$handle() {
        return getAvailableBiomes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void getAvailableBiomes(uint64_t *mL, uint64_t *mM, int layerId, int mc, uint32_t flags)
     * }
     */
    public static MemorySegment getAvailableBiomes$address() {
        return getAvailableBiomes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void getAvailableBiomes(uint64_t *mL, uint64_t *mM, int layerId, int mc, uint32_t flags)
     * }
     */
    public static void getAvailableBiomes(MemorySegment mL, MemorySegment mM, int layerId, int mc, int flags) {
        var mh$ = getAvailableBiomes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getAvailableBiomes", mL, mM, layerId, mc, flags);
            }
            mh$.invokeExact(mL, mM, layerId, mc, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getParaDescent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_DOUBLE,
            Cubiomes.C_POINTER,
            Cubiomes.C_DOUBLE,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_DOUBLE,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getParaDescent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double getParaDescent(const DoublePerlinNoise *para, double factor, int x, int z, int w, int h, int i0, int j0, int maxrad, int maxiter, double alpha, void *data, int (*func)(void *, int, int, double))
     * }
     */
    public static FunctionDescriptor getParaDescent$descriptor() {
        return getParaDescent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double getParaDescent(const DoublePerlinNoise *para, double factor, int x, int z, int w, int h, int i0, int j0, int maxrad, int maxiter, double alpha, void *data, int (*func)(void *, int, int, double))
     * }
     */
    public static MethodHandle getParaDescent$handle() {
        return getParaDescent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double getParaDescent(const DoublePerlinNoise *para, double factor, int x, int z, int w, int h, int i0, int j0, int maxrad, int maxiter, double alpha, void *data, int (*func)(void *, int, int, double))
     * }
     */
    public static MemorySegment getParaDescent$address() {
        return getParaDescent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double getParaDescent(const DoublePerlinNoise *para, double factor, int x, int z, int w, int h, int i0, int j0, int maxrad, int maxiter, double alpha, void *data, int (*func)(void *, int, int, double))
     * }
     */
    public static double getParaDescent(MemorySegment para, double factor, int x, int z, int w, int h, int i0, int j0, int maxrad, int maxiter, double alpha, MemorySegment data, MemorySegment func) {
        var mh$ = getParaDescent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getParaDescent", para, factor, x, z, w, h, i0, j0, maxrad, maxiter, alpha, data, func);
            }
            return (double)mh$.invokeExact(para, factor, x, z, w, h, i0, j0, maxrad, maxiter, alpha, data, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getParaRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getParaRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getParaRange(const DoublePerlinNoise *para, double *pmin, double *pmax, int x, int z, int w, int h, void *data, int (*func)(void *, int, int, double))
     * }
     */
    public static FunctionDescriptor getParaRange$descriptor() {
        return getParaRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getParaRange(const DoublePerlinNoise *para, double *pmin, double *pmax, int x, int z, int w, int h, void *data, int (*func)(void *, int, int, double))
     * }
     */
    public static MethodHandle getParaRange$handle() {
        return getParaRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getParaRange(const DoublePerlinNoise *para, double *pmin, double *pmax, int x, int z, int w, int h, void *data, int (*func)(void *, int, int, double))
     * }
     */
    public static MemorySegment getParaRange$address() {
        return getParaRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getParaRange(const DoublePerlinNoise *para, double *pmin, double *pmax, int x, int z, int w, int h, void *data, int (*func)(void *, int, int, double))
     * }
     */
    public static int getParaRange(MemorySegment para, MemorySegment pmin, MemorySegment pmax, int x, int z, int w, int h, MemorySegment data, MemorySegment func) {
        var mh$ = getParaRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getParaRange", para, pmin, pmax, x, z, w, h, data, func);
            }
            return (int)mh$.invokeExact(para, pmin, pmax, x, z, w, h, data, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getBiomeParaExtremes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getBiomeParaExtremes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const int *getBiomeParaExtremes(int mc)
     * }
     */
    public static FunctionDescriptor getBiomeParaExtremes$descriptor() {
        return getBiomeParaExtremes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const int *getBiomeParaExtremes(int mc)
     * }
     */
    public static MethodHandle getBiomeParaExtremes$handle() {
        return getBiomeParaExtremes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const int *getBiomeParaExtremes(int mc)
     * }
     */
    public static MemorySegment getBiomeParaExtremes$address() {
        return getBiomeParaExtremes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const int *getBiomeParaExtremes(int mc)
     * }
     */
    public static MemorySegment getBiomeParaExtremes(int mc) {
        var mh$ = getBiomeParaExtremes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getBiomeParaExtremes", mc);
            }
            return (MemorySegment)mh$.invokeExact(mc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getBiomeParaLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getBiomeParaLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const int *getBiomeParaLimits(int mc, int id)
     * }
     */
    public static FunctionDescriptor getBiomeParaLimits$descriptor() {
        return getBiomeParaLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const int *getBiomeParaLimits(int mc, int id)
     * }
     */
    public static MethodHandle getBiomeParaLimits$handle() {
        return getBiomeParaLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const int *getBiomeParaLimits(int mc, int id)
     * }
     */
    public static MemorySegment getBiomeParaLimits$address() {
        return getBiomeParaLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const int *getBiomeParaLimits(int mc, int id)
     * }
     */
    public static MemorySegment getBiomeParaLimits(int mc, int id) {
        var mh$ = getBiomeParaLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getBiomeParaLimits", mc, id);
            }
            return (MemorySegment)mh$.invokeExact(mc, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getPossibleBiomesForLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getPossibleBiomesForLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void getPossibleBiomesForLimits(char ids[256], int mc, int limits[6][2])
     * }
     */
    public static FunctionDescriptor getPossibleBiomesForLimits$descriptor() {
        return getPossibleBiomesForLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void getPossibleBiomesForLimits(char ids[256], int mc, int limits[6][2])
     * }
     */
    public static MethodHandle getPossibleBiomesForLimits$handle() {
        return getPossibleBiomesForLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void getPossibleBiomesForLimits(char ids[256], int mc, int limits[6][2])
     * }
     */
    public static MemorySegment getPossibleBiomesForLimits$address() {
        return getPossibleBiomesForLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void getPossibleBiomesForLimits(char ids[256], int mc, int limits[6][2])
     * }
     */
    public static void getPossibleBiomesForLimits(MemorySegment ids, int mc, MemorySegment limits) {
        var mh$ = getPossibleBiomesForLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getPossibleBiomesForLimits", ids, mc, limits);
            }
            mh$.invokeExact(ids, mc, limits);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getLargestRec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getLargestRec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getLargestRec(int match, const int *ids, int sx, int sz, Pos *p0, Pos *p1)
     * }
     */
    public static FunctionDescriptor getLargestRec$descriptor() {
        return getLargestRec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getLargestRec(int match, const int *ids, int sx, int sz, Pos *p0, Pos *p1)
     * }
     */
    public static MethodHandle getLargestRec$handle() {
        return getLargestRec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getLargestRec(int match, const int *ids, int sx, int sz, Pos *p0, Pos *p1)
     * }
     */
    public static MemorySegment getLargestRec$address() {
        return getLargestRec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getLargestRec(int match, const int *ids, int sx, int sz, Pos *p0, Pos *p1)
     * }
     */
    public static int getLargestRec(int match, MemorySegment ids, int sx, int sz, MemorySegment p0, MemorySegment p1) {
        var mh$ = getLargestRec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getLargestRec", match, ids, sx, sz, p0, p1);
            }
            return (int)mh$.invokeExact(match, ids, sx, sz, p0, p1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __acrt_iob_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__acrt_iob_func");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *__acrt_iob_func(unsigned int _Ix)
     * }
     */
    public static FunctionDescriptor __acrt_iob_func$descriptor() {
        return __acrt_iob_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *__acrt_iob_func(unsigned int _Ix)
     * }
     */
    public static MethodHandle __acrt_iob_func$handle() {
        return __acrt_iob_func.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *__acrt_iob_func(unsigned int _Ix)
     * }
     */
    public static MemorySegment __acrt_iob_func$address() {
        return __acrt_iob_func.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *__acrt_iob_func(unsigned int _Ix)
     * }
     */
    public static MemorySegment __acrt_iob_func(int _Ix) {
        var mh$ = __acrt_iob_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__acrt_iob_func", _Ix);
            }
            return (MemorySegment)mh$.invokeExact(_Ix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetwc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fgetwc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t fgetwc(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fgetwc$descriptor() {
        return fgetwc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t fgetwc(FILE *_Stream)
     * }
     */
    public static MethodHandle fgetwc$handle() {
        return fgetwc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t fgetwc(FILE *_Stream)
     * }
     */
    public static MemorySegment fgetwc$address() {
        return fgetwc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t fgetwc(FILE *_Stream)
     * }
     */
    public static short fgetwc(MemorySegment _Stream) {
        var mh$ = fgetwc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetwc", _Stream);
            }
            return (short)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fgetwchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fgetwchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t _fgetwchar()
     * }
     */
    public static FunctionDescriptor _fgetwchar$descriptor() {
        return _fgetwchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t _fgetwchar()
     * }
     */
    public static MethodHandle _fgetwchar$handle() {
        return _fgetwchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t _fgetwchar()
     * }
     */
    public static MemorySegment _fgetwchar$address() {
        return _fgetwchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t _fgetwchar()
     * }
     */
    public static short _fgetwchar() {
        var mh$ = _fgetwchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fgetwchar");
            }
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputwc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_SHORT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fputwc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t fputwc(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fputwc$descriptor() {
        return fputwc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t fputwc(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle fputwc$handle() {
        return fputwc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t fputwc(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment fputwc$address() {
        return fputwc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t fputwc(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static short fputwc(short _Character, MemorySegment _Stream) {
        var mh$ = fputwc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputwc", _Character, _Stream);
            }
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fputwchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_SHORT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fputwchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t _fputwchar(wchar_t _Character)
     * }
     */
    public static FunctionDescriptor _fputwchar$descriptor() {
        return _fputwchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t _fputwchar(wchar_t _Character)
     * }
     */
    public static MethodHandle _fputwchar$handle() {
        return _fputwchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t _fputwchar(wchar_t _Character)
     * }
     */
    public static MemorySegment _fputwchar$address() {
        return _fputwchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t _fputwchar(wchar_t _Character)
     * }
     */
    public static short _fputwchar(short _Character) {
        var mh$ = _fputwchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fputwchar", _Character);
            }
            return (short)mh$.invokeExact(_Character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getwc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getwc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t getwc(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor getwc$descriptor() {
        return getwc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t getwc(FILE *_Stream)
     * }
     */
    public static MethodHandle getwc$handle() {
        return getwc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t getwc(FILE *_Stream)
     * }
     */
    public static MemorySegment getwc$address() {
        return getwc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t getwc(FILE *_Stream)
     * }
     */
    public static short getwc(MemorySegment _Stream) {
        var mh$ = getwc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getwc", _Stream);
            }
            return (short)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getwchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getwchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t getwchar()
     * }
     */
    public static FunctionDescriptor getwchar$descriptor() {
        return getwchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t getwchar()
     * }
     */
    public static MethodHandle getwchar$handle() {
        return getwchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t getwchar()
     * }
     */
    public static MemorySegment getwchar$address() {
        return getwchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t getwchar()
     * }
     */
    public static short getwchar() {
        var mh$ = getwchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getwchar");
            }
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetws {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fgetws");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *fgetws(wchar_t *_Buffer, int _BufferCount, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fgetws$descriptor() {
        return fgetws.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *fgetws(wchar_t *_Buffer, int _BufferCount, FILE *_Stream)
     * }
     */
    public static MethodHandle fgetws$handle() {
        return fgetws.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *fgetws(wchar_t *_Buffer, int _BufferCount, FILE *_Stream)
     * }
     */
    public static MemorySegment fgetws$address() {
        return fgetws.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *fgetws(wchar_t *_Buffer, int _BufferCount, FILE *_Stream)
     * }
     */
    public static MemorySegment fgetws(MemorySegment _Buffer, int _BufferCount, MemorySegment _Stream) {
        var mh$ = fgetws.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetws", _Buffer, _BufferCount, _Stream);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer, _BufferCount, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputws {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fputws");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fputws(const wchar_t *_Buffer, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fputws$descriptor() {
        return fputws.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fputws(const wchar_t *_Buffer, FILE *_Stream)
     * }
     */
    public static MethodHandle fputws$handle() {
        return fputws.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fputws(const wchar_t *_Buffer, FILE *_Stream)
     * }
     */
    public static MemorySegment fputws$address() {
        return fputws.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fputws(const wchar_t *_Buffer, FILE *_Stream)
     * }
     */
    public static int fputws(MemorySegment _Buffer, MemorySegment _Stream) {
        var mh$ = fputws.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputws", _Buffer, _Stream);
            }
            return (int)mh$.invokeExact(_Buffer, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _getws_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_getws_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_getws_s(wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _getws_s$descriptor() {
        return _getws_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_getws_s(wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static MethodHandle _getws_s$handle() {
        return _getws_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_getws_s(wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static MemorySegment _getws_s$address() {
        return _getws_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_getws_s(wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static MemorySegment _getws_s(MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _getws_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_getws_s", _Buffer, _BufferCount);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putwc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_SHORT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("putwc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t putwc(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor putwc$descriptor() {
        return putwc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t putwc(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle putwc$handle() {
        return putwc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t putwc(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment putwc$address() {
        return putwc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t putwc(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static short putwc(short _Character, MemorySegment _Stream) {
        var mh$ = putwc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putwc", _Character, _Stream);
            }
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putwchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_SHORT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("putwchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t putwchar(wchar_t _Character)
     * }
     */
    public static FunctionDescriptor putwchar$descriptor() {
        return putwchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t putwchar(wchar_t _Character)
     * }
     */
    public static MethodHandle putwchar$handle() {
        return putwchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t putwchar(wchar_t _Character)
     * }
     */
    public static MemorySegment putwchar$address() {
        return putwchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t putwchar(wchar_t _Character)
     * }
     */
    public static short putwchar(short _Character) {
        var mh$ = putwchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putwchar", _Character);
            }
            return (short)mh$.invokeExact(_Character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _putws {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_putws");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _putws(const wchar_t *_Buffer)
     * }
     */
    public static FunctionDescriptor _putws$descriptor() {
        return _putws.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _putws(const wchar_t *_Buffer)
     * }
     */
    public static MethodHandle _putws$handle() {
        return _putws.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _putws(const wchar_t *_Buffer)
     * }
     */
    public static MemorySegment _putws$address() {
        return _putws.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _putws(const wchar_t *_Buffer)
     * }
     */
    public static int _putws(MemorySegment _Buffer) {
        var mh$ = _putws.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_putws", _Buffer);
            }
            return (int)mh$.invokeExact(_Buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ungetwc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_SHORT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("ungetwc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t ungetwc(wint_t _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor ungetwc$descriptor() {
        return ungetwc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t ungetwc(wint_t _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle ungetwc$handle() {
        return ungetwc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t ungetwc(wint_t _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment ungetwc$address() {
        return ungetwc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t ungetwc(wint_t _Character, FILE *_Stream)
     * }
     */
    public static short ungetwc(short _Character, MemorySegment _Stream) {
        var mh$ = ungetwc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ungetwc", _Character, _Stream);
            }
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wfdopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_wfdopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *_wfdopen(int _FileHandle, const wchar_t *_Mode)
     * }
     */
    public static FunctionDescriptor _wfdopen$descriptor() {
        return _wfdopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *_wfdopen(int _FileHandle, const wchar_t *_Mode)
     * }
     */
    public static MethodHandle _wfdopen$handle() {
        return _wfdopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *_wfdopen(int _FileHandle, const wchar_t *_Mode)
     * }
     */
    public static MemorySegment _wfdopen$address() {
        return _wfdopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *_wfdopen(int _FileHandle, const wchar_t *_Mode)
     * }
     */
    public static MemorySegment _wfdopen(int _FileHandle, MemorySegment _Mode) {
        var mh$ = _wfdopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wfdopen", _FileHandle, _Mode);
            }
            return (MemorySegment)mh$.invokeExact(_FileHandle, _Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wfopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_wfopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *_wfopen(const wchar_t *_FileName, const wchar_t *_Mode)
     * }
     */
    public static FunctionDescriptor _wfopen$descriptor() {
        return _wfopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *_wfopen(const wchar_t *_FileName, const wchar_t *_Mode)
     * }
     */
    public static MethodHandle _wfopen$handle() {
        return _wfopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *_wfopen(const wchar_t *_FileName, const wchar_t *_Mode)
     * }
     */
    public static MemorySegment _wfopen$address() {
        return _wfopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *_wfopen(const wchar_t *_FileName, const wchar_t *_Mode)
     * }
     */
    public static MemorySegment _wfopen(MemorySegment _FileName, MemorySegment _Mode) {
        var mh$ = _wfopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wfopen", _FileName, _Mode);
            }
            return (MemorySegment)mh$.invokeExact(_FileName, _Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wfopen_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_wfopen_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wfopen_s(FILE **_Stream, const wchar_t *_FileName, const wchar_t *_Mode)
     * }
     */
    public static FunctionDescriptor _wfopen_s$descriptor() {
        return _wfopen_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wfopen_s(FILE **_Stream, const wchar_t *_FileName, const wchar_t *_Mode)
     * }
     */
    public static MethodHandle _wfopen_s$handle() {
        return _wfopen_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wfopen_s(FILE **_Stream, const wchar_t *_FileName, const wchar_t *_Mode)
     * }
     */
    public static MemorySegment _wfopen_s$address() {
        return _wfopen_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wfopen_s(FILE **_Stream, const wchar_t *_FileName, const wchar_t *_Mode)
     * }
     */
    public static int _wfopen_s(MemorySegment _Stream, MemorySegment _FileName, MemorySegment _Mode) {
        var mh$ = _wfopen_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wfopen_s", _Stream, _FileName, _Mode);
            }
            return (int)mh$.invokeExact(_Stream, _FileName, _Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wfreopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_wfreopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *_wfreopen(const wchar_t *_FileName, const wchar_t *_Mode, FILE *_OldStream)
     * }
     */
    public static FunctionDescriptor _wfreopen$descriptor() {
        return _wfreopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *_wfreopen(const wchar_t *_FileName, const wchar_t *_Mode, FILE *_OldStream)
     * }
     */
    public static MethodHandle _wfreopen$handle() {
        return _wfreopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *_wfreopen(const wchar_t *_FileName, const wchar_t *_Mode, FILE *_OldStream)
     * }
     */
    public static MemorySegment _wfreopen$address() {
        return _wfreopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *_wfreopen(const wchar_t *_FileName, const wchar_t *_Mode, FILE *_OldStream)
     * }
     */
    public static MemorySegment _wfreopen(MemorySegment _FileName, MemorySegment _Mode, MemorySegment _OldStream) {
        var mh$ = _wfreopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wfreopen", _FileName, _Mode, _OldStream);
            }
            return (MemorySegment)mh$.invokeExact(_FileName, _Mode, _OldStream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wfreopen_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_wfreopen_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wfreopen_s(FILE **_Stream, const wchar_t *_FileName, const wchar_t *_Mode, FILE *_OldStream)
     * }
     */
    public static FunctionDescriptor _wfreopen_s$descriptor() {
        return _wfreopen_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wfreopen_s(FILE **_Stream, const wchar_t *_FileName, const wchar_t *_Mode, FILE *_OldStream)
     * }
     */
    public static MethodHandle _wfreopen_s$handle() {
        return _wfreopen_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wfreopen_s(FILE **_Stream, const wchar_t *_FileName, const wchar_t *_Mode, FILE *_OldStream)
     * }
     */
    public static MemorySegment _wfreopen_s$address() {
        return _wfreopen_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wfreopen_s(FILE **_Stream, const wchar_t *_FileName, const wchar_t *_Mode, FILE *_OldStream)
     * }
     */
    public static int _wfreopen_s(MemorySegment _Stream, MemorySegment _FileName, MemorySegment _Mode, MemorySegment _OldStream) {
        var mh$ = _wfreopen_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wfreopen_s", _Stream, _FileName, _Mode, _OldStream);
            }
            return (int)mh$.invokeExact(_Stream, _FileName, _Mode, _OldStream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wfsopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_wfsopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *_wfsopen(const wchar_t *_FileName, const wchar_t *_Mode, int _ShFlag)
     * }
     */
    public static FunctionDescriptor _wfsopen$descriptor() {
        return _wfsopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *_wfsopen(const wchar_t *_FileName, const wchar_t *_Mode, int _ShFlag)
     * }
     */
    public static MethodHandle _wfsopen$handle() {
        return _wfsopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *_wfsopen(const wchar_t *_FileName, const wchar_t *_Mode, int _ShFlag)
     * }
     */
    public static MemorySegment _wfsopen$address() {
        return _wfsopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *_wfsopen(const wchar_t *_FileName, const wchar_t *_Mode, int _ShFlag)
     * }
     */
    public static MemorySegment _wfsopen(MemorySegment _FileName, MemorySegment _Mode, int _ShFlag) {
        var mh$ = _wfsopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wfsopen", _FileName, _Mode, _ShFlag);
            }
            return (MemorySegment)mh$.invokeExact(_FileName, _Mode, _ShFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wpopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_wpopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *_wpopen(const wchar_t *_Command, const wchar_t *_Mode)
     * }
     */
    public static FunctionDescriptor _wpopen$descriptor() {
        return _wpopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *_wpopen(const wchar_t *_Command, const wchar_t *_Mode)
     * }
     */
    public static MethodHandle _wpopen$handle() {
        return _wpopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *_wpopen(const wchar_t *_Command, const wchar_t *_Mode)
     * }
     */
    public static MemorySegment _wpopen$address() {
        return _wpopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *_wpopen(const wchar_t *_Command, const wchar_t *_Mode)
     * }
     */
    public static MemorySegment _wpopen(MemorySegment _Command, MemorySegment _Mode) {
        var mh$ = _wpopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wpopen", _Command, _Mode);
            }
            return (MemorySegment)mh$.invokeExact(_Command, _Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wremove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_wremove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wremove(const wchar_t *_FileName)
     * }
     */
    public static FunctionDescriptor _wremove$descriptor() {
        return _wremove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wremove(const wchar_t *_FileName)
     * }
     */
    public static MethodHandle _wremove$handle() {
        return _wremove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wremove(const wchar_t *_FileName)
     * }
     */
    public static MemorySegment _wremove$address() {
        return _wremove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wremove(const wchar_t *_FileName)
     * }
     */
    public static int _wremove(MemorySegment _FileName) {
        var mh$ = _wremove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wremove", _FileName);
            }
            return (int)mh$.invokeExact(_FileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtempnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_wtempnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_wtempnam(const wchar_t *_Directory, const wchar_t *_FilePrefix)
     * }
     */
    public static FunctionDescriptor _wtempnam$descriptor() {
        return _wtempnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_wtempnam(const wchar_t *_Directory, const wchar_t *_FilePrefix)
     * }
     */
    public static MethodHandle _wtempnam$handle() {
        return _wtempnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_wtempnam(const wchar_t *_Directory, const wchar_t *_FilePrefix)
     * }
     */
    public static MemorySegment _wtempnam$address() {
        return _wtempnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_wtempnam(const wchar_t *_Directory, const wchar_t *_FilePrefix)
     * }
     */
    public static MemorySegment _wtempnam(MemorySegment _Directory, MemorySegment _FilePrefix) {
        var mh$ = _wtempnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtempnam", _Directory, _FilePrefix);
            }
            return (MemorySegment)mh$.invokeExact(_Directory, _FilePrefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtmpnam_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_wtmpnam_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wtmpnam_s(wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _wtmpnam_s$descriptor() {
        return _wtmpnam_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wtmpnam_s(wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static MethodHandle _wtmpnam_s$handle() {
        return _wtmpnam_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wtmpnam_s(wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static MemorySegment _wtmpnam_s$address() {
        return _wtmpnam_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wtmpnam_s(wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static int _wtmpnam_s(MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _wtmpnam_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtmpnam_s", _Buffer, _BufferCount);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtmpnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_wtmpnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_wtmpnam(wchar_t *_Buffer)
     * }
     */
    public static FunctionDescriptor _wtmpnam$descriptor() {
        return _wtmpnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_wtmpnam(wchar_t *_Buffer)
     * }
     */
    public static MethodHandle _wtmpnam$handle() {
        return _wtmpnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_wtmpnam(wchar_t *_Buffer)
     * }
     */
    public static MemorySegment _wtmpnam$address() {
        return _wtmpnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_wtmpnam(wchar_t *_Buffer)
     * }
     */
    public static MemorySegment _wtmpnam(MemorySegment _Buffer) {
        var mh$ = _wtmpnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtmpnam", _Buffer);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fgetwc_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fgetwc_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t _fgetwc_nolock(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _fgetwc_nolock$descriptor() {
        return _fgetwc_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t _fgetwc_nolock(FILE *_Stream)
     * }
     */
    public static MethodHandle _fgetwc_nolock$handle() {
        return _fgetwc_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t _fgetwc_nolock(FILE *_Stream)
     * }
     */
    public static MemorySegment _fgetwc_nolock$address() {
        return _fgetwc_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t _fgetwc_nolock(FILE *_Stream)
     * }
     */
    public static short _fgetwc_nolock(MemorySegment _Stream) {
        var mh$ = _fgetwc_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fgetwc_nolock", _Stream);
            }
            return (short)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fputwc_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_SHORT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fputwc_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t _fputwc_nolock(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _fputwc_nolock$descriptor() {
        return _fputwc_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t _fputwc_nolock(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle _fputwc_nolock$handle() {
        return _fputwc_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t _fputwc_nolock(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment _fputwc_nolock$address() {
        return _fputwc_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t _fputwc_nolock(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static short _fputwc_nolock(short _Character, MemorySegment _Stream) {
        var mh$ = _fputwc_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fputwc_nolock", _Character, _Stream);
            }
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _getwc_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_getwc_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t _getwc_nolock(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _getwc_nolock$descriptor() {
        return _getwc_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t _getwc_nolock(FILE *_Stream)
     * }
     */
    public static MethodHandle _getwc_nolock$handle() {
        return _getwc_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t _getwc_nolock(FILE *_Stream)
     * }
     */
    public static MemorySegment _getwc_nolock$address() {
        return _getwc_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t _getwc_nolock(FILE *_Stream)
     * }
     */
    public static short _getwc_nolock(MemorySegment _Stream) {
        var mh$ = _getwc_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_getwc_nolock", _Stream);
            }
            return (short)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _putwc_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_SHORT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_putwc_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t _putwc_nolock(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _putwc_nolock$descriptor() {
        return _putwc_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t _putwc_nolock(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle _putwc_nolock$handle() {
        return _putwc_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t _putwc_nolock(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment _putwc_nolock$address() {
        return _putwc_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t _putwc_nolock(wchar_t _Character, FILE *_Stream)
     * }
     */
    public static short _putwc_nolock(short _Character, MemorySegment _Stream) {
        var mh$ = _putwc_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_putwc_nolock", _Character, _Stream);
            }
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ungetwc_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_SHORT,
            Cubiomes.C_SHORT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_ungetwc_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wint_t _ungetwc_nolock(wint_t _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _ungetwc_nolock$descriptor() {
        return _ungetwc_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wint_t _ungetwc_nolock(wint_t _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle _ungetwc_nolock$handle() {
        return _ungetwc_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wint_t _ungetwc_nolock(wint_t _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment _ungetwc_nolock$address() {
        return _ungetwc_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wint_t _ungetwc_nolock(wint_t _Character, FILE *_Stream)
     * }
     */
    public static short _ungetwc_nolock(short _Character, MemorySegment _Stream) {
        var mh$ = _ungetwc_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ungetwc_nolock", _Character, _Stream);
            }
            return (short)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vfwprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vfwprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vfwprintf$descriptor() {
        return __stdio_common_vfwprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vfwprintf$handle() {
        return __stdio_common_vfwprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vfwprintf$address() {
        return __stdio_common_vfwprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vfwprintf(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfwprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vfwprintf", _Options, _Stream, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vfwprintf_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vfwprintf_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf_s(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vfwprintf_s$descriptor() {
        return __stdio_common_vfwprintf_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf_s(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vfwprintf_s$handle() {
        return __stdio_common_vfwprintf_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf_s(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vfwprintf_s$address() {
        return __stdio_common_vfwprintf_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf_s(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vfwprintf_s(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfwprintf_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vfwprintf_s", _Options, _Stream, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vfwprintf_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vfwprintf_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf_p(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vfwprintf_p$descriptor() {
        return __stdio_common_vfwprintf_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf_p(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vfwprintf_p$handle() {
        return __stdio_common_vfwprintf_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf_p(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vfwprintf_p$address() {
        return __stdio_common_vfwprintf_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vfwprintf_p(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vfwprintf_p(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfwprintf_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vfwprintf_p", _Options, _Stream, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vfwscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vfwscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vfwscanf(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vfwscanf$descriptor() {
        return __stdio_common_vfwscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vfwscanf(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vfwscanf$handle() {
        return __stdio_common_vfwscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vfwscanf(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vfwscanf$address() {
        return __stdio_common_vfwscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vfwscanf(unsigned long long _Options, FILE *_Stream, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vfwscanf(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfwscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vfwscanf", _Options, _Stream, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vswprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vswprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vswprintf(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vswprintf$descriptor() {
        return __stdio_common_vswprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vswprintf(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vswprintf$handle() {
        return __stdio_common_vswprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vswprintf(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vswprintf$address() {
        return __stdio_common_vswprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vswprintf(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vswprintf(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vswprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vswprintf", _Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vswprintf_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vswprintf_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vswprintf_s(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vswprintf_s$descriptor() {
        return __stdio_common_vswprintf_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vswprintf_s(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vswprintf_s$handle() {
        return __stdio_common_vswprintf_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vswprintf_s(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vswprintf_s$address() {
        return __stdio_common_vswprintf_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vswprintf_s(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vswprintf_s(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vswprintf_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vswprintf_s", _Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vsnwprintf_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vsnwprintf_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vsnwprintf_s(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, size_t _MaxCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vsnwprintf_s$descriptor() {
        return __stdio_common_vsnwprintf_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vsnwprintf_s(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, size_t _MaxCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vsnwprintf_s$handle() {
        return __stdio_common_vsnwprintf_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vsnwprintf_s(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, size_t _MaxCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vsnwprintf_s$address() {
        return __stdio_common_vsnwprintf_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vsnwprintf_s(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, size_t _MaxCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vsnwprintf_s(long _Options, MemorySegment _Buffer, long _BufferCount, long _MaxCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsnwprintf_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vsnwprintf_s", _Options, _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vswprintf_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vswprintf_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vswprintf_p(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vswprintf_p$descriptor() {
        return __stdio_common_vswprintf_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vswprintf_p(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vswprintf_p$handle() {
        return __stdio_common_vswprintf_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vswprintf_p(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vswprintf_p$address() {
        return __stdio_common_vswprintf_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vswprintf_p(unsigned long long _Options, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vswprintf_p(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vswprintf_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vswprintf_p", _Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vswscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vswscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vswscanf(unsigned long long _Options, const wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vswscanf$descriptor() {
        return __stdio_common_vswscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vswscanf(unsigned long long _Options, const wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vswscanf$handle() {
        return __stdio_common_vswscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vswscanf(unsigned long long _Options, const wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vswscanf$address() {
        return __stdio_common_vswscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vswscanf(unsigned long long _Options, const wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vswscanf(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vswscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vswscanf", _Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long long fpos_t
     * }
     */
    public static final OfLong fpos_t = Cubiomes.C_LONG_LONG;

    private static class _get_stream_buffer_pointers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_get_stream_buffer_pointers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_stream_buffer_pointers(FILE *_Stream, char ***_Base, char ***_Pointer, int **_Count)
     * }
     */
    public static FunctionDescriptor _get_stream_buffer_pointers$descriptor() {
        return _get_stream_buffer_pointers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_stream_buffer_pointers(FILE *_Stream, char ***_Base, char ***_Pointer, int **_Count)
     * }
     */
    public static MethodHandle _get_stream_buffer_pointers$handle() {
        return _get_stream_buffer_pointers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_stream_buffer_pointers(FILE *_Stream, char ***_Base, char ***_Pointer, int **_Count)
     * }
     */
    public static MemorySegment _get_stream_buffer_pointers$address() {
        return _get_stream_buffer_pointers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_stream_buffer_pointers(FILE *_Stream, char ***_Base, char ***_Pointer, int **_Count)
     * }
     */
    public static int _get_stream_buffer_pointers(MemorySegment _Stream, MemorySegment _Base, MemorySegment _Pointer, MemorySegment _Count) {
        var mh$ = _get_stream_buffer_pointers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_stream_buffer_pointers", _Stream, _Base, _Pointer, _Count);
            }
            return (int)mh$.invokeExact(_Stream, _Base, _Pointer, _Count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearerr_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("clearerr_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t clearerr_s(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor clearerr_s$descriptor() {
        return clearerr_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t clearerr_s(FILE *_Stream)
     * }
     */
    public static MethodHandle clearerr_s$handle() {
        return clearerr_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t clearerr_s(FILE *_Stream)
     * }
     */
    public static MemorySegment clearerr_s$address() {
        return clearerr_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t clearerr_s(FILE *_Stream)
     * }
     */
    public static int clearerr_s(MemorySegment _Stream) {
        var mh$ = clearerr_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr_s", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fopen_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fopen_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t fopen_s(FILE **_Stream, const char *_FileName, const char *_Mode)
     * }
     */
    public static FunctionDescriptor fopen_s$descriptor() {
        return fopen_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t fopen_s(FILE **_Stream, const char *_FileName, const char *_Mode)
     * }
     */
    public static MethodHandle fopen_s$handle() {
        return fopen_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t fopen_s(FILE **_Stream, const char *_FileName, const char *_Mode)
     * }
     */
    public static MemorySegment fopen_s$address() {
        return fopen_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t fopen_s(FILE **_Stream, const char *_FileName, const char *_Mode)
     * }
     */
    public static int fopen_s(MemorySegment _Stream, MemorySegment _FileName, MemorySegment _Mode) {
        var mh$ = fopen_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fopen_s", _Stream, _FileName, _Mode);
            }
            return (int)mh$.invokeExact(_Stream, _FileName, _Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fread_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t fread_s(void *_Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fread_s$descriptor() {
        return fread_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t fread_s(void *_Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MethodHandle fread_s$handle() {
        return fread_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t fread_s(void *_Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MemorySegment fread_s$address() {
        return fread_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t fread_s(void *_Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static long fread_s(MemorySegment _Buffer, long _BufferSize, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = fread_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread_s", _Buffer, _BufferSize, _ElementSize, _ElementCount, _Stream);
            }
            return (long)mh$.invokeExact(_Buffer, _BufferSize, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class freopen_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("freopen_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t freopen_s(FILE **_Stream, const char *_FileName, const char *_Mode, FILE *_OldStream)
     * }
     */
    public static FunctionDescriptor freopen_s$descriptor() {
        return freopen_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t freopen_s(FILE **_Stream, const char *_FileName, const char *_Mode, FILE *_OldStream)
     * }
     */
    public static MethodHandle freopen_s$handle() {
        return freopen_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t freopen_s(FILE **_Stream, const char *_FileName, const char *_Mode, FILE *_OldStream)
     * }
     */
    public static MemorySegment freopen_s$address() {
        return freopen_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t freopen_s(FILE **_Stream, const char *_FileName, const char *_Mode, FILE *_OldStream)
     * }
     */
    public static int freopen_s(MemorySegment _Stream, MemorySegment _FileName, MemorySegment _Mode, MemorySegment _OldStream) {
        var mh$ = freopen_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("freopen_s", _Stream, _FileName, _Mode, _OldStream);
            }
            return (int)mh$.invokeExact(_Stream, _FileName, _Mode, _OldStream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("gets_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *gets_s(char *_Buffer, rsize_t _Size)
     * }
     */
    public static FunctionDescriptor gets_s$descriptor() {
        return gets_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *gets_s(char *_Buffer, rsize_t _Size)
     * }
     */
    public static MethodHandle gets_s$handle() {
        return gets_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *gets_s(char *_Buffer, rsize_t _Size)
     * }
     */
    public static MemorySegment gets_s$address() {
        return gets_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *gets_s(char *_Buffer, rsize_t _Size)
     * }
     */
    public static MemorySegment gets_s(MemorySegment _Buffer, long _Size) {
        var mh$ = gets_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets_s", _Buffer, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpfile_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("tmpfile_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t tmpfile_s(FILE **_Stream)
     * }
     */
    public static FunctionDescriptor tmpfile_s$descriptor() {
        return tmpfile_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t tmpfile_s(FILE **_Stream)
     * }
     */
    public static MethodHandle tmpfile_s$handle() {
        return tmpfile_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t tmpfile_s(FILE **_Stream)
     * }
     */
    public static MemorySegment tmpfile_s$address() {
        return tmpfile_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t tmpfile_s(FILE **_Stream)
     * }
     */
    public static int tmpfile_s(MemorySegment _Stream) {
        var mh$ = tmpfile_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpfile_s", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("tmpnam_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t tmpnam_s(char *_Buffer, rsize_t _Size)
     * }
     */
    public static FunctionDescriptor tmpnam_s$descriptor() {
        return tmpnam_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t tmpnam_s(char *_Buffer, rsize_t _Size)
     * }
     */
    public static MethodHandle tmpnam_s$handle() {
        return tmpnam_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t tmpnam_s(char *_Buffer, rsize_t _Size)
     * }
     */
    public static MemorySegment tmpnam_s$address() {
        return tmpnam_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t tmpnam_s(char *_Buffer, rsize_t _Size)
     * }
     */
    public static int tmpnam_s(MemorySegment _Buffer, long _Size) {
        var mh$ = tmpnam_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam_s", _Buffer, _Size);
            }
            return (int)mh$.invokeExact(_Buffer, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearerr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("clearerr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void clearerr(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor clearerr$descriptor() {
        return clearerr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void clearerr(FILE *_Stream)
     * }
     */
    public static MethodHandle clearerr$handle() {
        return clearerr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void clearerr(FILE *_Stream)
     * }
     */
    public static MemorySegment clearerr$address() {
        return clearerr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void clearerr(FILE *_Stream)
     * }
     */
    public static void clearerr(MemorySegment _Stream) {
        var mh$ = clearerr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr", _Stream);
            }
            mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fclose(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fclose$descriptor() {
        return fclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fclose(FILE *_Stream)
     * }
     */
    public static MethodHandle fclose$handle() {
        return fclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fclose(FILE *_Stream)
     * }
     */
    public static MemorySegment fclose$address() {
        return fclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fclose(FILE *_Stream)
     * }
     */
    public static int fclose(MemorySegment _Stream) {
        var mh$ = fclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fclose", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fcloseall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fcloseall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _fcloseall()
     * }
     */
    public static FunctionDescriptor _fcloseall$descriptor() {
        return _fcloseall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _fcloseall()
     * }
     */
    public static MethodHandle _fcloseall$handle() {
        return _fcloseall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _fcloseall()
     * }
     */
    public static MemorySegment _fcloseall$address() {
        return _fcloseall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _fcloseall()
     * }
     */
    public static int _fcloseall() {
        var mh$ = _fcloseall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fcloseall");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fdopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fdopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *_fdopen(int _FileHandle, const char *_Mode)
     * }
     */
    public static FunctionDescriptor _fdopen$descriptor() {
        return _fdopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *_fdopen(int _FileHandle, const char *_Mode)
     * }
     */
    public static MethodHandle _fdopen$handle() {
        return _fdopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *_fdopen(int _FileHandle, const char *_Mode)
     * }
     */
    public static MemorySegment _fdopen$address() {
        return _fdopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *_fdopen(int _FileHandle, const char *_Mode)
     * }
     */
    public static MemorySegment _fdopen(int _FileHandle, MemorySegment _Mode) {
        var mh$ = _fdopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fdopen", _FileHandle, _Mode);
            }
            return (MemorySegment)mh$.invokeExact(_FileHandle, _Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("feof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int feof(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor feof$descriptor() {
        return feof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int feof(FILE *_Stream)
     * }
     */
    public static MethodHandle feof$handle() {
        return feof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int feof(FILE *_Stream)
     * }
     */
    public static MemorySegment feof$address() {
        return feof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int feof(FILE *_Stream)
     * }
     */
    public static int feof(MemorySegment _Stream) {
        var mh$ = feof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("ferror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ferror(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor ferror$descriptor() {
        return ferror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ferror(FILE *_Stream)
     * }
     */
    public static MethodHandle ferror$handle() {
        return ferror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ferror(FILE *_Stream)
     * }
     */
    public static MemorySegment ferror$address() {
        return ferror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ferror(FILE *_Stream)
     * }
     */
    public static int ferror(MemorySegment _Stream) {
        var mh$ = ferror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fflush(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fflush$descriptor() {
        return fflush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fflush(FILE *_Stream)
     * }
     */
    public static MethodHandle fflush$handle() {
        return fflush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fflush(FILE *_Stream)
     * }
     */
    public static MemorySegment fflush$address() {
        return fflush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fflush(FILE *_Stream)
     * }
     */
    public static int fflush(MemorySegment _Stream) {
        var mh$ = fflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fgetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fgetc(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fgetc$descriptor() {
        return fgetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fgetc(FILE *_Stream)
     * }
     */
    public static MethodHandle fgetc$handle() {
        return fgetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fgetc(FILE *_Stream)
     * }
     */
    public static MemorySegment fgetc$address() {
        return fgetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fgetc(FILE *_Stream)
     * }
     */
    public static int fgetc(MemorySegment _Stream) {
        var mh$ = fgetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fgetchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fgetchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _fgetchar()
     * }
     */
    public static FunctionDescriptor _fgetchar$descriptor() {
        return _fgetchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _fgetchar()
     * }
     */
    public static MethodHandle _fgetchar$handle() {
        return _fgetchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _fgetchar()
     * }
     */
    public static MemorySegment _fgetchar$address() {
        return _fgetchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _fgetchar()
     * }
     */
    public static int _fgetchar() {
        var mh$ = _fgetchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fgetchar");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fgetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fgetpos(FILE *_Stream, fpos_t *_Position)
     * }
     */
    public static FunctionDescriptor fgetpos$descriptor() {
        return fgetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fgetpos(FILE *_Stream, fpos_t *_Position)
     * }
     */
    public static MethodHandle fgetpos$handle() {
        return fgetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fgetpos(FILE *_Stream, fpos_t *_Position)
     * }
     */
    public static MemorySegment fgetpos$address() {
        return fgetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fgetpos(FILE *_Stream, fpos_t *_Position)
     * }
     */
    public static int fgetpos(MemorySegment _Stream, MemorySegment _Position) {
        var mh$ = fgetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetpos", _Stream, _Position);
            }
            return (int)mh$.invokeExact(_Stream, _Position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fgets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fgets(char *_Buffer, int _MaxCount, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fgets$descriptor() {
        return fgets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fgets(char *_Buffer, int _MaxCount, FILE *_Stream)
     * }
     */
    public static MethodHandle fgets$handle() {
        return fgets.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fgets(char *_Buffer, int _MaxCount, FILE *_Stream)
     * }
     */
    public static MemorySegment fgets$address() {
        return fgets.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fgets(char *_Buffer, int _MaxCount, FILE *_Stream)
     * }
     */
    public static MemorySegment fgets(MemorySegment _Buffer, int _MaxCount, MemorySegment _Stream) {
        var mh$ = fgets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgets", _Buffer, _MaxCount, _Stream);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer, _MaxCount, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fileno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fileno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _fileno(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _fileno$descriptor() {
        return _fileno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _fileno(FILE *_Stream)
     * }
     */
    public static MethodHandle _fileno$handle() {
        return _fileno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _fileno(FILE *_Stream)
     * }
     */
    public static MemorySegment _fileno$address() {
        return _fileno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _fileno(FILE *_Stream)
     * }
     */
    public static int _fileno(MemorySegment _Stream) {
        var mh$ = _fileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fileno", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _flushall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_flushall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _flushall()
     * }
     */
    public static FunctionDescriptor _flushall$descriptor() {
        return _flushall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _flushall()
     * }
     */
    public static MethodHandle _flushall$handle() {
        return _flushall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _flushall()
     * }
     */
    public static MemorySegment _flushall$address() {
        return _flushall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _flushall()
     * }
     */
    public static int _flushall() {
        var mh$ = _flushall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_flushall");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *fopen(const char *_FileName, const char *_Mode)
     * }
     */
    public static FunctionDescriptor fopen$descriptor() {
        return fopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *fopen(const char *_FileName, const char *_Mode)
     * }
     */
    public static MethodHandle fopen$handle() {
        return fopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *fopen(const char *_FileName, const char *_Mode)
     * }
     */
    public static MemorySegment fopen$address() {
        return fopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *fopen(const char *_FileName, const char *_Mode)
     * }
     */
    public static MemorySegment fopen(MemorySegment _FileName, MemorySegment _Mode) {
        var mh$ = fopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fopen", _FileName, _Mode);
            }
            return (MemorySegment)mh$.invokeExact(_FileName, _Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fputc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fputc(int _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fputc$descriptor() {
        return fputc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fputc(int _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle fputc$handle() {
        return fputc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fputc(int _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment fputc$address() {
        return fputc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fputc(int _Character, FILE *_Stream)
     * }
     */
    public static int fputc(int _Character, MemorySegment _Stream) {
        var mh$ = fputc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc", _Character, _Stream);
            }
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fputchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fputchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _fputchar(int _Character)
     * }
     */
    public static FunctionDescriptor _fputchar$descriptor() {
        return _fputchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _fputchar(int _Character)
     * }
     */
    public static MethodHandle _fputchar$handle() {
        return _fputchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _fputchar(int _Character)
     * }
     */
    public static MemorySegment _fputchar$address() {
        return _fputchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _fputchar(int _Character)
     * }
     */
    public static int _fputchar(int _Character) {
        var mh$ = _fputchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fputchar", _Character);
            }
            return (int)mh$.invokeExact(_Character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fputs(const char *_Buffer, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fputs$descriptor() {
        return fputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fputs(const char *_Buffer, FILE *_Stream)
     * }
     */
    public static MethodHandle fputs$handle() {
        return fputs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fputs(const char *_Buffer, FILE *_Stream)
     * }
     */
    public static MemorySegment fputs$address() {
        return fputs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fputs(const char *_Buffer, FILE *_Stream)
     * }
     */
    public static int fputs(MemorySegment _Buffer, MemorySegment _Stream) {
        var mh$ = fputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputs", _Buffer, _Stream);
            }
            return (int)mh$.invokeExact(_Buffer, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long fread(void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fread$descriptor() {
        return fread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long fread(void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MethodHandle fread$handle() {
        return fread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long fread(void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MemorySegment fread$address() {
        return fread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long fread(void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static long fread(MemorySegment _Buffer, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = fread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread", _Buffer, _ElementSize, _ElementCount, _Stream);
            }
            return (long)mh$.invokeExact(_Buffer, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class freopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("freopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *freopen(const char *_FileName, const char *_Mode, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor freopen$descriptor() {
        return freopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *freopen(const char *_FileName, const char *_Mode, FILE *_Stream)
     * }
     */
    public static MethodHandle freopen$handle() {
        return freopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *freopen(const char *_FileName, const char *_Mode, FILE *_Stream)
     * }
     */
    public static MemorySegment freopen$address() {
        return freopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *freopen(const char *_FileName, const char *_Mode, FILE *_Stream)
     * }
     */
    public static MemorySegment freopen(MemorySegment _FileName, MemorySegment _Mode, MemorySegment _Stream) {
        var mh$ = freopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("freopen", _FileName, _Mode, _Stream);
            }
            return (MemorySegment)mh$.invokeExact(_FileName, _Mode, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fsopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fsopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *_fsopen(const char *_FileName, const char *_Mode, int _ShFlag)
     * }
     */
    public static FunctionDescriptor _fsopen$descriptor() {
        return _fsopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *_fsopen(const char *_FileName, const char *_Mode, int _ShFlag)
     * }
     */
    public static MethodHandle _fsopen$handle() {
        return _fsopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *_fsopen(const char *_FileName, const char *_Mode, int _ShFlag)
     * }
     */
    public static MemorySegment _fsopen$address() {
        return _fsopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *_fsopen(const char *_FileName, const char *_Mode, int _ShFlag)
     * }
     */
    public static MemorySegment _fsopen(MemorySegment _FileName, MemorySegment _Mode, int _ShFlag) {
        var mh$ = _fsopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fsopen", _FileName, _Mode, _ShFlag);
            }
            return (MemorySegment)mh$.invokeExact(_FileName, _Mode, _ShFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fsetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fsetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fsetpos(FILE *_Stream, const fpos_t *_Position)
     * }
     */
    public static FunctionDescriptor fsetpos$descriptor() {
        return fsetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fsetpos(FILE *_Stream, const fpos_t *_Position)
     * }
     */
    public static MethodHandle fsetpos$handle() {
        return fsetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fsetpos(FILE *_Stream, const fpos_t *_Position)
     * }
     */
    public static MemorySegment fsetpos$address() {
        return fsetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fsetpos(FILE *_Stream, const fpos_t *_Position)
     * }
     */
    public static int fsetpos(MemorySegment _Stream, MemorySegment _Position) {
        var mh$ = fsetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fsetpos", _Stream, _Position);
            }
            return (int)mh$.invokeExact(_Stream, _Position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fseek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fseek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fseek(FILE *_Stream, long _Offset, int _Origin)
     * }
     */
    public static FunctionDescriptor fseek$descriptor() {
        return fseek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fseek(FILE *_Stream, long _Offset, int _Origin)
     * }
     */
    public static MethodHandle fseek$handle() {
        return fseek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fseek(FILE *_Stream, long _Offset, int _Origin)
     * }
     */
    public static MemorySegment fseek$address() {
        return fseek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fseek(FILE *_Stream, long _Offset, int _Origin)
     * }
     */
    public static int fseek(MemorySegment _Stream, int _Offset, int _Origin) {
        var mh$ = fseek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseek", _Stream, _Offset, _Origin);
            }
            return (int)mh$.invokeExact(_Stream, _Offset, _Origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fseeki64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fseeki64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _fseeki64(FILE *_Stream, long long _Offset, int _Origin)
     * }
     */
    public static FunctionDescriptor _fseeki64$descriptor() {
        return _fseeki64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _fseeki64(FILE *_Stream, long long _Offset, int _Origin)
     * }
     */
    public static MethodHandle _fseeki64$handle() {
        return _fseeki64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _fseeki64(FILE *_Stream, long long _Offset, int _Origin)
     * }
     */
    public static MemorySegment _fseeki64$address() {
        return _fseeki64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _fseeki64(FILE *_Stream, long long _Offset, int _Origin)
     * }
     */
    public static int _fseeki64(MemorySegment _Stream, long _Offset, int _Origin) {
        var mh$ = _fseeki64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fseeki64", _Stream, _Offset, _Origin);
            }
            return (int)mh$.invokeExact(_Stream, _Offset, _Origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("ftell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long ftell(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor ftell$descriptor() {
        return ftell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long ftell(FILE *_Stream)
     * }
     */
    public static MethodHandle ftell$handle() {
        return ftell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long ftell(FILE *_Stream)
     * }
     */
    public static MemorySegment ftell$address() {
        return ftell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long ftell(FILE *_Stream)
     * }
     */
    public static int ftell(MemorySegment _Stream) {
        var mh$ = ftell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftell", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ftelli64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_ftelli64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _ftelli64(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _ftelli64$descriptor() {
        return _ftelli64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _ftelli64(FILE *_Stream)
     * }
     */
    public static MethodHandle _ftelli64$handle() {
        return _ftelli64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _ftelli64(FILE *_Stream)
     * }
     */
    public static MemorySegment _ftelli64$address() {
        return _ftelli64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _ftelli64(FILE *_Stream)
     * }
     */
    public static long _ftelli64(MemorySegment _Stream) {
        var mh$ = _ftelli64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ftelli64", _Stream);
            }
            return (long)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fwrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long fwrite(const void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fwrite$descriptor() {
        return fwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long fwrite(const void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MethodHandle fwrite$handle() {
        return fwrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long fwrite(const void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MemorySegment fwrite$address() {
        return fwrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long fwrite(const void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static long fwrite(MemorySegment _Buffer, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = fwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite", _Buffer, _ElementSize, _ElementCount, _Stream);
            }
            return (long)mh$.invokeExact(_Buffer, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getc(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor getc$descriptor() {
        return getc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getc(FILE *_Stream)
     * }
     */
    public static MethodHandle getc$handle() {
        return getc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getc(FILE *_Stream)
     * }
     */
    public static MemorySegment getc$address() {
        return getc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getc(FILE *_Stream)
     * }
     */
    public static int getc(MemorySegment _Stream) {
        var mh$ = getc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static FunctionDescriptor getchar$descriptor() {
        return getchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static MethodHandle getchar$handle() {
        return getchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static MemorySegment getchar$address() {
        return getchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static int getchar() {
        var mh$ = getchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _getmaxstdio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_getmaxstdio");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _getmaxstdio()
     * }
     */
    public static FunctionDescriptor _getmaxstdio$descriptor() {
        return _getmaxstdio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _getmaxstdio()
     * }
     */
    public static MethodHandle _getmaxstdio$handle() {
        return _getmaxstdio.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _getmaxstdio()
     * }
     */
    public static MemorySegment _getmaxstdio$address() {
        return _getmaxstdio.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _getmaxstdio()
     * }
     */
    public static int _getmaxstdio() {
        var mh$ = _getmaxstdio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_getmaxstdio");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _getw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_getw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _getw(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _getw$descriptor() {
        return _getw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _getw(FILE *_Stream)
     * }
     */
    public static MethodHandle _getw$handle() {
        return _getw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _getw(FILE *_Stream)
     * }
     */
    public static MemorySegment _getw$address() {
        return _getw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _getw(FILE *_Stream)
     * }
     */
    public static int _getw(MemorySegment _Stream) {
        var mh$ = _getw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_getw", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _pclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_pclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _pclose(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _pclose$descriptor() {
        return _pclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _pclose(FILE *_Stream)
     * }
     */
    public static MethodHandle _pclose$handle() {
        return _pclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _pclose(FILE *_Stream)
     * }
     */
    public static MemorySegment _pclose$address() {
        return _pclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _pclose(FILE *_Stream)
     * }
     */
    public static int _pclose(MemorySegment _Stream) {
        var mh$ = _pclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_pclose", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _popen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_popen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *_popen(const char *_Command, const char *_Mode)
     * }
     */
    public static FunctionDescriptor _popen$descriptor() {
        return _popen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *_popen(const char *_Command, const char *_Mode)
     * }
     */
    public static MethodHandle _popen$handle() {
        return _popen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *_popen(const char *_Command, const char *_Mode)
     * }
     */
    public static MemorySegment _popen$address() {
        return _popen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *_popen(const char *_Command, const char *_Mode)
     * }
     */
    public static MemorySegment _popen(MemorySegment _Command, MemorySegment _Mode) {
        var mh$ = _popen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_popen", _Command, _Mode);
            }
            return (MemorySegment)mh$.invokeExact(_Command, _Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("putc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putc(int _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor putc$descriptor() {
        return putc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putc(int _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle putc$handle() {
        return putc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putc(int _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment putc$address() {
        return putc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putc(int _Character, FILE *_Stream)
     * }
     */
    public static int putc(int _Character, MemorySegment _Stream) {
        var mh$ = putc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc", _Character, _Stream);
            }
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("putchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putchar(int _Character)
     * }
     */
    public static FunctionDescriptor putchar$descriptor() {
        return putchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putchar(int _Character)
     * }
     */
    public static MethodHandle putchar$handle() {
        return putchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putchar(int _Character)
     * }
     */
    public static MemorySegment putchar$address() {
        return putchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putchar(int _Character)
     * }
     */
    public static int putchar(int _Character) {
        var mh$ = putchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar", _Character);
            }
            return (int)mh$.invokeExact(_Character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class puts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("puts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int puts(const char *_Buffer)
     * }
     */
    public static FunctionDescriptor puts$descriptor() {
        return puts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int puts(const char *_Buffer)
     * }
     */
    public static MethodHandle puts$handle() {
        return puts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int puts(const char *_Buffer)
     * }
     */
    public static MemorySegment puts$address() {
        return puts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int puts(const char *_Buffer)
     * }
     */
    public static int puts(MemorySegment _Buffer) {
        var mh$ = puts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("puts", _Buffer);
            }
            return (int)mh$.invokeExact(_Buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _putw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_putw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _putw(int _Word, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _putw$descriptor() {
        return _putw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _putw(int _Word, FILE *_Stream)
     * }
     */
    public static MethodHandle _putw$handle() {
        return _putw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _putw(int _Word, FILE *_Stream)
     * }
     */
    public static MemorySegment _putw$address() {
        return _putw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _putw(int _Word, FILE *_Stream)
     * }
     */
    public static int _putw(int _Word, MemorySegment _Stream) {
        var mh$ = _putw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_putw", _Word, _Stream);
            }
            return (int)mh$.invokeExact(_Word, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("remove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int remove(const char *_FileName)
     * }
     */
    public static FunctionDescriptor remove$descriptor() {
        return remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int remove(const char *_FileName)
     * }
     */
    public static MethodHandle remove$handle() {
        return remove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int remove(const char *_FileName)
     * }
     */
    public static MemorySegment remove$address() {
        return remove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int remove(const char *_FileName)
     * }
     */
    public static int remove(MemorySegment _FileName) {
        var mh$ = remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remove", _FileName);
            }
            return (int)mh$.invokeExact(_FileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("rename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rename(const char *_OldFileName, const char *_NewFileName)
     * }
     */
    public static FunctionDescriptor rename$descriptor() {
        return rename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rename(const char *_OldFileName, const char *_NewFileName)
     * }
     */
    public static MethodHandle rename$handle() {
        return rename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int rename(const char *_OldFileName, const char *_NewFileName)
     * }
     */
    public static MemorySegment rename$address() {
        return rename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int rename(const char *_OldFileName, const char *_NewFileName)
     * }
     */
    public static int rename(MemorySegment _OldFileName, MemorySegment _NewFileName) {
        var mh$ = rename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rename", _OldFileName, _NewFileName);
            }
            return (int)mh$.invokeExact(_OldFileName, _NewFileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _unlink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_unlink");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _unlink(const char *_FileName)
     * }
     */
    public static FunctionDescriptor _unlink$descriptor() {
        return _unlink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _unlink(const char *_FileName)
     * }
     */
    public static MethodHandle _unlink$handle() {
        return _unlink.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _unlink(const char *_FileName)
     * }
     */
    public static MemorySegment _unlink$address() {
        return _unlink.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _unlink(const char *_FileName)
     * }
     */
    public static int _unlink(MemorySegment _FileName) {
        var mh$ = _unlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_unlink", _FileName);
            }
            return (int)mh$.invokeExact(_FileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class unlink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("unlink");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int unlink(const char *_FileName)
     * }
     */
    public static FunctionDescriptor unlink$descriptor() {
        return unlink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int unlink(const char *_FileName)
     * }
     */
    public static MethodHandle unlink$handle() {
        return unlink.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int unlink(const char *_FileName)
     * }
     */
    public static MemorySegment unlink$address() {
        return unlink.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int unlink(const char *_FileName)
     * }
     */
    public static int unlink(MemorySegment _FileName) {
        var mh$ = unlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("unlink", _FileName);
            }
            return (int)mh$.invokeExact(_FileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rewind(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor rewind$descriptor() {
        return rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rewind(FILE *_Stream)
     * }
     */
    public static MethodHandle rewind$handle() {
        return rewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void rewind(FILE *_Stream)
     * }
     */
    public static MemorySegment rewind$address() {
        return rewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void rewind(FILE *_Stream)
     * }
     */
    public static void rewind(MemorySegment _Stream) {
        var mh$ = rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rewind", _Stream);
            }
            mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _rmtmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_rmtmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _rmtmp()
     * }
     */
    public static FunctionDescriptor _rmtmp$descriptor() {
        return _rmtmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _rmtmp()
     * }
     */
    public static MethodHandle _rmtmp$handle() {
        return _rmtmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _rmtmp()
     * }
     */
    public static MemorySegment _rmtmp$address() {
        return _rmtmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _rmtmp()
     * }
     */
    public static int _rmtmp() {
        var mh$ = _rmtmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_rmtmp");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("setbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setbuf(FILE *_Stream, char *_Buffer)
     * }
     */
    public static FunctionDescriptor setbuf$descriptor() {
        return setbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setbuf(FILE *_Stream, char *_Buffer)
     * }
     */
    public static MethodHandle setbuf$handle() {
        return setbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setbuf(FILE *_Stream, char *_Buffer)
     * }
     */
    public static MemorySegment setbuf$address() {
        return setbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setbuf(FILE *_Stream, char *_Buffer)
     * }
     */
    public static void setbuf(MemorySegment _Stream, MemorySegment _Buffer) {
        var mh$ = setbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuf", _Stream, _Buffer);
            }
            mh$.invokeExact(_Stream, _Buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _setmaxstdio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_setmaxstdio");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _setmaxstdio(int _Maximum)
     * }
     */
    public static FunctionDescriptor _setmaxstdio$descriptor() {
        return _setmaxstdio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _setmaxstdio(int _Maximum)
     * }
     */
    public static MethodHandle _setmaxstdio$handle() {
        return _setmaxstdio.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _setmaxstdio(int _Maximum)
     * }
     */
    public static MemorySegment _setmaxstdio$address() {
        return _setmaxstdio.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _setmaxstdio(int _Maximum)
     * }
     */
    public static int _setmaxstdio(int _Maximum) {
        var mh$ = _setmaxstdio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_setmaxstdio", _Maximum);
            }
            return (int)mh$.invokeExact(_Maximum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setvbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("setvbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setvbuf(FILE *_Stream, char *_Buffer, int _Mode, size_t _Size)
     * }
     */
    public static FunctionDescriptor setvbuf$descriptor() {
        return setvbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setvbuf(FILE *_Stream, char *_Buffer, int _Mode, size_t _Size)
     * }
     */
    public static MethodHandle setvbuf$handle() {
        return setvbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setvbuf(FILE *_Stream, char *_Buffer, int _Mode, size_t _Size)
     * }
     */
    public static MemorySegment setvbuf$address() {
        return setvbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setvbuf(FILE *_Stream, char *_Buffer, int _Mode, size_t _Size)
     * }
     */
    public static int setvbuf(MemorySegment _Stream, MemorySegment _Buffer, int _Mode, long _Size) {
        var mh$ = setvbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setvbuf", _Stream, _Buffer, _Mode, _Size);
            }
            return (int)mh$.invokeExact(_Stream, _Buffer, _Mode, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _tempnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_tempnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_tempnam(const char *_DirectoryName, const char *_FilePrefix)
     * }
     */
    public static FunctionDescriptor _tempnam$descriptor() {
        return _tempnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_tempnam(const char *_DirectoryName, const char *_FilePrefix)
     * }
     */
    public static MethodHandle _tempnam$handle() {
        return _tempnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_tempnam(const char *_DirectoryName, const char *_FilePrefix)
     * }
     */
    public static MemorySegment _tempnam$address() {
        return _tempnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_tempnam(const char *_DirectoryName, const char *_FilePrefix)
     * }
     */
    public static MemorySegment _tempnam(MemorySegment _DirectoryName, MemorySegment _FilePrefix) {
        var mh$ = _tempnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_tempnam", _DirectoryName, _FilePrefix);
            }
            return (MemorySegment)mh$.invokeExact(_DirectoryName, _FilePrefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("tmpfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static FunctionDescriptor tmpfile$descriptor() {
        return tmpfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static MethodHandle tmpfile$handle() {
        return tmpfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile$address() {
        return tmpfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpfile");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("tmpnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *tmpnam(char *_Buffer)
     * }
     */
    public static FunctionDescriptor tmpnam$descriptor() {
        return tmpnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *tmpnam(char *_Buffer)
     * }
     */
    public static MethodHandle tmpnam$handle() {
        return tmpnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *tmpnam(char *_Buffer)
     * }
     */
    public static MemorySegment tmpnam$address() {
        return tmpnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *tmpnam(char *_Buffer)
     * }
     */
    public static MemorySegment tmpnam(MemorySegment _Buffer) {
        var mh$ = tmpnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam", _Buffer);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ungetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("ungetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ungetc(int _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor ungetc$descriptor() {
        return ungetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ungetc(int _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle ungetc$handle() {
        return ungetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ungetc(int _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment ungetc$address() {
        return ungetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ungetc(int _Character, FILE *_Stream)
     * }
     */
    public static int ungetc(int _Character, MemorySegment _Stream) {
        var mh$ = ungetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ungetc", _Character, _Stream);
            }
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lock_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_lock_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _lock_file(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _lock_file$descriptor() {
        return _lock_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _lock_file(FILE *_Stream)
     * }
     */
    public static MethodHandle _lock_file$handle() {
        return _lock_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _lock_file(FILE *_Stream)
     * }
     */
    public static MemorySegment _lock_file$address() {
        return _lock_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _lock_file(FILE *_Stream)
     * }
     */
    public static void _lock_file(MemorySegment _Stream) {
        var mh$ = _lock_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lock_file", _Stream);
            }
            mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _unlock_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_unlock_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _unlock_file(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _unlock_file$descriptor() {
        return _unlock_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _unlock_file(FILE *_Stream)
     * }
     */
    public static MethodHandle _unlock_file$handle() {
        return _unlock_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _unlock_file(FILE *_Stream)
     * }
     */
    public static MemorySegment _unlock_file$address() {
        return _unlock_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _unlock_file(FILE *_Stream)
     * }
     */
    public static void _unlock_file(MemorySegment _Stream) {
        var mh$ = _unlock_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_unlock_file", _Stream);
            }
            mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fclose_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fclose_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _fclose_nolock(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _fclose_nolock$descriptor() {
        return _fclose_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _fclose_nolock(FILE *_Stream)
     * }
     */
    public static MethodHandle _fclose_nolock$handle() {
        return _fclose_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _fclose_nolock(FILE *_Stream)
     * }
     */
    public static MemorySegment _fclose_nolock$address() {
        return _fclose_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _fclose_nolock(FILE *_Stream)
     * }
     */
    public static int _fclose_nolock(MemorySegment _Stream) {
        var mh$ = _fclose_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fclose_nolock", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fflush_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fflush_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _fflush_nolock(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _fflush_nolock$descriptor() {
        return _fflush_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _fflush_nolock(FILE *_Stream)
     * }
     */
    public static MethodHandle _fflush_nolock$handle() {
        return _fflush_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _fflush_nolock(FILE *_Stream)
     * }
     */
    public static MemorySegment _fflush_nolock$address() {
        return _fflush_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _fflush_nolock(FILE *_Stream)
     * }
     */
    public static int _fflush_nolock(MemorySegment _Stream) {
        var mh$ = _fflush_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fflush_nolock", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fgetc_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fgetc_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _fgetc_nolock(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _fgetc_nolock$descriptor() {
        return _fgetc_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _fgetc_nolock(FILE *_Stream)
     * }
     */
    public static MethodHandle _fgetc_nolock$handle() {
        return _fgetc_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _fgetc_nolock(FILE *_Stream)
     * }
     */
    public static MemorySegment _fgetc_nolock$address() {
        return _fgetc_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _fgetc_nolock(FILE *_Stream)
     * }
     */
    public static int _fgetc_nolock(MemorySegment _Stream) {
        var mh$ = _fgetc_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fgetc_nolock", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fputc_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fputc_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _fputc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _fputc_nolock$descriptor() {
        return _fputc_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _fputc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle _fputc_nolock$handle() {
        return _fputc_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _fputc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment _fputc_nolock$address() {
        return _fputc_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _fputc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static int _fputc_nolock(int _Character, MemorySegment _Stream) {
        var mh$ = _fputc_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fputc_nolock", _Character, _Stream);
            }
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fread_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fread_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _fread_nolock(void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _fread_nolock$descriptor() {
        return _fread_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _fread_nolock(void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MethodHandle _fread_nolock$handle() {
        return _fread_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _fread_nolock(void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MemorySegment _fread_nolock$address() {
        return _fread_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _fread_nolock(void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static long _fread_nolock(MemorySegment _Buffer, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = _fread_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fread_nolock", _Buffer, _ElementSize, _ElementCount, _Stream);
            }
            return (long)mh$.invokeExact(_Buffer, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fread_nolock_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fread_nolock_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _fread_nolock_s(void *_Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _fread_nolock_s$descriptor() {
        return _fread_nolock_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _fread_nolock_s(void *_Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MethodHandle _fread_nolock_s$handle() {
        return _fread_nolock_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _fread_nolock_s(void *_Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MemorySegment _fread_nolock_s$address() {
        return _fread_nolock_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _fread_nolock_s(void *_Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static long _fread_nolock_s(MemorySegment _Buffer, long _BufferSize, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = _fread_nolock_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fread_nolock_s", _Buffer, _BufferSize, _ElementSize, _ElementCount, _Stream);
            }
            return (long)mh$.invokeExact(_Buffer, _BufferSize, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fseek_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fseek_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _fseek_nolock(FILE *_Stream, long _Offset, int _Origin)
     * }
     */
    public static FunctionDescriptor _fseek_nolock$descriptor() {
        return _fseek_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _fseek_nolock(FILE *_Stream, long _Offset, int _Origin)
     * }
     */
    public static MethodHandle _fseek_nolock$handle() {
        return _fseek_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _fseek_nolock(FILE *_Stream, long _Offset, int _Origin)
     * }
     */
    public static MemorySegment _fseek_nolock$address() {
        return _fseek_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _fseek_nolock(FILE *_Stream, long _Offset, int _Origin)
     * }
     */
    public static int _fseek_nolock(MemorySegment _Stream, int _Offset, int _Origin) {
        var mh$ = _fseek_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fseek_nolock", _Stream, _Offset, _Origin);
            }
            return (int)mh$.invokeExact(_Stream, _Offset, _Origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fseeki64_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fseeki64_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _fseeki64_nolock(FILE *_Stream, long long _Offset, int _Origin)
     * }
     */
    public static FunctionDescriptor _fseeki64_nolock$descriptor() {
        return _fseeki64_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _fseeki64_nolock(FILE *_Stream, long long _Offset, int _Origin)
     * }
     */
    public static MethodHandle _fseeki64_nolock$handle() {
        return _fseeki64_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _fseeki64_nolock(FILE *_Stream, long long _Offset, int _Origin)
     * }
     */
    public static MemorySegment _fseeki64_nolock$address() {
        return _fseeki64_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _fseeki64_nolock(FILE *_Stream, long long _Offset, int _Origin)
     * }
     */
    public static int _fseeki64_nolock(MemorySegment _Stream, long _Offset, int _Origin) {
        var mh$ = _fseeki64_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fseeki64_nolock", _Stream, _Offset, _Origin);
            }
            return (int)mh$.invokeExact(_Stream, _Offset, _Origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ftell_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_ftell_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _ftell_nolock(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _ftell_nolock$descriptor() {
        return _ftell_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _ftell_nolock(FILE *_Stream)
     * }
     */
    public static MethodHandle _ftell_nolock$handle() {
        return _ftell_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _ftell_nolock(FILE *_Stream)
     * }
     */
    public static MemorySegment _ftell_nolock$address() {
        return _ftell_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _ftell_nolock(FILE *_Stream)
     * }
     */
    public static int _ftell_nolock(MemorySegment _Stream) {
        var mh$ = _ftell_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ftell_nolock", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ftelli64_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_ftelli64_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _ftelli64_nolock(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _ftelli64_nolock$descriptor() {
        return _ftelli64_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _ftelli64_nolock(FILE *_Stream)
     * }
     */
    public static MethodHandle _ftelli64_nolock$handle() {
        return _ftelli64_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _ftelli64_nolock(FILE *_Stream)
     * }
     */
    public static MemorySegment _ftelli64_nolock$address() {
        return _ftelli64_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _ftelli64_nolock(FILE *_Stream)
     * }
     */
    public static long _ftelli64_nolock(MemorySegment _Stream) {
        var mh$ = _ftelli64_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ftelli64_nolock", _Stream);
            }
            return (long)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fwrite_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_fwrite_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _fwrite_nolock(const void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _fwrite_nolock$descriptor() {
        return _fwrite_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _fwrite_nolock(const void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MethodHandle _fwrite_nolock$handle() {
        return _fwrite_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _fwrite_nolock(const void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static MemorySegment _fwrite_nolock$address() {
        return _fwrite_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _fwrite_nolock(const void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream)
     * }
     */
    public static long _fwrite_nolock(MemorySegment _Buffer, long _ElementSize, long _ElementCount, MemorySegment _Stream) {
        var mh$ = _fwrite_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fwrite_nolock", _Buffer, _ElementSize, _ElementCount, _Stream);
            }
            return (long)mh$.invokeExact(_Buffer, _ElementSize, _ElementCount, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _getc_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_getc_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _getc_nolock(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _getc_nolock$descriptor() {
        return _getc_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _getc_nolock(FILE *_Stream)
     * }
     */
    public static MethodHandle _getc_nolock$handle() {
        return _getc_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _getc_nolock(FILE *_Stream)
     * }
     */
    public static MemorySegment _getc_nolock$address() {
        return _getc_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _getc_nolock(FILE *_Stream)
     * }
     */
    public static int _getc_nolock(MemorySegment _Stream) {
        var mh$ = _getc_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_getc_nolock", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _putc_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_putc_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _putc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _putc_nolock$descriptor() {
        return _putc_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _putc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle _putc_nolock$handle() {
        return _putc_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _putc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment _putc_nolock$address() {
        return _putc_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _putc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static int _putc_nolock(int _Character, MemorySegment _Stream) {
        var mh$ = _putc_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_putc_nolock", _Character, _Stream);
            }
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ungetc_nolock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_ungetc_nolock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _ungetc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor _ungetc_nolock$descriptor() {
        return _ungetc_nolock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _ungetc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static MethodHandle _ungetc_nolock$handle() {
        return _ungetc_nolock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _ungetc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static MemorySegment _ungetc_nolock$address() {
        return _ungetc_nolock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _ungetc_nolock(int _Character, FILE *_Stream)
     * }
     */
    public static int _ungetc_nolock(int _Character, MemorySegment _Stream) {
        var mh$ = _ungetc_nolock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ungetc_nolock", _Character, _Stream);
            }
            return (int)mh$.invokeExact(_Character, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__commode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__p__commode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *__p__commode()
     * }
     */
    public static FunctionDescriptor __p__commode$descriptor() {
        return __p__commode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *__p__commode()
     * }
     */
    public static MethodHandle __p__commode$handle() {
        return __p__commode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *__p__commode()
     * }
     */
    public static MemorySegment __p__commode$address() {
        return __p__commode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *__p__commode()
     * }
     */
    public static MemorySegment __p__commode() {
        var mh$ = __p__commode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__commode");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vfprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vfprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vfprintf(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vfprintf$descriptor() {
        return __stdio_common_vfprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vfprintf(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vfprintf$handle() {
        return __stdio_common_vfprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vfprintf(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vfprintf$address() {
        return __stdio_common_vfprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vfprintf(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vfprintf(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vfprintf", _Options, _Stream, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vfprintf_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vfprintf_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vfprintf_s(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vfprintf_s$descriptor() {
        return __stdio_common_vfprintf_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vfprintf_s(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vfprintf_s$handle() {
        return __stdio_common_vfprintf_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vfprintf_s(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vfprintf_s$address() {
        return __stdio_common_vfprintf_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vfprintf_s(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vfprintf_s(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfprintf_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vfprintf_s", _Options, _Stream, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vfprintf_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vfprintf_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vfprintf_p(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vfprintf_p$descriptor() {
        return __stdio_common_vfprintf_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vfprintf_p(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vfprintf_p$handle() {
        return __stdio_common_vfprintf_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vfprintf_p(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vfprintf_p$address() {
        return __stdio_common_vfprintf_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vfprintf_p(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vfprintf_p(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vfprintf_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vfprintf_p", _Options, _Stream, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_printf_count_output {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_set_printf_count_output");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _set_printf_count_output(int _Value)
     * }
     */
    public static FunctionDescriptor _set_printf_count_output$descriptor() {
        return _set_printf_count_output.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _set_printf_count_output(int _Value)
     * }
     */
    public static MethodHandle _set_printf_count_output$handle() {
        return _set_printf_count_output.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _set_printf_count_output(int _Value)
     * }
     */
    public static MemorySegment _set_printf_count_output$address() {
        return _set_printf_count_output.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _set_printf_count_output(int _Value)
     * }
     */
    public static int _set_printf_count_output(int _Value) {
        var mh$ = _set_printf_count_output.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_printf_count_output", _Value);
            }
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_printf_count_output {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("_get_printf_count_output");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _get_printf_count_output()
     * }
     */
    public static FunctionDescriptor _get_printf_count_output$descriptor() {
        return _get_printf_count_output.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _get_printf_count_output()
     * }
     */
    public static MethodHandle _get_printf_count_output$handle() {
        return _get_printf_count_output.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _get_printf_count_output()
     * }
     */
    public static MemorySegment _get_printf_count_output$address() {
        return _get_printf_count_output.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _get_printf_count_output()
     * }
     */
    public static int _get_printf_count_output() {
        var mh$ = _get_printf_count_output.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_printf_count_output");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vfscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vfscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vfscanf(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _Arglist)
     * }
     */
    public static FunctionDescriptor __stdio_common_vfscanf$descriptor() {
        return __stdio_common_vfscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vfscanf(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _Arglist)
     * }
     */
    public static MethodHandle __stdio_common_vfscanf$handle() {
        return __stdio_common_vfscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vfscanf(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _Arglist)
     * }
     */
    public static MemorySegment __stdio_common_vfscanf$address() {
        return __stdio_common_vfscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vfscanf(unsigned long long _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _Arglist)
     * }
     */
    public static int __stdio_common_vfscanf(long _Options, MemorySegment _Stream, MemorySegment _Format, MemorySegment _Locale, MemorySegment _Arglist) {
        var mh$ = __stdio_common_vfscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vfscanf", _Options, _Stream, _Format, _Locale, _Arglist);
            }
            return (int)mh$.invokeExact(_Options, _Stream, _Format, _Locale, _Arglist);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vsprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vsprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vsprintf(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vsprintf$descriptor() {
        return __stdio_common_vsprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vsprintf(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vsprintf$handle() {
        return __stdio_common_vsprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vsprintf(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vsprintf$address() {
        return __stdio_common_vsprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vsprintf(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vsprintf(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vsprintf", _Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vsprintf_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vsprintf_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vsprintf_s(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vsprintf_s$descriptor() {
        return __stdio_common_vsprintf_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vsprintf_s(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vsprintf_s$handle() {
        return __stdio_common_vsprintf_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vsprintf_s(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vsprintf_s$address() {
        return __stdio_common_vsprintf_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vsprintf_s(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vsprintf_s(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsprintf_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vsprintf_s", _Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vsnprintf_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vsnprintf_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vsnprintf_s(unsigned long long _Options, char *_Buffer, size_t _BufferCount, size_t _MaxCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vsnprintf_s$descriptor() {
        return __stdio_common_vsnprintf_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vsnprintf_s(unsigned long long _Options, char *_Buffer, size_t _BufferCount, size_t _MaxCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vsnprintf_s$handle() {
        return __stdio_common_vsnprintf_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vsnprintf_s(unsigned long long _Options, char *_Buffer, size_t _BufferCount, size_t _MaxCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vsnprintf_s$address() {
        return __stdio_common_vsnprintf_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vsnprintf_s(unsigned long long _Options, char *_Buffer, size_t _BufferCount, size_t _MaxCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vsnprintf_s(long _Options, MemorySegment _Buffer, long _BufferCount, long _MaxCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsnprintf_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vsnprintf_s", _Options, _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vsprintf_p {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vsprintf_p");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vsprintf_p(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vsprintf_p$descriptor() {
        return __stdio_common_vsprintf_p.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vsprintf_p(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vsprintf_p$handle() {
        return __stdio_common_vsprintf_p.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vsprintf_p(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vsprintf_p$address() {
        return __stdio_common_vsprintf_p.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vsprintf_p(unsigned long long _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vsprintf_p(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsprintf_p.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vsprintf_p", _Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stdio_common_vsscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("__stdio_common_vsscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __stdio_common_vsscanf(unsigned long long _Options, const char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static FunctionDescriptor __stdio_common_vsscanf$descriptor() {
        return __stdio_common_vsscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __stdio_common_vsscanf(unsigned long long _Options, const char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MethodHandle __stdio_common_vsscanf$handle() {
        return __stdio_common_vsscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __stdio_common_vsscanf(unsigned long long _Options, const char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static MemorySegment __stdio_common_vsscanf$address() {
        return __stdio_common_vsscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __stdio_common_vsscanf(unsigned long long _Options, const char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
     * }
     */
    public static int __stdio_common_vsscanf(long _Options, MemorySegment _Buffer, long _BufferCount, MemorySegment _Format, MemorySegment _Locale, MemorySegment _ArgList) {
        var mh$ = __stdio_common_vsscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stdio_common_vsscanf", _Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
            }
            return (int)mh$.invokeExact(_Options, _Buffer, _BufferCount, _Format, _Locale, _ArgList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tempnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("tempnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *tempnam(const char *_Directory, const char *_FilePrefix)
     * }
     */
    public static FunctionDescriptor tempnam$descriptor() {
        return tempnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *tempnam(const char *_Directory, const char *_FilePrefix)
     * }
     */
    public static MethodHandle tempnam$handle() {
        return tempnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *tempnam(const char *_Directory, const char *_FilePrefix)
     * }
     */
    public static MemorySegment tempnam$address() {
        return tempnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *tempnam(const char *_Directory, const char *_FilePrefix)
     * }
     */
    public static MemorySegment tempnam(MemorySegment _Directory, MemorySegment _FilePrefix) {
        var mh$ = tempnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tempnam", _Directory, _FilePrefix);
            }
            return (MemorySegment)mh$.invokeExact(_Directory, _FilePrefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fcloseall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fcloseall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fcloseall()
     * }
     */
    public static FunctionDescriptor fcloseall$descriptor() {
        return fcloseall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fcloseall()
     * }
     */
    public static MethodHandle fcloseall$handle() {
        return fcloseall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fcloseall()
     * }
     */
    public static MemorySegment fcloseall$address() {
        return fcloseall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fcloseall()
     * }
     */
    public static int fcloseall() {
        var mh$ = fcloseall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fcloseall");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fdopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *fdopen(int _FileHandle, const char *_Format)
     * }
     */
    public static FunctionDescriptor fdopen$descriptor() {
        return fdopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *fdopen(int _FileHandle, const char *_Format)
     * }
     */
    public static MethodHandle fdopen$handle() {
        return fdopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *fdopen(int _FileHandle, const char *_Format)
     * }
     */
    public static MemorySegment fdopen$address() {
        return fdopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *fdopen(int _FileHandle, const char *_Format)
     * }
     */
    public static MemorySegment fdopen(int _FileHandle, MemorySegment _Format) {
        var mh$ = fdopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdopen", _FileHandle, _Format);
            }
            return (MemorySegment)mh$.invokeExact(_FileHandle, _Format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fgetchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fgetchar()
     * }
     */
    public static FunctionDescriptor fgetchar$descriptor() {
        return fgetchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fgetchar()
     * }
     */
    public static MethodHandle fgetchar$handle() {
        return fgetchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fgetchar()
     * }
     */
    public static MemorySegment fgetchar$address() {
        return fgetchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fgetchar()
     * }
     */
    public static int fgetchar() {
        var mh$ = fgetchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetchar");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fileno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fileno(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor fileno$descriptor() {
        return fileno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fileno(FILE *_Stream)
     * }
     */
    public static MethodHandle fileno$handle() {
        return fileno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fileno(FILE *_Stream)
     * }
     */
    public static MemorySegment fileno$address() {
        return fileno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fileno(FILE *_Stream)
     * }
     */
    public static int fileno(MemorySegment _Stream) {
        var mh$ = fileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class flushall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("flushall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int flushall()
     * }
     */
    public static FunctionDescriptor flushall$descriptor() {
        return flushall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int flushall()
     * }
     */
    public static MethodHandle flushall$handle() {
        return flushall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int flushall()
     * }
     */
    public static MemorySegment flushall$address() {
        return flushall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int flushall()
     * }
     */
    public static int flushall() {
        var mh$ = flushall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("flushall");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("fputchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fputchar(int _Ch)
     * }
     */
    public static FunctionDescriptor fputchar$descriptor() {
        return fputchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fputchar(int _Ch)
     * }
     */
    public static MethodHandle fputchar$handle() {
        return fputchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fputchar(int _Ch)
     * }
     */
    public static MemorySegment fputchar$address() {
        return fputchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fputchar(int _Ch)
     * }
     */
    public static int fputchar(int _Ch) {
        var mh$ = fputchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputchar", _Ch);
            }
            return (int)mh$.invokeExact(_Ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getw(FILE *_Stream)
     * }
     */
    public static FunctionDescriptor getw$descriptor() {
        return getw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getw(FILE *_Stream)
     * }
     */
    public static MethodHandle getw$handle() {
        return getw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getw(FILE *_Stream)
     * }
     */
    public static MemorySegment getw$address() {
        return getw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getw(FILE *_Stream)
     * }
     */
    public static int getw(MemorySegment _Stream) {
        var mh$ = getw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getw", _Stream);
            }
            return (int)mh$.invokeExact(_Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("putw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putw(int _Ch, FILE *_Stream)
     * }
     */
    public static FunctionDescriptor putw$descriptor() {
        return putw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putw(int _Ch, FILE *_Stream)
     * }
     */
    public static MethodHandle putw$handle() {
        return putw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putw(int _Ch, FILE *_Stream)
     * }
     */
    public static MemorySegment putw$address() {
        return putw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putw(int _Ch, FILE *_Stream)
     * }
     */
    public static int putw(int _Ch, MemorySegment _Stream) {
        var mh$ = putw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putw", _Ch, _Stream);
            }
            return (int)mh$.invokeExact(_Ch, _Stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmtmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT    );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("rmtmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rmtmp()
     * }
     */
    public static FunctionDescriptor rmtmp$descriptor() {
        return rmtmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rmtmp()
     * }
     */
    public static MethodHandle rmtmp$handle() {
        return rmtmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int rmtmp()
     * }
     */
    public static MemorySegment rmtmp$address() {
        return rmtmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int rmtmp()
     * }
     */
    public static int rmtmp() {
        var mh$ = rmtmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmtmp");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CST_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CST_NONE = 0
     * }
     */
    public static int CST_NONE() {
        return CST_NONE;
    }
    private static final int CST_IDEAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CST_IDEAL = 1
     * }
     */
    public static int CST_IDEAL() {
        return CST_IDEAL;
    }
    private static final int CST_CLASSIC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CST_CLASSIC = 2
     * }
     */
    public static int CST_CLASSIC() {
        return CST_CLASSIC;
    }
    private static final int CST_NORMAL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CST_NORMAL = 3
     * }
     */
    public static int CST_NORMAL() {
        return CST_NORMAL;
    }
    private static final int CST_BARELY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CST_BARELY = 4
     * }
     */
    public static int CST_BARELY() {
        return CST_BARELY;
    }

    private static class getQuadHutCst {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getQuadHutCst");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getQuadHutCst(uint64_t low20)
     * }
     */
    public static FunctionDescriptor getQuadHutCst$descriptor() {
        return getQuadHutCst.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getQuadHutCst(uint64_t low20)
     * }
     */
    public static MethodHandle getQuadHutCst$handle() {
        return getQuadHutCst.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getQuadHutCst(uint64_t low20)
     * }
     */
    public static MemorySegment getQuadHutCst$address() {
        return getQuadHutCst.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getQuadHutCst(uint64_t low20)
     * }
     */
    public static int getQuadHutCst(long low20) {
        var mh$ = getQuadHutCst.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getQuadHutCst", low20);
            }
            return (int)mh$.invokeExact(low20);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class searchAll48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("searchAll48");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int searchAll48(uint64_t **seedbuf, uint64_t *buflen, const char *path, int threads, const uint64_t *lowBits, int lowBitN, int (*check)(uint64_t, void *), void *data, volatile char *stop)
     * }
     */
    public static FunctionDescriptor searchAll48$descriptor() {
        return searchAll48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int searchAll48(uint64_t **seedbuf, uint64_t *buflen, const char *path, int threads, const uint64_t *lowBits, int lowBitN, int (*check)(uint64_t, void *), void *data, volatile char *stop)
     * }
     */
    public static MethodHandle searchAll48$handle() {
        return searchAll48.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int searchAll48(uint64_t **seedbuf, uint64_t *buflen, const char *path, int threads, const uint64_t *lowBits, int lowBitN, int (*check)(uint64_t, void *), void *data, volatile char *stop)
     * }
     */
    public static MemorySegment searchAll48$address() {
        return searchAll48.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int searchAll48(uint64_t **seedbuf, uint64_t *buflen, const char *path, int threads, const uint64_t *lowBits, int lowBitN, int (*check)(uint64_t, void *), void *data, volatile char *stop)
     * }
     */
    public static int searchAll48(MemorySegment seedbuf, MemorySegment buflen, MemorySegment path, int threads, MemorySegment lowBits, int lowBitN, MemorySegment check, MemorySegment data, MemorySegment stop) {
        var mh$ = searchAll48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("searchAll48", seedbuf, buflen, path, threads, lowBits, lowBitN, check, data, stop);
            }
            return (int)mh$.invokeExact(seedbuf, buflen, path, threads, lowBits, lowBitN, check, data, stop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getOptimalAfk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Pos.layout(),
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("getOptimalAfk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Pos getOptimalAfk(Pos p[4], int ax, int ay, int az, int *spcnt)
     * }
     */
    public static FunctionDescriptor getOptimalAfk$descriptor() {
        return getOptimalAfk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Pos getOptimalAfk(Pos p[4], int ax, int ay, int az, int *spcnt)
     * }
     */
    public static MethodHandle getOptimalAfk$handle() {
        return getOptimalAfk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Pos getOptimalAfk(Pos p[4], int ax, int ay, int az, int *spcnt)
     * }
     */
    public static MemorySegment getOptimalAfk$address() {
        return getOptimalAfk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Pos getOptimalAfk(Pos p[4], int ax, int ay, int az, int *spcnt)
     * }
     */
    public static MemorySegment getOptimalAfk(SegmentAllocator allocator, MemorySegment p, int ax, int ay, int az, MemorySegment spcnt) {
        var mh$ = getOptimalAfk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getOptimalAfk", allocator, p, ax, ay, az, spcnt);
            }
            return (MemorySegment)mh$.invokeExact(allocator, p, ax, ay, az, spcnt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scanForQuads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            StructureConfig.layout(),
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_LONG_LONG,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("scanForQuads");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int scanForQuads(const StructureConfig sconf, int radius, uint64_t s48, const uint64_t *lowBits, int lowBitN, uint64_t salt, int x, int z, int w, int h, Pos *qplist, int n)
     * }
     */
    public static FunctionDescriptor scanForQuads$descriptor() {
        return scanForQuads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int scanForQuads(const StructureConfig sconf, int radius, uint64_t s48, const uint64_t *lowBits, int lowBitN, uint64_t salt, int x, int z, int w, int h, Pos *qplist, int n)
     * }
     */
    public static MethodHandle scanForQuads$handle() {
        return scanForQuads.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int scanForQuads(const StructureConfig sconf, int radius, uint64_t s48, const uint64_t *lowBits, int lowBitN, uint64_t salt, int x, int z, int w, int h, Pos *qplist, int n)
     * }
     */
    public static MemorySegment scanForQuads$address() {
        return scanForQuads.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int scanForQuads(const StructureConfig sconf, int radius, uint64_t s48, const uint64_t *lowBits, int lowBitN, uint64_t salt, int x, int z, int w, int h, Pos *qplist, int n)
     * }
     */
    public static int scanForQuads(MemorySegment sconf, int radius, long s48, MemorySegment lowBits, int lowBitN, long salt, int x, int z, int w, int h, MemorySegment qplist, int n) {
        var mh$ = scanForQuads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scanForQuads", sconf, radius, s48, lowBits, lowBitN, salt, x, z, w, h, qplist, n);
            }
            return (int)mh$.invokeExact(sconf, radius, s48, lowBits, lowBitN, salt, x, z, w, h, qplist, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class loadSavedSeeds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("loadSavedSeeds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t *loadSavedSeeds(const char *fnam, uint64_t *scnt)
     * }
     */
    public static FunctionDescriptor loadSavedSeeds$descriptor() {
        return loadSavedSeeds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t *loadSavedSeeds(const char *fnam, uint64_t *scnt)
     * }
     */
    public static MethodHandle loadSavedSeeds$handle() {
        return loadSavedSeeds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint64_t *loadSavedSeeds(const char *fnam, uint64_t *scnt)
     * }
     */
    public static MemorySegment loadSavedSeeds$address() {
        return loadSavedSeeds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint64_t *loadSavedSeeds(const char *fnam, uint64_t *scnt)
     * }
     */
    public static MemorySegment loadSavedSeeds(MemorySegment fnam, MemorySegment scnt) {
        var mh$ = loadSavedSeeds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("loadSavedSeeds", fnam, scnt);
            }
            return (MemorySegment)mh$.invokeExact(fnam, scnt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mc2str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("mc2str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *mc2str(int mc)
     * }
     */
    public static FunctionDescriptor mc2str$descriptor() {
        return mc2str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *mc2str(int mc)
     * }
     */
    public static MethodHandle mc2str$handle() {
        return mc2str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *mc2str(int mc)
     * }
     */
    public static MemorySegment mc2str$address() {
        return mc2str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *mc2str(int mc)
     * }
     */
    public static MemorySegment mc2str(int mc) {
        var mh$ = mc2str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mc2str", mc);
            }
            return (MemorySegment)mh$.invokeExact(mc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class str2mc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("str2mc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int str2mc(const char *s)
     * }
     */
    public static FunctionDescriptor str2mc$descriptor() {
        return str2mc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int str2mc(const char *s)
     * }
     */
    public static MethodHandle str2mc$handle() {
        return str2mc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int str2mc(const char *s)
     * }
     */
    public static MemorySegment str2mc$address() {
        return str2mc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int str2mc(const char *s)
     * }
     */
    public static int str2mc(MemorySegment s) {
        var mh$ = str2mc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("str2mc", s);
            }
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class biome2str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("biome2str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *biome2str(int mc, int id)
     * }
     */
    public static FunctionDescriptor biome2str$descriptor() {
        return biome2str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *biome2str(int mc, int id)
     * }
     */
    public static MethodHandle biome2str$handle() {
        return biome2str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *biome2str(int mc, int id)
     * }
     */
    public static MemorySegment biome2str$address() {
        return biome2str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *biome2str(int mc, int id)
     * }
     */
    public static MemorySegment biome2str(int mc, int id) {
        var mh$ = biome2str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("biome2str", mc, id);
            }
            return (MemorySegment)mh$.invokeExact(mc, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class struct2str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_POINTER,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("struct2str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *struct2str(int stype)
     * }
     */
    public static FunctionDescriptor struct2str$descriptor() {
        return struct2str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *struct2str(int stype)
     * }
     */
    public static MethodHandle struct2str$handle() {
        return struct2str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *struct2str(int stype)
     * }
     */
    public static MemorySegment struct2str$address() {
        return struct2str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *struct2str(int stype)
     * }
     */
    public static MemorySegment struct2str(int stype) {
        var mh$ = struct2str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("struct2str", stype);
            }
            return (MemorySegment)mh$.invokeExact(stype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class initBiomeColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("initBiomeColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void initBiomeColors(unsigned char biomeColors[256][3])
     * }
     */
    public static FunctionDescriptor initBiomeColors$descriptor() {
        return initBiomeColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void initBiomeColors(unsigned char biomeColors[256][3])
     * }
     */
    public static MethodHandle initBiomeColors$handle() {
        return initBiomeColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void initBiomeColors(unsigned char biomeColors[256][3])
     * }
     */
    public static MemorySegment initBiomeColors$address() {
        return initBiomeColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void initBiomeColors(unsigned char biomeColors[256][3])
     * }
     */
    public static void initBiomeColors(MemorySegment biomeColors) {
        var mh$ = initBiomeColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("initBiomeColors", biomeColors);
            }
            mh$.invokeExact(biomeColors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class initBiomeTypeColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("initBiomeTypeColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void initBiomeTypeColors(unsigned char biomeColors[256][3])
     * }
     */
    public static FunctionDescriptor initBiomeTypeColors$descriptor() {
        return initBiomeTypeColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void initBiomeTypeColors(unsigned char biomeColors[256][3])
     * }
     */
    public static MethodHandle initBiomeTypeColors$handle() {
        return initBiomeTypeColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void initBiomeTypeColors(unsigned char biomeColors[256][3])
     * }
     */
    public static MemorySegment initBiomeTypeColors$address() {
        return initBiomeTypeColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void initBiomeTypeColors(unsigned char biomeColors[256][3])
     * }
     */
    public static void initBiomeTypeColors(MemorySegment biomeColors) {
        var mh$ = initBiomeTypeColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("initBiomeTypeColors", biomeColors);
            }
            mh$.invokeExact(biomeColors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class parseBiomeColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("parseBiomeColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int parseBiomeColors(unsigned char biomeColors[256][3], const char *buf)
     * }
     */
    public static FunctionDescriptor parseBiomeColors$descriptor() {
        return parseBiomeColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int parseBiomeColors(unsigned char biomeColors[256][3], const char *buf)
     * }
     */
    public static MethodHandle parseBiomeColors$handle() {
        return parseBiomeColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int parseBiomeColors(unsigned char biomeColors[256][3], const char *buf)
     * }
     */
    public static MemorySegment parseBiomeColors$address() {
        return parseBiomeColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int parseBiomeColors(unsigned char biomeColors[256][3], const char *buf)
     * }
     */
    public static int parseBiomeColors(MemorySegment biomeColors, MemorySegment buf) {
        var mh$ = parseBiomeColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("parseBiomeColors", biomeColors, buf);
            }
            return (int)mh$.invokeExact(biomeColors, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class biomesToImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("biomesToImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int biomesToImage(unsigned char *pixels, unsigned char biomeColors[256][3], const int *biomes, const unsigned int sx, const unsigned int sy, const unsigned int pixscale, const int flip)
     * }
     */
    public static FunctionDescriptor biomesToImage$descriptor() {
        return biomesToImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int biomesToImage(unsigned char *pixels, unsigned char biomeColors[256][3], const int *biomes, const unsigned int sx, const unsigned int sy, const unsigned int pixscale, const int flip)
     * }
     */
    public static MethodHandle biomesToImage$handle() {
        return biomesToImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int biomesToImage(unsigned char *pixels, unsigned char biomeColors[256][3], const int *biomes, const unsigned int sx, const unsigned int sy, const unsigned int pixscale, const int flip)
     * }
     */
    public static MemorySegment biomesToImage$address() {
        return biomesToImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int biomesToImage(unsigned char *pixels, unsigned char biomeColors[256][3], const int *biomes, const unsigned int sx, const unsigned int sy, const unsigned int pixscale, const int flip)
     * }
     */
    public static int biomesToImage(MemorySegment pixels, MemorySegment biomeColors, MemorySegment biomes, int sx, int sy, int pixscale, int flip) {
        var mh$ = biomesToImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("biomesToImage", pixels, biomeColors, biomes, sx, sy, pixscale, flip);
            }
            return (int)mh$.invokeExact(pixels, biomeColors, biomes, sx, sy, pixscale, flip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class savePPM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Cubiomes.C_INT,
            Cubiomes.C_POINTER,
            Cubiomes.C_POINTER,
            Cubiomes.C_INT,
            Cubiomes.C_INT
        );

        public static final MemorySegment ADDR = Cubiomes.findOrThrow("savePPM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int savePPM(const char *path, const unsigned char *pixels, const unsigned int sx, const unsigned int sy)
     * }
     */
    public static FunctionDescriptor savePPM$descriptor() {
        return savePPM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int savePPM(const char *path, const unsigned char *pixels, const unsigned int sx, const unsigned int sy)
     * }
     */
    public static MethodHandle savePPM$handle() {
        return savePPM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int savePPM(const char *path, const unsigned char *pixels, const unsigned int sx, const unsigned int sy)
     * }
     */
    public static MemorySegment savePPM$address() {
        return savePPM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int savePPM(const char *path, const unsigned char *pixels, const unsigned int sx, const unsigned int sy)
     * }
     */
    public static int savePPM(MemorySegment path, MemorySegment pixels, int sx, int sy) {
        var mh$ = savePPM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("savePPM", path, pixels, sx, sy);
            }
            return (int)mh$.invokeExact(path, pixels, sx, sy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int _VCRUNTIME_DISABLED_WARNINGS = (int)4514L;
    /**
     * {@snippet lang=c :
     * #define _VCRUNTIME_DISABLED_WARNINGS 4514
     * }
     */
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return _VCRUNTIME_DISABLED_WARNINGS;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int _UCRT_DISABLED_WARNINGS = (int)4324L;
    /**
     * {@snippet lang=c :
     * #define _UCRT_DISABLED_WARNINGS 4324
     * }
     */
    public static int _UCRT_DISABLED_WARNINGS() {
        return _UCRT_DISABLED_WARNINGS;
    }
    private static final long _TRUNCATE = -1L;
    /**
     * {@snippet lang=c :
     * #define _TRUNCATE -1
     * }
     */
    public static long _TRUNCATE() {
        return _TRUNCATE;
    }
    private static final long _CRT_SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define _CRT_SIZE_MAX -1
     * }
     */
    public static long _CRT_SIZE_MAX() {
        return _CRT_SIZE_MAX;
    }
    /**
     * {@snippet lang=c :
     * #define __FILEW__ "j"
     * }
     */
    public static MemorySegment __FILEW__() {
        class Holder {
            static final MemorySegment __FILEW__
                = Cubiomes.LIBRARY_ARENA.allocateFrom("j");
        }
        return Holder.__FILEW__;
    }
    private static final int __STDC_SECURE_LIB__ = (int)200411L;
    /**
     * {@snippet lang=c :
     * #define __STDC_SECURE_LIB__ 200411
     * }
     */
    public static int __STDC_SECURE_LIB__() {
        return __STDC_SECURE_LIB__;
    }
    private static final int __GOT_SECURE_LIB__ = (int)200411L;
    /**
     * {@snippet lang=c :
     * #define __GOT_SECURE_LIB__ 200411
     * }
     */
    public static int __GOT_SECURE_LIB__() {
        return __GOT_SECURE_LIB__;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final byte INT8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static byte INT8_MAX() {
        return INT8_MAX;
    }
    private static final short INT16_MAX = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static short INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final byte UINT8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static byte UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final short UINT16_MAX = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static short UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final byte INT_LEAST8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static byte INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final short INT_LEAST16_MAX = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static short INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final byte UINT_LEAST8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static byte UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final short UINT_LEAST16_MAX = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static short UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -2147483648
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final byte INT_FAST8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static byte INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 2147483647
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final byte UINT_FAST8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static byte UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 4294967295
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRId8 "hhd"
     * }
     */
    public static MemorySegment PRId8() {
        class Holder {
            static final MemorySegment PRId8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.PRId8;
    }
    /**
     * {@snippet lang=c :
     * #define PRId16 "hd"
     * }
     */
    public static MemorySegment PRId16() {
        class Holder {
            static final MemorySegment PRId16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.PRId16;
    }
    /**
     * {@snippet lang=c :
     * #define PRId32 "d"
     * }
     */
    public static MemorySegment PRId32() {
        class Holder {
            static final MemorySegment PRId32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRId32;
    }
    /**
     * {@snippet lang=c :
     * #define PRId64 "lld"
     * }
     */
    public static MemorySegment PRId64() {
        class Holder {
            static final MemorySegment PRId64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.PRId64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST8 "hhd"
     * }
     */
    public static MemorySegment PRIdLEAST8() {
        class Holder {
            static final MemorySegment PRIdLEAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.PRIdLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST16 "hd"
     * }
     */
    public static MemorySegment PRIdLEAST16() {
        class Holder {
            static final MemorySegment PRIdLEAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.PRIdLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST32 "d"
     * }
     */
    public static MemorySegment PRIdLEAST32() {
        class Holder {
            static final MemorySegment PRIdLEAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST64 "lld"
     * }
     */
    public static MemorySegment PRIdLEAST64() {
        class Holder {
            static final MemorySegment PRIdLEAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.PRIdLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST8 "hhd"
     * }
     */
    public static MemorySegment PRIdFAST8() {
        class Holder {
            static final MemorySegment PRIdFAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.PRIdFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST16 "d"
     * }
     */
    public static MemorySegment PRIdFAST16() {
        class Holder {
            static final MemorySegment PRIdFAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST32 "d"
     * }
     */
    public static MemorySegment PRIdFAST32() {
        class Holder {
            static final MemorySegment PRIdFAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST64 "lld"
     * }
     */
    public static MemorySegment PRIdFAST64() {
        class Holder {
            static final MemorySegment PRIdFAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.PRIdFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdMAX "lld"
     * }
     */
    public static MemorySegment PRIdMAX() {
        class Holder {
            static final MemorySegment PRIdMAX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.PRIdMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdPTR "lld"
     * }
     */
    public static MemorySegment PRIdPTR() {
        class Holder {
            static final MemorySegment PRIdPTR
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.PRIdPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi8 "hhi"
     * }
     */
    public static MemorySegment PRIi8() {
        class Holder {
            static final MemorySegment PRIi8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.PRIi8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi16 "hi"
     * }
     */
    public static MemorySegment PRIi16() {
        class Holder {
            static final MemorySegment PRIi16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.PRIi16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi32 "i"
     * }
     */
    public static MemorySegment PRIi32() {
        class Holder {
            static final MemorySegment PRIi32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIi32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi64 "lli"
     * }
     */
    public static MemorySegment PRIi64() {
        class Holder {
            static final MemorySegment PRIi64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.PRIi64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST8 "hhi"
     * }
     */
    public static MemorySegment PRIiLEAST8() {
        class Holder {
            static final MemorySegment PRIiLEAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.PRIiLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST16 "hi"
     * }
     */
    public static MemorySegment PRIiLEAST16() {
        class Holder {
            static final MemorySegment PRIiLEAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.PRIiLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST32 "i"
     * }
     */
    public static MemorySegment PRIiLEAST32() {
        class Holder {
            static final MemorySegment PRIiLEAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST64 "lli"
     * }
     */
    public static MemorySegment PRIiLEAST64() {
        class Holder {
            static final MemorySegment PRIiLEAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.PRIiLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST8 "hhi"
     * }
     */
    public static MemorySegment PRIiFAST8() {
        class Holder {
            static final MemorySegment PRIiFAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.PRIiFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST16 "i"
     * }
     */
    public static MemorySegment PRIiFAST16() {
        class Holder {
            static final MemorySegment PRIiFAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST32 "i"
     * }
     */
    public static MemorySegment PRIiFAST32() {
        class Holder {
            static final MemorySegment PRIiFAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST64 "lli"
     * }
     */
    public static MemorySegment PRIiFAST64() {
        class Holder {
            static final MemorySegment PRIiFAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.PRIiFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiMAX "lli"
     * }
     */
    public static MemorySegment PRIiMAX() {
        class Holder {
            static final MemorySegment PRIiMAX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.PRIiMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiPTR "lli"
     * }
     */
    public static MemorySegment PRIiPTR() {
        class Holder {
            static final MemorySegment PRIiPTR
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.PRIiPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo8 "hho"
     * }
     */
    public static MemorySegment PRIo8() {
        class Holder {
            static final MemorySegment PRIo8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.PRIo8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo16 "ho"
     * }
     */
    public static MemorySegment PRIo16() {
        class Holder {
            static final MemorySegment PRIo16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.PRIo16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo32 "o"
     * }
     */
    public static MemorySegment PRIo32() {
        class Holder {
            static final MemorySegment PRIo32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIo32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo64 "llo"
     * }
     */
    public static MemorySegment PRIo64() {
        class Holder {
            static final MemorySegment PRIo64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.PRIo64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST8 "hho"
     * }
     */
    public static MemorySegment PRIoLEAST8() {
        class Holder {
            static final MemorySegment PRIoLEAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.PRIoLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST16 "ho"
     * }
     */
    public static MemorySegment PRIoLEAST16() {
        class Holder {
            static final MemorySegment PRIoLEAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.PRIoLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST32 "o"
     * }
     */
    public static MemorySegment PRIoLEAST32() {
        class Holder {
            static final MemorySegment PRIoLEAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST64 "llo"
     * }
     */
    public static MemorySegment PRIoLEAST64() {
        class Holder {
            static final MemorySegment PRIoLEAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.PRIoLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST8 "hho"
     * }
     */
    public static MemorySegment PRIoFAST8() {
        class Holder {
            static final MemorySegment PRIoFAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.PRIoFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST16 "o"
     * }
     */
    public static MemorySegment PRIoFAST16() {
        class Holder {
            static final MemorySegment PRIoFAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST32 "o"
     * }
     */
    public static MemorySegment PRIoFAST32() {
        class Holder {
            static final MemorySegment PRIoFAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST64 "llo"
     * }
     */
    public static MemorySegment PRIoFAST64() {
        class Holder {
            static final MemorySegment PRIoFAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.PRIoFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoMAX "llo"
     * }
     */
    public static MemorySegment PRIoMAX() {
        class Holder {
            static final MemorySegment PRIoMAX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.PRIoMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoPTR "llo"
     * }
     */
    public static MemorySegment PRIoPTR() {
        class Holder {
            static final MemorySegment PRIoPTR
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.PRIoPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu8 "hhu"
     * }
     */
    public static MemorySegment PRIu8() {
        class Holder {
            static final MemorySegment PRIu8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.PRIu8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu16 "hu"
     * }
     */
    public static MemorySegment PRIu16() {
        class Holder {
            static final MemorySegment PRIu16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.PRIu16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu32 "u"
     * }
     */
    public static MemorySegment PRIu32() {
        class Holder {
            static final MemorySegment PRIu32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIu32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu64 "llu"
     * }
     */
    public static MemorySegment PRIu64() {
        class Holder {
            static final MemorySegment PRIu64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.PRIu64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST8 "hhu"
     * }
     */
    public static MemorySegment PRIuLEAST8() {
        class Holder {
            static final MemorySegment PRIuLEAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.PRIuLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST16 "hu"
     * }
     */
    public static MemorySegment PRIuLEAST16() {
        class Holder {
            static final MemorySegment PRIuLEAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.PRIuLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST32 "u"
     * }
     */
    public static MemorySegment PRIuLEAST32() {
        class Holder {
            static final MemorySegment PRIuLEAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST64 "llu"
     * }
     */
    public static MemorySegment PRIuLEAST64() {
        class Holder {
            static final MemorySegment PRIuLEAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.PRIuLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST8 "hhu"
     * }
     */
    public static MemorySegment PRIuFAST8() {
        class Holder {
            static final MemorySegment PRIuFAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.PRIuFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST16 "u"
     * }
     */
    public static MemorySegment PRIuFAST16() {
        class Holder {
            static final MemorySegment PRIuFAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST32 "u"
     * }
     */
    public static MemorySegment PRIuFAST32() {
        class Holder {
            static final MemorySegment PRIuFAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST64 "llu"
     * }
     */
    public static MemorySegment PRIuFAST64() {
        class Holder {
            static final MemorySegment PRIuFAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.PRIuFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuMAX "llu"
     * }
     */
    public static MemorySegment PRIuMAX() {
        class Holder {
            static final MemorySegment PRIuMAX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.PRIuMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuPTR "llu"
     * }
     */
    public static MemorySegment PRIuPTR() {
        class Holder {
            static final MemorySegment PRIuPTR
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.PRIuPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx8 "hhx"
     * }
     */
    public static MemorySegment PRIx8() {
        class Holder {
            static final MemorySegment PRIx8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.PRIx8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx16 "hx"
     * }
     */
    public static MemorySegment PRIx16() {
        class Holder {
            static final MemorySegment PRIx16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.PRIx16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx32 "x"
     * }
     */
    public static MemorySegment PRIx32() {
        class Holder {
            static final MemorySegment PRIx32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIx32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx64 "llx"
     * }
     */
    public static MemorySegment PRIx64() {
        class Holder {
            static final MemorySegment PRIx64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.PRIx64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST8 "hhx"
     * }
     */
    public static MemorySegment PRIxLEAST8() {
        class Holder {
            static final MemorySegment PRIxLEAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.PRIxLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST16 "hx"
     * }
     */
    public static MemorySegment PRIxLEAST16() {
        class Holder {
            static final MemorySegment PRIxLEAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.PRIxLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST32 "x"
     * }
     */
    public static MemorySegment PRIxLEAST32() {
        class Holder {
            static final MemorySegment PRIxLEAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST64 "llx"
     * }
     */
    public static MemorySegment PRIxLEAST64() {
        class Holder {
            static final MemorySegment PRIxLEAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.PRIxLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST8 "hhx"
     * }
     */
    public static MemorySegment PRIxFAST8() {
        class Holder {
            static final MemorySegment PRIxFAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.PRIxFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST16 "x"
     * }
     */
    public static MemorySegment PRIxFAST16() {
        class Holder {
            static final MemorySegment PRIxFAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST32 "x"
     * }
     */
    public static MemorySegment PRIxFAST32() {
        class Holder {
            static final MemorySegment PRIxFAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST64 "llx"
     * }
     */
    public static MemorySegment PRIxFAST64() {
        class Holder {
            static final MemorySegment PRIxFAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.PRIxFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxMAX "llx"
     * }
     */
    public static MemorySegment PRIxMAX() {
        class Holder {
            static final MemorySegment PRIxMAX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.PRIxMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxPTR "llx"
     * }
     */
    public static MemorySegment PRIxPTR() {
        class Holder {
            static final MemorySegment PRIxPTR
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.PRIxPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX8 "hhX"
     * }
     */
    public static MemorySegment PRIX8() {
        class Holder {
            static final MemorySegment PRIX8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhX");
        }
        return Holder.PRIX8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX16 "hX"
     * }
     */
    public static MemorySegment PRIX16() {
        class Holder {
            static final MemorySegment PRIX16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hX");
        }
        return Holder.PRIX16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX32 "X"
     * }
     */
    public static MemorySegment PRIX32() {
        class Holder {
            static final MemorySegment PRIX32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIX32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX64 "llX"
     * }
     */
    public static MemorySegment PRIX64() {
        class Holder {
            static final MemorySegment PRIX64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llX");
        }
        return Holder.PRIX64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST8 "hhX"
     * }
     */
    public static MemorySegment PRIXLEAST8() {
        class Holder {
            static final MemorySegment PRIXLEAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhX");
        }
        return Holder.PRIXLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST16 "hX"
     * }
     */
    public static MemorySegment PRIXLEAST16() {
        class Holder {
            static final MemorySegment PRIXLEAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hX");
        }
        return Holder.PRIXLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST32 "X"
     * }
     */
    public static MemorySegment PRIXLEAST32() {
        class Holder {
            static final MemorySegment PRIXLEAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST64 "llX"
     * }
     */
    public static MemorySegment PRIXLEAST64() {
        class Holder {
            static final MemorySegment PRIXLEAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llX");
        }
        return Holder.PRIXLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST8 "hhX"
     * }
     */
    public static MemorySegment PRIXFAST8() {
        class Holder {
            static final MemorySegment PRIXFAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhX");
        }
        return Holder.PRIXFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST16 "X"
     * }
     */
    public static MemorySegment PRIXFAST16() {
        class Holder {
            static final MemorySegment PRIXFAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST32 "X"
     * }
     */
    public static MemorySegment PRIXFAST32() {
        class Holder {
            static final MemorySegment PRIXFAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST64 "llX"
     * }
     */
    public static MemorySegment PRIXFAST64() {
        class Holder {
            static final MemorySegment PRIXFAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llX");
        }
        return Holder.PRIXFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXMAX "llX"
     * }
     */
    public static MemorySegment PRIXMAX() {
        class Holder {
            static final MemorySegment PRIXMAX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llX");
        }
        return Holder.PRIXMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXPTR "llX"
     * }
     */
    public static MemorySegment PRIXPTR() {
        class Holder {
            static final MemorySegment PRIXPTR
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llX");
        }
        return Holder.PRIXPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd8 "hhd"
     * }
     */
    public static MemorySegment SCNd8() {
        class Holder {
            static final MemorySegment SCNd8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNd8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd16 "hd"
     * }
     */
    public static MemorySegment SCNd16() {
        class Holder {
            static final MemorySegment SCNd16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNd16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd32 "d"
     * }
     */
    public static MemorySegment SCNd32() {
        class Holder {
            static final MemorySegment SCNd32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNd32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd64 "lld"
     * }
     */
    public static MemorySegment SCNd64() {
        class Holder {
            static final MemorySegment SCNd64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.SCNd64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdLEAST8() {
        class Holder {
            static final MemorySegment SCNdLEAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNdLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST16 "hd"
     * }
     */
    public static MemorySegment SCNdLEAST16() {
        class Holder {
            static final MemorySegment SCNdLEAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNdLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST32 "d"
     * }
     */
    public static MemorySegment SCNdLEAST32() {
        class Holder {
            static final MemorySegment SCNdLEAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNdLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST64 "lld"
     * }
     */
    public static MemorySegment SCNdLEAST64() {
        class Holder {
            static final MemorySegment SCNdLEAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.SCNdLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdFAST8() {
        class Holder {
            static final MemorySegment SCNdFAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNdFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST16 "d"
     * }
     */
    public static MemorySegment SCNdFAST16() {
        class Holder {
            static final MemorySegment SCNdFAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNdFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST32 "d"
     * }
     */
    public static MemorySegment SCNdFAST32() {
        class Holder {
            static final MemorySegment SCNdFAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNdFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST64 "lld"
     * }
     */
    public static MemorySegment SCNdFAST64() {
        class Holder {
            static final MemorySegment SCNdFAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.SCNdFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdMAX "lld"
     * }
     */
    public static MemorySegment SCNdMAX() {
        class Holder {
            static final MemorySegment SCNdMAX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.SCNdMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdPTR "lld"
     * }
     */
    public static MemorySegment SCNdPTR() {
        class Holder {
            static final MemorySegment SCNdPTR
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.SCNdPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi8 "hhi"
     * }
     */
    public static MemorySegment SCNi8() {
        class Holder {
            static final MemorySegment SCNi8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNi8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi16 "hi"
     * }
     */
    public static MemorySegment SCNi16() {
        class Holder {
            static final MemorySegment SCNi16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNi16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi32 "i"
     * }
     */
    public static MemorySegment SCNi32() {
        class Holder {
            static final MemorySegment SCNi32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNi32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi64 "lli"
     * }
     */
    public static MemorySegment SCNi64() {
        class Holder {
            static final MemorySegment SCNi64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.SCNi64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiLEAST8() {
        class Holder {
            static final MemorySegment SCNiLEAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNiLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST16 "hi"
     * }
     */
    public static MemorySegment SCNiLEAST16() {
        class Holder {
            static final MemorySegment SCNiLEAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNiLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST32 "i"
     * }
     */
    public static MemorySegment SCNiLEAST32() {
        class Holder {
            static final MemorySegment SCNiLEAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNiLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST64 "lli"
     * }
     */
    public static MemorySegment SCNiLEAST64() {
        class Holder {
            static final MemorySegment SCNiLEAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.SCNiLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiFAST8() {
        class Holder {
            static final MemorySegment SCNiFAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNiFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST16 "i"
     * }
     */
    public static MemorySegment SCNiFAST16() {
        class Holder {
            static final MemorySegment SCNiFAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNiFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST32 "i"
     * }
     */
    public static MemorySegment SCNiFAST32() {
        class Holder {
            static final MemorySegment SCNiFAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNiFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST64 "lli"
     * }
     */
    public static MemorySegment SCNiFAST64() {
        class Holder {
            static final MemorySegment SCNiFAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.SCNiFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiMAX "lli"
     * }
     */
    public static MemorySegment SCNiMAX() {
        class Holder {
            static final MemorySegment SCNiMAX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.SCNiMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiPTR "lli"
     * }
     */
    public static MemorySegment SCNiPTR() {
        class Holder {
            static final MemorySegment SCNiPTR
                = Cubiomes.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.SCNiPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo8 "hho"
     * }
     */
    public static MemorySegment SCNo8() {
        class Holder {
            static final MemorySegment SCNo8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNo8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo16 "ho"
     * }
     */
    public static MemorySegment SCNo16() {
        class Holder {
            static final MemorySegment SCNo16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNo16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo32 "o"
     * }
     */
    public static MemorySegment SCNo32() {
        class Holder {
            static final MemorySegment SCNo32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNo32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo64 "llo"
     * }
     */
    public static MemorySegment SCNo64() {
        class Holder {
            static final MemorySegment SCNo64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.SCNo64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST8 "hho"
     * }
     */
    public static MemorySegment SCNoLEAST8() {
        class Holder {
            static final MemorySegment SCNoLEAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNoLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST16 "ho"
     * }
     */
    public static MemorySegment SCNoLEAST16() {
        class Holder {
            static final MemorySegment SCNoLEAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNoLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST32 "o"
     * }
     */
    public static MemorySegment SCNoLEAST32() {
        class Holder {
            static final MemorySegment SCNoLEAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNoLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST64 "llo"
     * }
     */
    public static MemorySegment SCNoLEAST64() {
        class Holder {
            static final MemorySegment SCNoLEAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.SCNoLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST8 "hho"
     * }
     */
    public static MemorySegment SCNoFAST8() {
        class Holder {
            static final MemorySegment SCNoFAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNoFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST16 "o"
     * }
     */
    public static MemorySegment SCNoFAST16() {
        class Holder {
            static final MemorySegment SCNoFAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNoFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST32 "o"
     * }
     */
    public static MemorySegment SCNoFAST32() {
        class Holder {
            static final MemorySegment SCNoFAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNoFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST64 "llo"
     * }
     */
    public static MemorySegment SCNoFAST64() {
        class Holder {
            static final MemorySegment SCNoFAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.SCNoFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoMAX "llo"
     * }
     */
    public static MemorySegment SCNoMAX() {
        class Holder {
            static final MemorySegment SCNoMAX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.SCNoMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoPTR "llo"
     * }
     */
    public static MemorySegment SCNoPTR() {
        class Holder {
            static final MemorySegment SCNoPTR
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.SCNoPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu8 "hhu"
     * }
     */
    public static MemorySegment SCNu8() {
        class Holder {
            static final MemorySegment SCNu8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNu8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu16 "hu"
     * }
     */
    public static MemorySegment SCNu16() {
        class Holder {
            static final MemorySegment SCNu16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNu16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu32 "u"
     * }
     */
    public static MemorySegment SCNu32() {
        class Holder {
            static final MemorySegment SCNu32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNu32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu64 "llu"
     * }
     */
    public static MemorySegment SCNu64() {
        class Holder {
            static final MemorySegment SCNu64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.SCNu64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuLEAST8() {
        class Holder {
            static final MemorySegment SCNuLEAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNuLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST16 "hu"
     * }
     */
    public static MemorySegment SCNuLEAST16() {
        class Holder {
            static final MemorySegment SCNuLEAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNuLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST32 "u"
     * }
     */
    public static MemorySegment SCNuLEAST32() {
        class Holder {
            static final MemorySegment SCNuLEAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNuLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST64 "llu"
     * }
     */
    public static MemorySegment SCNuLEAST64() {
        class Holder {
            static final MemorySegment SCNuLEAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.SCNuLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuFAST8() {
        class Holder {
            static final MemorySegment SCNuFAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNuFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST16 "u"
     * }
     */
    public static MemorySegment SCNuFAST16() {
        class Holder {
            static final MemorySegment SCNuFAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNuFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST32 "u"
     * }
     */
    public static MemorySegment SCNuFAST32() {
        class Holder {
            static final MemorySegment SCNuFAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNuFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST64 "llu"
     * }
     */
    public static MemorySegment SCNuFAST64() {
        class Holder {
            static final MemorySegment SCNuFAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.SCNuFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuMAX "llu"
     * }
     */
    public static MemorySegment SCNuMAX() {
        class Holder {
            static final MemorySegment SCNuMAX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.SCNuMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuPTR "llu"
     * }
     */
    public static MemorySegment SCNuPTR() {
        class Holder {
            static final MemorySegment SCNuPTR
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.SCNuPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx8 "hhx"
     * }
     */
    public static MemorySegment SCNx8() {
        class Holder {
            static final MemorySegment SCNx8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNx8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx16 "hx"
     * }
     */
    public static MemorySegment SCNx16() {
        class Holder {
            static final MemorySegment SCNx16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNx16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx32 "x"
     * }
     */
    public static MemorySegment SCNx32() {
        class Holder {
            static final MemorySegment SCNx32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNx32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx64 "llx"
     * }
     */
    public static MemorySegment SCNx64() {
        class Holder {
            static final MemorySegment SCNx64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.SCNx64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxLEAST8() {
        class Holder {
            static final MemorySegment SCNxLEAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNxLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST16 "hx"
     * }
     */
    public static MemorySegment SCNxLEAST16() {
        class Holder {
            static final MemorySegment SCNxLEAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNxLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST32 "x"
     * }
     */
    public static MemorySegment SCNxLEAST32() {
        class Holder {
            static final MemorySegment SCNxLEAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNxLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST64 "llx"
     * }
     */
    public static MemorySegment SCNxLEAST64() {
        class Holder {
            static final MemorySegment SCNxLEAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.SCNxLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxFAST8() {
        class Holder {
            static final MemorySegment SCNxFAST8
                = Cubiomes.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNxFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST16 "x"
     * }
     */
    public static MemorySegment SCNxFAST16() {
        class Holder {
            static final MemorySegment SCNxFAST16
                = Cubiomes.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNxFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST32 "x"
     * }
     */
    public static MemorySegment SCNxFAST32() {
        class Holder {
            static final MemorySegment SCNxFAST32
                = Cubiomes.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNxFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST64 "llx"
     * }
     */
    public static MemorySegment SCNxFAST64() {
        class Holder {
            static final MemorySegment SCNxFAST64
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.SCNxFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxMAX "llx"
     * }
     */
    public static MemorySegment SCNxMAX() {
        class Holder {
            static final MemorySegment SCNxMAX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.SCNxMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxPTR "llx"
     * }
     */
    public static MemorySegment SCNxPTR() {
        class Holder {
            static final MemorySegment SCNxPTR
                = Cubiomes.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.SCNxPTR;
    }
    private static final int _MAX_ITOSTR_BASE16_COUNT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ITOSTR_BASE16_COUNT 9
     * }
     */
    public static int _MAX_ITOSTR_BASE16_COUNT() {
        return _MAX_ITOSTR_BASE16_COUNT;
    }
    private static final int _MAX_ITOSTR_BASE10_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ITOSTR_BASE10_COUNT 12
     * }
     */
    public static int _MAX_ITOSTR_BASE10_COUNT() {
        return _MAX_ITOSTR_BASE10_COUNT;
    }
    private static final int _MAX_ITOSTR_BASE8_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ITOSTR_BASE8_COUNT 12
     * }
     */
    public static int _MAX_ITOSTR_BASE8_COUNT() {
        return _MAX_ITOSTR_BASE8_COUNT;
    }
    private static final int _MAX_ITOSTR_BASE2_COUNT = (int)33L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ITOSTR_BASE2_COUNT 33
     * }
     */
    public static int _MAX_ITOSTR_BASE2_COUNT() {
        return _MAX_ITOSTR_BASE2_COUNT;
    }
    private static final int _MAX_LTOSTR_BASE16_COUNT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define _MAX_LTOSTR_BASE16_COUNT 9
     * }
     */
    public static int _MAX_LTOSTR_BASE16_COUNT() {
        return _MAX_LTOSTR_BASE16_COUNT;
    }
    private static final int _MAX_LTOSTR_BASE10_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define _MAX_LTOSTR_BASE10_COUNT 12
     * }
     */
    public static int _MAX_LTOSTR_BASE10_COUNT() {
        return _MAX_LTOSTR_BASE10_COUNT;
    }
    private static final int _MAX_LTOSTR_BASE8_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define _MAX_LTOSTR_BASE8_COUNT 12
     * }
     */
    public static int _MAX_LTOSTR_BASE8_COUNT() {
        return _MAX_LTOSTR_BASE8_COUNT;
    }
    private static final int _MAX_LTOSTR_BASE2_COUNT = (int)33L;
    /**
     * {@snippet lang=c :
     * #define _MAX_LTOSTR_BASE2_COUNT 33
     * }
     */
    public static int _MAX_LTOSTR_BASE2_COUNT() {
        return _MAX_LTOSTR_BASE2_COUNT;
    }
    private static final int _MAX_ULTOSTR_BASE16_COUNT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ULTOSTR_BASE16_COUNT 9
     * }
     */
    public static int _MAX_ULTOSTR_BASE16_COUNT() {
        return _MAX_ULTOSTR_BASE16_COUNT;
    }
    private static final int _MAX_ULTOSTR_BASE10_COUNT = (int)11L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ULTOSTR_BASE10_COUNT 11
     * }
     */
    public static int _MAX_ULTOSTR_BASE10_COUNT() {
        return _MAX_ULTOSTR_BASE10_COUNT;
    }
    private static final int _MAX_ULTOSTR_BASE8_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ULTOSTR_BASE8_COUNT 12
     * }
     */
    public static int _MAX_ULTOSTR_BASE8_COUNT() {
        return _MAX_ULTOSTR_BASE8_COUNT;
    }
    private static final int _MAX_ULTOSTR_BASE2_COUNT = (int)33L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ULTOSTR_BASE2_COUNT 33
     * }
     */
    public static int _MAX_ULTOSTR_BASE2_COUNT() {
        return _MAX_ULTOSTR_BASE2_COUNT;
    }
    private static final int _MAX_I64TOSTR_BASE16_COUNT = (int)17L;
    /**
     * {@snippet lang=c :
     * #define _MAX_I64TOSTR_BASE16_COUNT 17
     * }
     */
    public static int _MAX_I64TOSTR_BASE16_COUNT() {
        return _MAX_I64TOSTR_BASE16_COUNT;
    }
    private static final int _MAX_I64TOSTR_BASE10_COUNT = (int)21L;
    /**
     * {@snippet lang=c :
     * #define _MAX_I64TOSTR_BASE10_COUNT 21
     * }
     */
    public static int _MAX_I64TOSTR_BASE10_COUNT() {
        return _MAX_I64TOSTR_BASE10_COUNT;
    }
    private static final int _MAX_I64TOSTR_BASE8_COUNT = (int)23L;
    /**
     * {@snippet lang=c :
     * #define _MAX_I64TOSTR_BASE8_COUNT 23
     * }
     */
    public static int _MAX_I64TOSTR_BASE8_COUNT() {
        return _MAX_I64TOSTR_BASE8_COUNT;
    }
    private static final int _MAX_I64TOSTR_BASE2_COUNT = (int)65L;
    /**
     * {@snippet lang=c :
     * #define _MAX_I64TOSTR_BASE2_COUNT 65
     * }
     */
    public static int _MAX_I64TOSTR_BASE2_COUNT() {
        return _MAX_I64TOSTR_BASE2_COUNT;
    }
    private static final int _MAX_U64TOSTR_BASE16_COUNT = (int)17L;
    /**
     * {@snippet lang=c :
     * #define _MAX_U64TOSTR_BASE16_COUNT 17
     * }
     */
    public static int _MAX_U64TOSTR_BASE16_COUNT() {
        return _MAX_U64TOSTR_BASE16_COUNT;
    }
    private static final int _MAX_U64TOSTR_BASE10_COUNT = (int)21L;
    /**
     * {@snippet lang=c :
     * #define _MAX_U64TOSTR_BASE10_COUNT 21
     * }
     */
    public static int _MAX_U64TOSTR_BASE10_COUNT() {
        return _MAX_U64TOSTR_BASE10_COUNT;
    }
    private static final int _MAX_U64TOSTR_BASE8_COUNT = (int)23L;
    /**
     * {@snippet lang=c :
     * #define _MAX_U64TOSTR_BASE8_COUNT 23
     * }
     */
    public static int _MAX_U64TOSTR_BASE8_COUNT() {
        return _MAX_U64TOSTR_BASE8_COUNT;
    }
    private static final int _MAX_U64TOSTR_BASE2_COUNT = (int)65L;
    /**
     * {@snippet lang=c :
     * #define _MAX_U64TOSTR_BASE2_COUNT 65
     * }
     */
    public static int _MAX_U64TOSTR_BASE2_COUNT() {
        return _MAX_U64TOSTR_BASE2_COUNT;
    }
    private static final int SCHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return SCHAR_MIN;
    }
    private static final int CHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return CHAR_MIN;
    }
    private static final int CHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return CHAR_MAX;
    }
    private static final int SHRT_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return SHRT_MIN;
    }
    private static final int INT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return INT_MIN;
    }
    private static final int UINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return UINT_MAX;
    }
    private static final int LONG_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define LONG_MIN -2147483648
     * }
     */
    public static int LONG_MIN() {
        return LONG_MIN;
    }
    private static final int LONG_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define LONG_MAX 2147483647
     * }
     */
    public static int LONG_MAX() {
        return LONG_MAX;
    }
    private static final int ULONG_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define ULONG_MAX 4294967295
     * }
     */
    public static int ULONG_MAX() {
        return ULONG_MAX;
    }
    private static final long LLONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return LLONG_MAX;
    }
    private static final long LLONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return LLONG_MIN;
    }
    private static final long ULLONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return ULLONG_MAX;
    }
    private static final int _I8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define _I8_MIN -128
     * }
     */
    public static int _I8_MIN() {
        return _I8_MIN;
    }
    private static final byte _I8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define _I8_MAX 127
     * }
     */
    public static byte _I8_MAX() {
        return _I8_MAX;
    }
    private static final byte _UI8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define _UI8_MAX 255
     * }
     */
    public static byte _UI8_MAX() {
        return _UI8_MAX;
    }
    private static final int _I16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define _I16_MIN -32768
     * }
     */
    public static int _I16_MIN() {
        return _I16_MIN;
    }
    private static final short _I16_MAX = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define _I16_MAX 32767
     * }
     */
    public static short _I16_MAX() {
        return _I16_MAX;
    }
    private static final short _UI16_MAX = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define _UI16_MAX 65535
     * }
     */
    public static short _UI16_MAX() {
        return _UI16_MAX;
    }
    private static final int _I32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define _I32_MIN -2147483648
     * }
     */
    public static int _I32_MIN() {
        return _I32_MIN;
    }
    private static final int _I32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define _I32_MAX 2147483647
     * }
     */
    public static int _I32_MAX() {
        return _I32_MAX;
    }
    private static final int _UI32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define _UI32_MAX 4294967295
     * }
     */
    public static int _UI32_MAX() {
        return _UI32_MAX;
    }
    private static final long _I64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define _I64_MIN -9223372036854775808
     * }
     */
    public static long _I64_MIN() {
        return _I64_MIN;
    }
    private static final long _I64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define _I64_MAX 9223372036854775807
     * }
     */
    public static long _I64_MAX() {
        return _I64_MAX;
    }
    private static final long _UI64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define _UI64_MAX -1
     * }
     */
    public static long _UI64_MAX() {
        return _UI64_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final long LONG_LONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LONG_LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_LONG_MAX() {
        return LONG_LONG_MAX;
    }
    private static final long LONG_LONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LONG_LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_LONG_MIN() {
        return LONG_LONG_MIN;
    }
    private static final long ULONG_LONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULONG_LONG_MAX -1
     * }
     */
    public static long ULONG_LONG_MAX() {
        return ULONG_LONG_MAX;
    }
    private static final int _CVTBUFSIZE = (int)349L;
    /**
     * {@snippet lang=c :
     * #define _CVTBUFSIZE 349
     * }
     */
    public static int _CVTBUFSIZE() {
        return _CVTBUFSIZE;
    }
    private static final double _HUGE_ENUF = 1.0E300d;
    /**
     * {@snippet lang=c :
     * #define _HUGE_ENUF 1.0E300
     * }
     */
    public static double _HUGE_ENUF() {
        return _HUGE_ENUF;
    }
    private static final float INFINITY = Float.valueOf("Infinity");
    /**
     * {@snippet lang=c :
     * #define INFINITY Infinity
     * }
     */
    public static float INFINITY() {
        return INFINITY;
    }
    private static final double HUGE_VAL = Double.valueOf("Infinity");
    /**
     * {@snippet lang=c :
     * #define HUGE_VAL Infinity
     * }
     */
    public static double HUGE_VAL() {
        return HUGE_VAL;
    }
    private static final float HUGE_VALF = Float.valueOf("Infinity");
    /**
     * {@snippet lang=c :
     * #define HUGE_VALF Infinity
     * }
     */
    public static float HUGE_VALF() {
        return HUGE_VALF;
    }
    private static final double HUGE_VALL = Double.valueOf("Infinity");
    /**
     * {@snippet lang=c :
     * #define HUGE_VALL Infinity
     * }
     */
    public static double HUGE_VALL() {
        return HUGE_VALL;
    }
    private static final float NAN = Float.valueOf("NaN");
    /**
     * {@snippet lang=c :
     * #define NAN NaN
     * }
     */
    public static float NAN() {
        return NAN;
    }
    private static final int _DENORM = (int)-2L;
    /**
     * {@snippet lang=c :
     * #define _DENORM -2
     * }
     */
    public static int _DENORM() {
        return _DENORM;
    }
    private static final int _FINITE = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _FINITE -1
     * }
     */
    public static int _FINITE() {
        return _FINITE;
    }
    private static final int FP_INFINITE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FP_INFINITE 1
     * }
     */
    public static int FP_INFINITE() {
        return FP_INFINITE;
    }
    private static final int FP_NAN = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FP_NAN 2
     * }
     */
    public static int FP_NAN() {
        return FP_NAN;
    }
    private static final int FP_NORMAL = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define FP_NORMAL -1
     * }
     */
    public static int FP_NORMAL() {
        return FP_NORMAL;
    }
    private static final int FP_SUBNORMAL = (int)-2L;
    /**
     * {@snippet lang=c :
     * #define FP_SUBNORMAL -2
     * }
     */
    public static int FP_SUBNORMAL() {
        return FP_SUBNORMAL;
    }
    private static final int FP_ILOGB0 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define FP_ILOGB0 -2147483648
     * }
     */
    public static int FP_ILOGB0() {
        return FP_ILOGB0;
    }
    private static final int math_errhandling = (int)3L;
    /**
     * {@snippet lang=c :
     * #define math_errhandling 3
     * }
     */
    public static int math_errhandling() {
        return math_errhandling;
    }
    private static final short _DFRAC = (short)15L;
    /**
     * {@snippet lang=c :
     * #define _DFRAC 15
     * }
     */
    public static short _DFRAC() {
        return _DFRAC;
    }
    private static final short _DMASK = (short)32752L;
    /**
     * {@snippet lang=c :
     * #define _DMASK 32752
     * }
     */
    public static short _DMASK() {
        return _DMASK;
    }
    private static final short _DMAX = (short)2047L;
    /**
     * {@snippet lang=c :
     * #define _DMAX 2047
     * }
     */
    public static short _DMAX() {
        return _DMAX;
    }
    private static final short _DSIGN = (short)32768L;
    /**
     * {@snippet lang=c :
     * #define _DSIGN 32768
     * }
     */
    public static short _DSIGN() {
        return _DSIGN;
    }
    private static final short _FFRAC = (short)127L;
    /**
     * {@snippet lang=c :
     * #define _FFRAC 127
     * }
     */
    public static short _FFRAC() {
        return _FFRAC;
    }
    private static final short _FMASK = (short)32640L;
    /**
     * {@snippet lang=c :
     * #define _FMASK 32640
     * }
     */
    public static short _FMASK() {
        return _FMASK;
    }
    private static final short _FMAX = (short)255L;
    /**
     * {@snippet lang=c :
     * #define _FMAX 255
     * }
     */
    public static short _FMAX() {
        return _FMAX;
    }
    private static final short _FSIGN = (short)32768L;
    /**
     * {@snippet lang=c :
     * #define _FSIGN 32768
     * }
     */
    public static short _FSIGN() {
        return _FSIGN;
    }
    private static final short _LFRAC = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define _LFRAC 65535
     * }
     */
    public static short _LFRAC() {
        return _LFRAC;
    }
    private static final short _LMASK = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define _LMASK 32767
     * }
     */
    public static short _LMASK() {
        return _LMASK;
    }
    private static final short _LMAX = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define _LMAX 32767
     * }
     */
    public static short _LMAX() {
        return _LMAX;
    }
    private static final short _LSIGN = (short)32768L;
    /**
     * {@snippet lang=c :
     * #define _LSIGN 32768
     * }
     */
    public static short _LSIGN() {
        return _LSIGN;
    }
    private static final int _DHUGE_EXP = (int)1842L;
    /**
     * {@snippet lang=c :
     * #define _DHUGE_EXP 1842
     * }
     */
    public static int _DHUGE_EXP() {
        return _DHUGE_EXP;
    }
    private static final int _FHUGE_EXP = (int)229L;
    /**
     * {@snippet lang=c :
     * #define _FHUGE_EXP 229
     * }
     */
    public static int _FHUGE_EXP() {
        return _FHUGE_EXP;
    }
    private static final int _LHUGE_EXP = (int)29490L;
    /**
     * {@snippet lang=c :
     * #define _LHUGE_EXP 29490
     * }
     */
    public static int _LHUGE_EXP() {
        return _LHUGE_EXP;
    }
    private static final int DOMAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN 1
     * }
     */
    public static int DOMAIN() {
        return DOMAIN;
    }
    private static final int SING = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SING 2
     * }
     */
    public static int SING() {
        return SING;
    }
    private static final int OVERFLOW = (int)3L;
    /**
     * {@snippet lang=c :
     * #define OVERFLOW 3
     * }
     */
    public static int OVERFLOW() {
        return OVERFLOW;
    }
    private static final int UNDERFLOW = (int)4L;
    /**
     * {@snippet lang=c :
     * #define UNDERFLOW 4
     * }
     */
    public static int UNDERFLOW() {
        return UNDERFLOW;
    }
    private static final int TLOSS = (int)5L;
    /**
     * {@snippet lang=c :
     * #define TLOSS 5
     * }
     */
    public static int TLOSS() {
        return TLOSS;
    }
    private static final int PLOSS = (int)6L;
    /**
     * {@snippet lang=c :
     * #define PLOSS 6
     * }
     */
    public static int PLOSS() {
        return PLOSS;
    }
    private static final long LAYER_INIT_SHA = -1L;
    /**
     * {@snippet lang=c :
     * #define LAYER_INIT_SHA -1
     * }
     */
    public static long LAYER_INIT_SHA() {
        return LAYER_INIT_SHA;
    }
    private static final long MASK48 = 281474976710655L;
    /**
     * {@snippet lang=c :
     * #define MASK48 281474976710655
     * }
     */
    public static long MASK48() {
        return MASK48;
    }
    /**
     * {@snippet lang=c :
     * #define _CRT_INTERNAL_STDIO_SYMBOL_PREFIX ""
     * }
     */
    public static MemorySegment _CRT_INTERNAL_STDIO_SYMBOL_PREFIX() {
        class Holder {
            static final MemorySegment _CRT_INTERNAL_STDIO_SYMBOL_PREFIX
                = Cubiomes.LIBRARY_ARENA.allocateFrom("");
        }
        return Holder._CRT_INTERNAL_STDIO_SYMBOL_PREFIX;
    }
    private static final long _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION = 1L;
    /**
     * {@snippet lang=c :
     * #define _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION 1
     * }
     */
    public static long _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION() {
        return _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION;
    }
    private static final long _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR = 2L;
    /**
     * {@snippet lang=c :
     * #define _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR 2
     * }
     */
    public static long _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR() {
        return _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR;
    }
    private static final long _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS = 4L;
    /**
     * {@snippet lang=c :
     * #define _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS 4
     * }
     */
    public static long _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS() {
        return _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS;
    }
    private static final long _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY = 8L;
    /**
     * {@snippet lang=c :
     * #define _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY 8
     * }
     */
    public static long _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY() {
        return _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY;
    }
    private static final long _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS = 16L;
    /**
     * {@snippet lang=c :
     * #define _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS 16
     * }
     */
    public static long _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS() {
        return _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS;
    }
    private static final long _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING = 32L;
    /**
     * {@snippet lang=c :
     * #define _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING 32
     * }
     */
    public static long _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING() {
        return _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING;
    }
    private static final long _CRT_INTERNAL_SCANF_SECURECRT = 1L;
    /**
     * {@snippet lang=c :
     * #define _CRT_INTERNAL_SCANF_SECURECRT 1
     * }
     */
    public static long _CRT_INTERNAL_SCANF_SECURECRT() {
        return _CRT_INTERNAL_SCANF_SECURECRT;
    }
    private static final long _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS = 2L;
    /**
     * {@snippet lang=c :
     * #define _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS 2
     * }
     */
    public static long _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS() {
        return _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS;
    }
    private static final long _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY = 4L;
    /**
     * {@snippet lang=c :
     * #define _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY 4
     * }
     */
    public static long _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY() {
        return _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY;
    }
    private static final short WEOF = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define WEOF 65535
     * }
     */
    public static short WEOF() {
        return WEOF;
    }
    private static final int _NFILE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define _NFILE 512
     * }
     */
    public static int _NFILE() {
        return _NFILE;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    private static final int L_tmpnam_s = (int)260L;
    /**
     * {@snippet lang=c :
     * #define L_tmpnam_s 260
     * }
     */
    public static int L_tmpnam_s() {
        return L_tmpnam_s;
    }
    private static final int TMP_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define TMP_MAX 2147483647
     * }
     */
    public static int TMP_MAX() {
        return TMP_MAX;
    }
    private static final int TMP_MAX_S = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define TMP_MAX_S 2147483647
     * }
     */
    public static int TMP_MAX_S() {
        return TMP_MAX_S;
    }
    private static final int _TMP_MAX_S = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define _TMP_MAX_S 2147483647
     * }
     */
    public static int _TMP_MAX_S() {
        return _TMP_MAX_S;
    }
    private static final int SYS_OPEN = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SYS_OPEN 20
     * }
     */
    public static int SYS_OPEN() {
        return SYS_OPEN;
    }
}

