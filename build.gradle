plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'com.gradleup.shadow' version '8.3.4'
	id 'maven-publish'
}

base {
	archivesName = project.archives_base_name
	version = project.mod_version
	group = project.maven_group
}

loom {
	accessWidenerPath = file('src/main/resources/seedmapper.aw')
}

repositories {
	mavenCentral()
	maven {
		name = 'xpple'
		url = 'https://maven.xpple.dev/maven2'
	}
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven {
		name = 'SeedFinding'
		url 'https://nexus.seedfinding.com/repository/maven-seedfinding-snapshots'
	}
}

configurations {
	// configuration that holds jars to include in the jar
	extraLibs
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		officialMojangMappings {
			nameSyntheticMembers = true
		}
		parchment "org.parchmentmc.data:${project.parchment_mappings}"
	}
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	include modImplementation("dev.xpple:clientarguments:${project.clientarguments_version}")
	include modImplementation("dev.xpple:betterconfig-fabric:${project.betterconfig_version}")

	extraLibs("com.seedfinding:mc_math:${project.mc_math_version}") {transitive = false}
	extraLibs("com.seedfinding:mc_seed:${project.mc_seed_version}") {transitive = false}
	extraLibs("com.seedfinding:mc_core:${project.mc_core_version}") {transitive = false}
	extraLibs("com.seedfinding:mc_noise:${project.mc_noise_version}") {transitive = false}
	extraLibs("com.seedfinding:mc_biome:${project.mc_biome_version}") {transitive = false}
	extraLibs("com.seedfinding:mc_terrain:${project.mc_terrain_version}") {transitive = false}
	extraLibs("com.seedfinding:mc_feature:${project.mc_feature_version}") {transitive = false}

	extraLibs("com.seedfinding:mc_reversal:${project.mc_reversal_version}") {transitive = false}
	configurations.implementation.extendsFrom(configurations.extraLibs)
}

processResources {
	def props = [version: project.mod_version, loader_version: project.fabric_loader_version]
	inputs.properties props
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand props
	}

	from("LICENSE") {
		rename {"${it}_${project.base.archivesName.get()}"}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

shadowJar {
	configurations = [project.configurations.extraLibs]
	setArchiveClassifier("dev")
	relocate "com.seedfinding", "dev.xpple.seedfinding"
}

remapJar {
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
	setArchiveClassifier(null)
}

// solve the duplicate strategy issue
tasks.withType(Jar) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.base.archivesName.get()
			from components.java
		}
	}

	repositories {

	}
}
